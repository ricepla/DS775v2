{"backend_state":"init","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.2"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{},"toc_section_display":true,"toc_window_display":false},"varInspector":{"cols":{"lenName":16,"lenType":16,"lenVar":40},"kernels_config":{"python":{"delete_cmd_postfix":"","delete_cmd_prefix":"del ","library":"var_list.py","varRefreshCmd":"print(var_dic_list())"},"r":{"delete_cmd_postfix":") ","delete_cmd_prefix":"rm(","library":"var_list.r","varRefreshCmd":"cat(var_dic_list()) "}},"types_to_exclude":["module","function","builtin_function_or_method","instance","_Feature"],"window_display":false}},"trust":false,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"36c977","input":"# solution can go in this code cell with output below.","metadata":{"hidden":true},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"6873f9","input":"# code cell (add more as needed)","pos":7,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"e60add","input":"# execute to import notebook styling for tables and width etc.\nfrom IPython.core.display import HTML\nimport urllib.request\nresponse = urllib.request.urlopen('https://raw.githubusercontent.com/DataScienceUWL/DS775v2/master/ds755.css')\nHTML(response.read().decode(\"utf-8\"));","metadata":{"code_folding":[0]},"pos":0,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"aace95","input":"# solution can go in this code cell with output below.","pos":11,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"555b75","input":"# using openpyxl\nfrom openpyxl import load_workbook\nwb = load_workbook(filename='data/transp_prob1.xlsx', data_only=True)\nsheet = wb.active\n\n# specify upper left and lower right cells, returns a list or list of lists representing rows\ndef read_range(sheet, begin, end):\n    table = sheet[begin:end]\n    height = len(table)\n    width = len(table[0])\n    if height == 1 or width == 1:\n        # for a single row or column produce a list\n        tmp = [cell.value for row in table for cell in row]\n    else:\n        # for an array of cells produces a list of row lists\n        tmp = [[cell.value for cell in row] for row in table]\n    return (tmp)\n\n\n# finish reading the data\nwarehouses = read_range(sheet, 'A3', 'A5')\n# stores = ...\nwares_stores = [(w,s) for [w,s] in read_range(sheet,'D3','E31')]\n# capacity_dict = ...\ncost_dict = {(w,s):cost for [w,s,cap,cost] in read_range(sheet,'D3','G31')}\nsupply_dict = { w:q for [w,q] in read_range(sheet,'I3','J5')}\n# demand_dict = ...\n\n# throw an error if total supply and demand do not match\nassert (sum(supply_dict.values()) == sum(demand_dict.values()))\n\n# build the model\n\n# solve\n\n# display","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"0586d0","input":"# **HW3.4** Assignment Problem 9.3-4 from the textbook","metadata":{"heading_collapsed":true},"pos":12,"type":"cell"}
{"cell_type":"markdown","id":"1a66fd","input":"<font color = \"blue\"> *** 10 points -  finish the code in the cell below *** (don't delete this cell) </font>","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"1d134f","input":"# **HW3.3** - A more complex transportation problem","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"50334b","input":"# **HW3.1** - Transportation with Capacity Constraint","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"72fac9","input":"In addition to the supply and demand constraints sometimes transportation problems can have capacity restrictions such that each route will have a maximum number of units that may be shipped along that route. (Similar to worker availability in the worker scheduling problem.)\n\nFor this problem there are 3 warehouses that ship the same product to 21 stores.  The supply at the warehouses, demand at the stores, unit shipping costs, and route capacities are stored in the `transp_prob1.xlsx` file in the `data` folder.  Use the `openpyxl` package to read the problem data into lists and nested lists.  Once you have the problem data converted into dictionaries, then adapt the transportation code in the lesson to minimize the total shipping cost.  You'll need to add the extra capacity constraint to give an upper bound to the number of units shipped on each route.  Your code should also use Technique 3 to eliminate unneeded decision variables.\n\nTo get you started the code cell below shows how to use `openpyxl` to read ranges from the Excel workbook.  For full credit you must use an abstract approach to the solution code and you should display the output in a nicely formatted manner (you could use a pandas data frame to display the transported amounts).","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"9de371","input":"This problem is Case 9.1 on page 370 of the textbook.\n\nAlabama Atlantic is a lumber company that has three sources of wood and five markets to be supplied. The annual availability of wood at sources 1, 2, and 3 is 15, 20, and 15 million board feet, respectively. The amount that can be sold annually at markets 1, 2, 3, 4, and 5 is 11, 12, 9, 10, and 8 million board feet, respectively.  In the past the company has shipped the wood by train. However, because shipping costs have been increasing, the alternative of using ships to make some of the deliveries is being investigated. This alternative would require the company to invest in some ships. Except for these investment costs, the shipping costs in thousands of dollars per million board feet by rail and by water (when feasible) would be the following for each route:\n\n<img src=\"images/wood_table_1.png\" width=\"600\">\n\nThe capital investment (in thousands of dollars) in ships required for each million board feet to be transported annually by ship along each route is given as follows:\n\n<img src = \"images/wood_table_2.png\" width=\"600\">\n\nConsidering the expected useful life of the ships and the time value of money, the equivalent uniform annual cost of these investments is one-tenth the amount given in the table. The objective is to determine the overall shipping plan that minimizes the total equivalent uniform annual cost (including shipping costs).\n\nYou are the head of the team that has been assigned the task of determining this shipping plan for each of the following three options.\n* *Option 1:* Continue shipping exclusively by rail.\n* *Option 2:* Switch to shipping exclusively by water (except where only rail is feasible).\n* *Option 3:* Ship by either rail or water, depending on which is less expensive for the particular route.\n\nPresent your results for each option. Compare.  You should write a short summary of the results and include a recommendation for the best option.  Be sure to communicate enough that management can implement your solution including which shipping method to use when applicable. You could modularize your code, though this isn't required, by writing a function that takes the cost array as input and outputs the total cost and transportation amounts.  You could then call the function three times for each of the three options.  For full credit you must use an abstract approach to the solution code.\n\n<font color = \"blue\"> *** 15 points -  answer in cells below *** (don't delete this cell) </font>","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"a9f57e","input":"# **HW3.2** Shipping Wood to Market","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"bc04a4","input":"Five different products pA,..., pE, must be transported from factories to warehouses and then from the warehouses to stores.  The cost per unit varies along different route segments.  Your job is to minimize the total transportation cost.  The constraints are as follows:\n* the amount of each product at each factory must match the supply amount\n* the amount of each product delivered to each store must match the demand amount\n* the amount of each product shipped to each warehouse must be the same as the amount of each product shipped from each warehouse\n* the total (summed) amount of all products at each warehouse must be $\\leq$ `MaxStorage`\n* the total (summed) amount of all products shipped from each factory to each warehouse must be $\\leq$ `CapacityFW`\n* the total (summed) amount of all products shipped from each warehouse to each store must be $\\leq$ `CapacityWS`\n\nThe data for this problem is in `transp_prob3.xlsx`.  Since many routes aren't used you'll need to use one of the techniques in the lesson to make sure that no product is shipped along an unused route. \n\nYour solution should display the total transportation cost as well as the amount transported from both factories to warehouses and from warehouses to stores.  The transport multiple products example in the lesson is a good place to start.  Note that you'll need two \"arrays\" of decision variables for the two sets of connections. You'll also have two separate sums in your objective function to compute the tranportation cost. For full credit you must use an abstract approach to the solution code.\n\nThere are a couple of different ways to approach this problem:\n1.  Add a constraint so that the total amount of each product shipped into the each warehouse is the same as the total amount shipped out of the warehouse.\n2.  Introduce some extra decision variables for the amount of each product at each warehouse.  These variables are then the demand amounts for the shipping from factories to warehouses and the supply amounts for the shipping from warehouses to factories.  With the extra variables the two F -> W and W -> S problems are pretty much standard supply and demand problems.\n\nTwo things to note:\n1.  You'll need separate sets of decision variables for the number of each product from factories to warehouses and for the number of each product from warehouses to stores.\n2.  You can manually check (some of) your solution output against the constraints to make sure they're working the way you intend. \n\n<font color = \"blue\"> *** 15 points -  answer in cell below *** (don't delete this cell) </font>","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"bd6049","input":"<font color=\"green\">\nInclude your summary here (in green font).\n</font>","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"d197d6","input":"The coach of an age group swim team needs to assign swimmers to a 200-yard medley relay team to send to the Junior Olympics. Since most of his best swimmers are very fast in more than one stroke, it is not clear which swimmer should be assigned to each of the four strokes. The five fastest swimmers and the best times (in seconds) they have achieved in each of the strokes (for 50 yards) are\n\n<img src = \"images/swim.png\" width=\"600\">\n\nThe coach wishes to determine how to assign four swimmers to the four different strokes to minimize the sum of the corresponding best times.  \n\nTreat this as an assignment problem and use Pyomo to find the optimal solution.  For full credit you must use an abstract approach to the solution code and display nicely formatted output.\n\n<font color = \"blue\"> *** 10 points -  answer in cell below *** (don't delete this cell) </font>","metadata":{"hidden":true},"pos":13,"type":"cell"}
{"id":0,"time":1611077388627,"type":"user"}
{"last_load":1611077388611,"type":"file"}