{"backend_state":"init","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.2"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{"height":"calc(100% - 180px)","left":"10px","top":"150px","width":"275.824px"},"toc_section_display":true,"toc_window_display":false},"varInspector":{"cols":{"lenName":16,"lenType":16,"lenVar":40},"kernels_config":{"python":{"delete_cmd_postfix":"","delete_cmd_prefix":"del ","library":"var_list.py","varRefreshCmd":"print(var_dic_list())"},"r":{"delete_cmd_postfix":") ","delete_cmd_prefix":"rm(","library":"var_list.r","varRefreshCmd":"cat(var_dic_list()) "}},"types_to_exclude":["module","function","builtin_function_or_method","instance","_Feature"],"window_display":false}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"15e9a9","input":"","pos":12,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"2c0996","input":"import numpy as np\nimport pandas as pd\n\n# load the data + random assignment\nnum_districts = 10\nmin_voters_in_district = 150\nmax_voters_in_district = 350\n\ndems = [152,81,75,34,62,38,48,74,98,66,83,86,72,28,112,45,93,72]\nreps = [62,59,83,52,87,87,69,49,62,72,75,82,83,53,98,82,68,98]\ncities = pd.DataFrame( data = {'dems':dems, 'reps':reps})\n\n# initial assignment\nassign = np.random.randint(low=0,high=num_districts,size = 18)\n\n# ***maximize*** this function\ndef fitness_districts(assign, cities, num_districts):\n    df = cities.groupby(assign).sum()\n    fitness = sum(df['reps'] > df['dems'])\n    total_voters = np.zeros(num_districts, dtype=np.int32)\n    total_voters[df.index] = df.sum(axis=1)\n    fitness -= np.abs(\n        np.minimum(np.maximum(total_voters, 150), 350) - total_voters).sum()\n    return -(fitness)\n\n# to display output, not used in optimization\ndef summarize_districts(assign, cities):\n    reps = np.zeros(num_districts, dtype=np.int32)\n    dems = np.zeros(num_districts, dtype=np.int32)\n    df = cities.groupby(assign).sum()\n    reps[df.index] = df['reps']\n    dems[df.index] = df['dems']\n    total = reps + dems\n    delta = np.minimum(np.maximum(total, min_voters_in_district),\n                       max_voters_in_district) - total\n    rep_win = reps > dems\n    dict = {'reps': reps, 'dems': dems, 'total': total, 'rep_win': rep_win}\n    return (pd.DataFrame(data=dict))","pos":35,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"4ae147","input":"","pos":14,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"62dafd","input":"","metadata":{"hidden":true},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"7b084b","input":"","pos":16,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"cacf22","input":"","pos":37,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d4b9ed","input":"","pos":19,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"da139f","input":"","metadata":{"hidden":true},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"fcda48","input":"def knapsack_local(weights,values):\n# you complete","pos":32,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"6a41f4","input":"# generate random weights and values for a knapsack problem\nimport numpy as np\nnum_items = 20\nnp.random.seed(seed=123)\nvalues = np.random.randint(low=5, high=50, size=num_items)\nweights = np.random.randint(low=1, high=10, size=num_items)\nmax_weight = 50\nnp.random.seed() # use system clock to reset the seed so future random numbers will appear random","pos":22,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"cc1bde","input":"tot_weight = sum( weights[x] )\ntot_weight","output":{"0":{"data":{"text/plain":"11"},"exec_count":11,"output_type":"execute_result"}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"690902","input":"# execute to import notebook styling for tables and width etc.\nfrom IPython.core.display import HTML\nimport urllib.request\nresponse = urllib.request.urlopen('https://raw.githubusercontent.com/DataScienceUWL/DS775v2/master/ds755.css')\nHTML(response.read().decode(\"utf-8\"));","metadata":{"code_folding":[0]},"pos":0,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"8c16f4","input":"x = np.zeros(num_items, dtype = bool)  # all false\nx[[0,2,4]] = True\nx","output":{"0":{"data":{"text/plain":"array([ True, False,  True, False,  True, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False])"},"exec_count":2,"output_type":"execute_result"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"a6bb32","input":"tot_value = sum( values[x] )\ntot_value","output":{"0":{"data":{"text/plain":"68"},"exec_count":8,"output_type":"execute_result"}},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"92e64a","input":"# try executing this cell a few times and watch x change\nbit_to_flip = np.random.randint(num_items)\nx[bit_to_flip] = ~x[bit_to_flip]\nx","output":{"0":{"data":{"text/plain":"array([ True, False, False, False,  True, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False])"},"exec_count":9,"output_type":"execute_result"}},"pos":30,"type":"cell"}
{"cell_type":"markdown","id":"027584","input":"Implement a local search where the search starts with no items included in the collection and generates new states (moves) by randomly choosing one of the booleans in the state vector and toggling it.  Like this:","pos":29,"type":"cell"}
{"cell_type":"markdown","id":"028824","input":"**HW4.3b** -Find all of the local minima and maxima.  Your code should display nicely formatted output.  Include both the location ($x$) and the value of the profit ($p(x)$) for each extrema.\n\n<font color = \"blue\"> *** 4 points -  code in cell below *** (don't delete this cell) </font>","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"06c9c4","input":"# **HW4.4** - Simple Linear Regression","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"09472f","input":"The total value of the items included in the collection:","pos":27,"type":"cell"}
{"cell_type":"markdown","id":"1687f5","input":"# **HW4.3** - Textbook Problem 13.10-5","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"1f649e","input":"# **HW4.5** - Knapsack Optimization","pos":20,"type":"cell"}
{"cell_type":"markdown","id":"364297","input":"<font color = \"blue\"> *** 10 points -  answer in cell below *** (don't delete this cell) </font>","pos":36,"type":"cell"}
{"cell_type":"markdown","id":"3e802a","input":"<font color = \"green\">\nreplace this text with answer, your answer should be green   \n</font>","metadata":{"hidden":true},"pos":7,"type":"cell"}
{"cell_type":"markdown","id":"4e6116","input":"**HW4.3c** - Write a multistart procedure that starts from uniform randomly sampled points in $[0,5]$ to locate the absolute maximum value of profit.\n\n<font color = \"blue\"> *** 4 points -  code in cell below *** (don't delete this cell) </font>","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"6d01dc","input":"# **HW4.1** - Textbook 13-7.2","metadata":{"heading_collapsed":true},"pos":2,"type":"cell"}
{"cell_type":"markdown","id":"794cc2","input":"# **HW4.6** - Object Oriented Solution to Gerrymandering Problem\n\nThe Gerrymandering Problem was a Self_Assessment problem near the end of the Lesson_04 notebook.  You can see our solution in the Self_Assessement_Soln notebook.  Use the locsearch package in this directory to find a local solution to the Gerrymandering problem.  You can follow the example at the end of Lesson_04, but note that the locsearch package minimizes a function and the Gerrymandering Problem is a maximization problem so you'll have negate the output of the fitness function.  Notes:  you should include `cities` and `num_districts` in your `__init__` constructor since the objective function needs both of those extra arguments; in your `move()` method you'll have to figure out `num_cities`\n\nWe've copied the set up code from the lesson for your convenience.  Use `summarize_districts()` to display your final result.","pos":34,"type":"cell"}
{"cell_type":"markdown","id":"817e32","input":"<font size=18>Homework 04: Quadratic Programming and Local Optimization</font>","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"86f96f","input":"To find the line of least squares fit of the form $\\hat{y} = b_0 + b_1 x$ to fit data of the form $(x_1,y_1), (x_2,y_2),\\ldots,(x_n,y_n)$ we minimize a loss function.  The loss function is the sum of the squares residuals and only depends on $b_0$ and $b_1$ for fixed $xy$-data:\n\n$$ SS(b_0,b_1) = \\sum_{i=1}^{n} \\left( y_i - \\hat{y}_i \\right)^2 = \\sum_{i=1}^{n} \\left( y_i - (b_0 + b_1 x_i) \\right)^2 $$.\n\nThe file age_height.csv contains ages (years) and heights (inches) for 7 children. Write Python code to evaluate the loss function  and use `minimize` to identify the coefficients of the line of least squares fit for predicting height ($y$) from ($age$).  Include a scatter plot of the data that includes a plot of the line. Your solution will be similar to the logistic regression example but take care to adjust the objective function to minimize the sum of squares written above.\n\n<font color = \"blue\"> *** 8 points -  answer in cell below *** (don't delete this cell) </font>","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"8a2648","input":"Consider the following quadratic programming problem:\n\nMaximize $f(x_1, x_2) = 8x_1 - x_1^2 + 4x_2 - x_2^2,$\n\nsubject to $x_1 + x_2 \\leq 2, x_1 \\geq 0, x_2 \\geq 0.$\n\nUse Pyomo with the `ipopt` solver to find the solution.  Include nicely formatted output.\n\n<font color = \"blue\"> *** 4 points -  code in cell below *** (don't delete this cell) </font>","metadata":{"hidden":true},"pos":3,"type":"cell"}
{"cell_type":"markdown","id":"a0c989","input":"The variables will be a vector of booleans of length `num_items`.  We could initialize a vector like this and then set the vector to include the 1st, 3rd, and 5th items:","pos":23,"type":"cell"}
{"cell_type":"markdown","id":"a3a909","input":"The management of the Albert Hanson Company is trying to determine the best product mix for two new products. Because these products would share the same production facilities, the total number of units produced of the two products combined cannot exceed two per hour. Because of uncertainty about how well these products will sell, the profit from producing each product provides decreasing marginal returns as the production rate is increased. In particular, with a production rate of $R_1$ units per hour, it is estimated that Product 1 would provide a profit (in dollars per hour) of $200 R_1 - 100 R_1^2.$ If the production rate of product 2 is $R_2$ units per hour, its estimated profit (in dollars per hour) would be $300 R_2 - 100 R_2^2.$  \n\n**HW4.2a** - Formulate a quadratic programming model in algebraic form for determining the product mix that maximizes the total profit per hour.  We are allowing fractional solutions here so this is not an integer programming problem (more about those soon).  Include LaTeX or neat handwritten solution.\n\n<font color = \"blue\"> *** 4 points -  answer in cell below *** (don't delete this cell) </font>","metadata":{"hidden":true},"pos":6,"type":"cell"}
{"cell_type":"markdown","id":"a4be62","input":"For the nonconvex profit function $$p(x) = 100x^6 - 1359x^5 + 6836 x^4 - 15670 x^3 + 15870 x^2 - 5095 x$$\nwith $0 \\leq x \\leq 5.$ Graph the function on the interval and find all of the local maxima and minima.\n\n**HW4.3a** - Graph the function in the range $0 \\leq x \\leq 5$:\n\n<font color = \"blue\"> *** 2 points -  code in cell below *** (don't delete this cell) </font>","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"b065e8","input":"Accept the state if the total weight is is $\\leq 50$ and maximize the value by moving uphill\n\n**HW4.5a** - Write a local search algorithm that moves uphill  until no improvements have been made in the last 1000 iterations.  Write the algorithm as a function with the values and weights as inputs and returns the best collection of items to include as well as the value and weight of that collection.\n\n<font color = \"blue\"> *** 5 points -  answer in cell below *** (don't delete this cell) </font>","pos":31,"type":"cell"}
{"cell_type":"markdown","id":"c0f260","input":"The total weight of the items included in the collection:","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"ec676f","input":"# **HW4.2** - Textbook 13.7-7","metadata":{"heading_collapsed":true},"pos":5,"type":"cell"}
{"cell_type":"markdown","id":"eecd35","input":"**HW4.2b** - Use quadratic programming in Pyomo with the ipopt solver to solve this model.\n\n<font color = \"blue\"> *** 4 points -  code in cell below *** (don't delete this cell) </font>","metadata":{"hidden":true},"pos":8,"type":"cell"}
{"cell_type":"markdown","id":"eff369","input":"**HW4.5b** - Now write a loop to do this 100 local searches (each with random moves starting from a collection with no items in it.  Clearly identify the best overall solution.  Next week we'll see some alternative search tecniques that will generally enable us to find better solutions.\n\n<font color = \"blue\"> *** 5 points -  answer in cell below *** (don't delete this cell) </font>","pos":33,"type":"cell"}
{"cell_type":"markdown","id":"f5463d","input":"The knapsack problem is a classical combinatorial optimization problem that will be good for practicing with the ideas of discrete local search and multistart.  Given a set of items, each with a weight and a value, determine which items to include in a collection so that the total weight is less than or equal to a given limit and the total value is as large as possible.  In the 0-1 version of the knapsack problem, the decision variables are binary (or boolean) and represent whether or not to include each item in the collection.  We'll start with 20 items and you need to determine the collection of items that maximizes the value and keeps the total weight up to 50 (that is $\\leq 50$).","pos":21,"type":"cell"}
{"id":0,"time":1611077618236,"type":"user"}
{"last_load":1611077618609,"type":"file"}