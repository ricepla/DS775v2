{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":84578304},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.9"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{"height":"calc(100% - 180px)","left":"10px","top":"150px","width":"294.56px"},"toc_section_display":true,"toc_window_display":false},"varInspector":{"cols":{"lenName":16,"lenType":16,"lenVar":40},"kernels_config":{"python":{"delete_cmd_postfix":"","delete_cmd_prefix":"del ","library":"var_list.py","varRefreshCmd":"print(var_dic_list())"},"r":{"delete_cmd_postfix":") ","delete_cmd_prefix":"rm(","library":"var_list.r","varRefreshCmd":"cat(var_dic_list()) "}},"types_to_exclude":["module","function","builtin_function_or_method","instance","_Feature"],"window_display":false}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":1,"id":"c19985","input":"# execute to import notebook styling for tables and width etc.\nfrom IPython.core.display import HTML\nimport urllib.request\nresponse = urllib.request.urlopen('https://raw.githubusercontent.com/DataScienceUWL/DS775v2/master/ds755.css')\nHTML(response.read().decode(\"utf-8\"));","metadata":{"code_folding":[0]},"pos":0,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"f6b33b","input":"# this may take a minute\ndim = 10\nnum_local_searches = 1000\nmin_values = multistart_rastrigin(dim,num_local_searches)\nprint(f\"The smallest minimum value found is {np.min(min_values):3.2f}\")","metadata":{"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"The smallest minimum value found is 17.91\n"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"886628","input":"def repeat_until_found(dim):\n    best_value = 1.e10\n    iterations = 0\n    while best_value > 0.01:\n        iterations += 1\n        x_initial = np.random.uniform(-5.12, 5.12, dim)\n        result = minimize(rastrigin, x_initial)\n        if result.fun < best_value:\n            best_value = result.fun\n    return(iterations)\n\nrepeat_until_found(1)","metadata":{"hidden":true},"output":{"0":{"data":{"text/plain":"4"},"exec_count":11,"output_type":"execute_result"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"2b0097","input":"num_trials = 100\ndims = np.array([1,2,3])\niterations = np.zeros((num_trials,len(dims)))\nfor i in range(num_trials):\n    for j in range(len(dims)):\n        iterations[i,j] = repeat_until_found(dims[j])","metadata":{"hidden":true},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"a694ea","input":"average_iterations = np.mean(iterations, axis=0)\nfor j in range(len(dims)):\n    print(\n        'In dimension {:d} it takes {:3.1f} local searches, on average, to find the global min.'\n        .format(dims[j], average_iterations[j]))","metadata":{"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"In dimension 1 it takes 8.7 local searches, on average, to find the global min.\nIn dimension 2 it takes 99.2 local searches, on average, to find the global min.\nIn dimension 3 it takes 981.0 local searches, on average, to find the global min.\n"}},"pos":27,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"9ac7be","input":"print(f\"{10.28**10:,.2f}\")","metadata":{"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"13,180,477,576.06\n"}},"pos":32,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"032650","input":"# number of weeks to do local searches at 10,000 per second\n(10.28**10)/10000/3600/24/7","metadata":{"hidden":true},"output":{"0":{"data":{"text/plain":"2.179311768528369"},"exec_count":15,"output_type":"execute_result"}},"pos":34,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"d9b898","input":"best_fitness = -1000\nfor i in range(100):\n    fitness,districts = gerrymandering_search(cities,10,1000)\n    if fitness > best_fitness:\n        best_fitness = fitness\n        best_districts = districts\nsummarize_districts(best_districts,cities)","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>reps</th>\n      <th>dems</th>\n      <th>total</th>\n      <th>rep_win</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>155</td>\n      <td>131</td>\n      <td>286</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>157</td>\n      <td>128</td>\n      <td>285</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>151</td>\n      <td>140</td>\n      <td>291</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>98</td>\n      <td>72</td>\n      <td>170</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>152</td>\n      <td>123</td>\n      <td>275</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>124</td>\n      <td>100</td>\n      <td>224</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>83</td>\n      <td>72</td>\n      <td>155</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>146</td>\n      <td>143</td>\n      <td>289</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>144</td>\n      <td>184</td>\n      <td>328</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>111</td>\n      <td>226</td>\n      <td>337</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   reps  dems  total  rep_win\n0   155   131    286     True\n1   157   128    285     True\n2   151   140    291     True\n3    98    72    170     True\n4   152   123    275     True\n5   124   100    224     True\n6    83    72    155     True\n7   146   143    289     True\n8   144   184    328    False\n9   111   226    337    False"},"exec_count":18,"output_type":"execute_result"}},"pos":38,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"0b1cbe","input":"# imports\nimport numpy as np\nfrom scipy import interpolate\nfrom scipy.optimize import minimize_scalar, minimize\nimport matplotlib.pyplot as plt\nimport json\nimport time\nimport seaborn as sns\nsns.set_style(\"darkgrid\")","metadata":{"code_folding":[0]},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"46b540","input":"# imports\nimport pandas as pd\nimport numpy as np\n\n# load the data + random assignment\nnum_districts = 10\nmin_voters_in_district = 150\nmax_voters_in_district = 350\n\ndems = [\n    152, 81, 75, 34, 62, 38, 48, 74, 98, 66, 83, 86, 72, 28, 112, 45, 93, 72\n]\nreps = [62, 59, 83, 52, 87, 87, 69, 49, 62, 72, 75, 82, 83, 53, 98, 82, 68, 98]\ncities = pd.DataFrame(data={'dems': dems, 'reps': reps})\n\n\ndef summarize_districts(assign, cities):\n    reps = np.zeros(num_districts, dtype=np.int32)\n    dems = np.zeros(num_districts, dtype=np.int32)\n    df = cities.groupby(assign).sum()\n    reps[df.index] = df['reps']\n    dems[df.index] = df['dems']\n    total = reps + dems\n    delta = np.minimum(np.maximum(total, min_voters_in_district),\n                       max_voters_in_district) - total\n    rep_win = reps > dems\n    dict = {'reps': reps, 'dems': dems, 'total': total, 'rep_win': rep_win}\n    return (pd.DataFrame(data=dict))\n\n\ndef fitness_districts(assign, cities, num_districts):\n    df = cities.groupby(assign).sum()\n    fitness = sum(df['reps'] > df['dems'])\n    total_voters = np.zeros(num_districts, dtype=np.int32)\n    total_voters[df.index] = df.sum(axis=1)\n    fitness -= np.abs(\n        np.minimum(np.maximum(total_voters, 150), 350) - total_voters).sum()\n    return (fitness)\n\ndef move_one_city(assign, num_districts):\n    num_cities = assign.shape[0] # or len(assign)\n    new_assign = assign.copy()\n    switch_city = np.random.randint(num_cities) # which city to assign new random district\n    while new_assign[switch_city] == assign[switch_city]: # loops until new and old are different\n        new_assign[ switch_city] = np.random.randint(num_districts)\n    return new_assign\n\ndef gerrymandering_search(cities, num_districts, max_no_improve):\n    # random hill climbing\n    max_moves_no_improve = 1000\n\n    num_cities = cities.shape[0]\n    current_districts = np.random.randint(low=0,\n                                          high=num_districts,\n                                          size=num_cities)\n    current_fitness = fitness_districts(current_districts, cities, num_districts)\n\n    num_moves_no_improve = 0\n    while (num_moves_no_improve < max_moves_no_improve):\n        num_moves_no_improve += 1\n        new_districts = move_one_city(current_districts, num_districts)\n        new_fitness = fitness_districts(new_districts, cities, num_districts)\n        if new_fitness > current_fitness:\n            current_fitness = new_fitness\n            current_districts = new_districts\n            num_moves_no_improve = 0\n    return current_fitness, current_districts\n\n\nfitness, districts = gerrymandering_search(cities, 10, 1000)\n\nprint('Best Fitness Value: {}'.format(fitness))\nsummarize_districts(districts, cities)","metadata":{"code_folding":[]},"output":{"0":{"ename":"AttributeError","evalue":"module 'numpy' has no attribute 'randomint'","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-b4268a995006>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     68\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 70\u001b[0;31m \u001b[0mfitness\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdistricts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgerrymandering_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcities\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1000\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     71\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     72\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Best Fitness Value: {}'\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfitness\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-2-b4268a995006>\u001b[0m in \u001b[0;36mgerrymandering_search\u001b[0;34m(cities, num_districts, max_no_improve)\u001b[0m\n\u001b[1;32m     59\u001b[0m     \u001b[0;32mwhile\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mnum_moves_no_improve\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0mmax_moves_no_improve\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     60\u001b[0m         \u001b[0mnum_moves_no_improve\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 61\u001b[0;31m         \u001b[0mnew_districts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmove_one_city\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcurrent_districts\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_districts\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     62\u001b[0m         \u001b[0mnew_fitness\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfitness_districts\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_districts\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcities\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_districts\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mnew_fitness\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0mcurrent_fitness\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-2-b4268a995006>\u001b[0m in \u001b[0;36mmove_one_city\u001b[0;34m(assign, num_districts)\u001b[0m\n\u001b[1;32m     41\u001b[0m     \u001b[0mnum_cities\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0massign\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;31m# or len(assign)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     42\u001b[0m     \u001b[0mnew_assign\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0massign\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 43\u001b[0;31m     \u001b[0mswitch_city\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandomint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum_cities\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# which city to assign new random district\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     44\u001b[0m     \u001b[0;32mwhile\u001b[0m \u001b[0mnew_assign\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mswitch_city\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0massign\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mswitch_city\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;31m# loops until new and old are different\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     45\u001b[0m         \u001b[0mnew_assign\u001b[0m\u001b[0;34m[\u001b[0m \u001b[0mswitch_city\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum_districts\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: module 'numpy' has no attribute 'randomint'"]}},"pos":37,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"240455","input":"from scipy.optimize import minimize\nP = lambda x: -0.008 * x**2 + 3.1 * x - 80  # lambda is for writing one line functions\nneg_P = lambda x: -P(x)\nresult = minimize(neg_P, x0=150, bounds=[(0, 250)])\nprint(f\"The maximum profit is ${-result.fun[0]:,.2f} and occurs when {result.x[0]:3.2f} apartments are rented.\")","metadata":{"code_folding":[],"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"The maximum profit is $220.31 and occurs when 193.75 apartments are rented.\n"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"0eb862","input":"P(193),P(194)","metadata":{"hidden":true},"output":{"0":{"data":{"text/plain":"(220.30800000000005, 220.31199999999995)"},"exec_count":4,"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"934f54","input":"# first graph the function\nimport numpy as np\nimport matplotlib.pyplot as plt\nx = np.linspace(-4,3.6,201)\nf = lambda x:x**5-x**4-18*x**3+16*x**2+32*x-2\nfig = plt.figure(figsize=(6,5));\nplt.plot(x,f(x));\nplt.xlabel('x');\nplt.ylabel('y');","metadata":{"code_folding":[0],"hidden":true},"output":{"0":{"data":{"image/png":"d031d69de703e245c0d280ee18f18b3fc43ae7a6","text/plain":"<Figure size 432x360 with 1 Axes>"},"exec_count":5,"metadata":{"image/png":{"height":316,"width":392}},"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"4ebd37","input":"from scipy.optimize import minimize\n\n# find minima first\nx0_min = [-.5,3.5]\nfor x0 in x0_min:\n    result = minimize( f, x0, bounds = [(-4,3.6)])\n    print(f\"There is a local minimum value of {result.fun[0]:.2f} at x = {result.x[0]:.2f}\")\n    \n# now maxima\nneg_f = lambda x:-f(x)\nx0_max = [-3,1]\nfor x0 in x0_max:\n    result = minimize( neg_f, x0, bounds = [(-4,3.6)])\n    print(f\"There is a local maximum value of {-result.fun[0]:3.2f} at x = {result.x[0]:1.2f}\")","metadata":{"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"There is a local minimum value of -11.91 at x = -0.54\nThere is a local minimum value of -96.27 at x = 3.30\nThere is a local maximum value of 210.19 at x = -3.11\nThere is a local maximum value of 28.85 at x = 1.15\n"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"4ee14a","input":"def rastrigin(x):\n    # pass a single vector of length n (=dim) to evaluate Rastrigin\n    return sum(x**2 + 10 - 10 * np.cos(2 * np.pi * x))","pos":14,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"279209","input":"from scipy.optimize import minimize\nimport numpy as np\n\ndef multistart_rastrigin(dim,num_local_searches):\n    minima = np.zeros(num_local_searches)\n    for i in range(num_local_searches):\n        x_initial = np.random.uniform(-5.12, 5.12, dim)\n        result = minimize(rastrigin, x_initial)\n        minima[i] = result.fun\n    return minima\n\ndim = 3\nnum_local_searches = 2000\nmin_values = multistart_rastrigin(dim,num_local_searches)\nsuccesses = sum( min_values < .01)\nprint(f\"The global minimum was found {successes:d} times.\")","output":{"0":{"name":"stdout","output_type":"stream","text":"The global minimum was found 2 times.\n"}},"pos":16,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"f1f801","input":"# this could take a few minutes!\n# if you don't want to run it, I did and found the global min 6 times\ndim = 4\nnum_local_searches = 20000\nmin_values = multistart_rastrigin(dim,num_local_searches)\nsuccesses = sum( min_values < .01)\nprint(f\"The global minimum was found {successes:d} times.\")","output":{"0":{"name":"stdout","output_type":"stream","text":"The global minimum was found 2 times.\n"}},"pos":17,"type":"cell"}
{"cell_type":"markdown","id":"12429c","input":"# *Self Assessment: Gerrymandering Local Search*","pos":36,"type":"cell"}
{"cell_type":"markdown","id":"1c08fc","input":"Approximately now many local searches are required to find the global minimum one time when dim = 10?  Is it surprising that you (very likely) didn't find it with 1000 local searches?  Explain","metadata":{"hidden":true},"pos":30,"type":"cell"}
{"cell_type":"markdown","id":"22278e","input":"# *Self Assessment: How many searches when dim = 10?*","metadata":{"heading_collapsed":true},"pos":29,"type":"cell"}
{"cell_type":"markdown","id":"237cf9","input":"There appear to be local maxima around $x=-3$ and $x=1$ while there appear to be local minima around $x=-0.5$ and $x = 3.5$.","metadata":{"hidden":true},"pos":9,"type":"cell"}
{"cell_type":"markdown","id":"42995f","input":"That's about 13 billion local searches.  Even if we did 10,000 local searches per second, it would still take about two weeks to do enough to find the global minimum once:","metadata":{"hidden":true},"pos":33,"type":"cell"}
{"cell_type":"markdown","id":"4a93f2","input":"# *Self-Assessment: Rastrigin with dim = 3, dim = 4*","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"4d480f","input":"We'll start by writing a function that repeats the local search process until the global minimum is found and returns the total number of local searches.","metadata":{"hidden":true},"pos":23,"type":"cell"}
{"cell_type":"markdown","id":"516af3","input":"The more local searches we perform, the better the probability of locating the global minimum at the origin.  Experiment with the number of local searches to see how the reliability increases.  It turns out that with dim = 3 it takes about 2000 local searches to have a 90% chance at finding the global minimum.  For dim = 4 it takes about 20000 local searches.\n\nIt's possible to arrive at these numbers mathematically, but we just want you to get an idea that the number of local searches required increases dramatically as the dimension increases.","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"5b303f","input":"Now we do this 100 times for each of dim = 1,2,3 and gather the results.  This code may take several minutes to run.","metadata":{"hidden":true},"pos":25,"type":"cell"}
{"cell_type":"markdown","id":"750cfd","input":"# *Self-Assessment:  Rastrigin with dim = 10*","metadata":{"heading_collapsed":true},"pos":18,"type":"cell"}
{"cell_type":"markdown","id":"775e3d","input":"# *Self Assessment:  Finding Multiple Extrema*","metadata":{"heading_collapsed":true},"pos":7,"type":"cell"}
{"cell_type":"markdown","id":"7f0082","input":"Fortunately there are better approaches that can often deliver results in much less time!","metadata":{"hidden":true},"pos":35,"type":"cell"}
{"cell_type":"markdown","id":"7fb617","input":"With 1000 local searches the minimum value seems to be anywhere from 12 to 26.  Increasing the number of searches helps, but it's not clear how many iterations to use, but it's likely a lot!","metadata":{"hidden":true},"pos":21,"type":"cell"}
{"cell_type":"markdown","id":"807ec8","input":"193.75 is the relaxed solution, but we can't rent 193.75 apartments.  Let's check 193 and 194 to see which yields a larger profit.","metadata":{"hidden":true},"pos":4,"type":"cell"}
{"cell_type":"markdown","id":"98a00e","input":"Do 1000 local search with Rastrigin with dim = 10.  What is the smallest value you find?  How long do you think it would take to find the minimum from randomly chosen initial points like this?  ","metadata":{"hidden":true},"pos":19,"type":"cell"}
{"cell_type":"markdown","id":"aa1093","input":"How many iterations does it take to reliably find the global minimum with dim = 3?  With dim = 4?  Use the multi-start strategy.","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"b07d97","input":"The number of searches increases roughly by an order of magnitude (power of 10) for each added dimension.","metadata":{"hidden":true},"pos":28,"type":"cell"}
{"cell_type":"markdown","id":"b81943","input":"# *Self-Assessment:  How many searches?*","metadata":{"heading_collapsed":true},"pos":22,"type":"cell"}
{"cell_type":"markdown","id":"be023c","input":"The number of searches would be approximately $(10.28)^{10}$ or","metadata":{"hidden":true},"pos":31,"type":"cell"}
{"cell_type":"markdown","id":"ceaa8b","input":"# *Self Assessment:  Minimize to Maximize*","metadata":{"code_folding":[],"heading_collapsed":true},"pos":2,"type":"cell"}
{"cell_type":"markdown","id":"f51f50","input":"**Note - there is a strange quirk here in the scipy.optimize.minimize.**  When we optimize without bounds `result.fun` is a number, but when we optimize with bounds `result.fun` is a list with one number so we have to refer to `result.fun[0]` to get the number.","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"f9ca36","input":"Bottom line:  rent 194 apartments for profit $220,312.","metadata":{"hidden":true},"pos":6,"type":"cell"}
{"id":0,"time":1595885144201,"type":"user"}
{"last_load":1595907779090,"type":"file"}