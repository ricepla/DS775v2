{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":218939392},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.9"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{"height":"calc(100% - 180px)","left":"10px","top":"150px","width":"250.696px"},"toc_section_display":true,"toc_window_display":true},"varInspector":{"cols":{"lenName":16,"lenType":16,"lenVar":40},"kernels_config":{"python":{"delete_cmd_postfix":"","delete_cmd_prefix":"del ","library":"var_list.py","varRefreshCmd":"print(var_dic_list())"},"r":{"delete_cmd_postfix":") ","delete_cmd_prefix":"rm(","library":"var_list.r","varRefreshCmd":"cat(var_dic_list()) "}},"types_to_exclude":["module","function","builtin_function_or_method","instance","_Feature"],"window_display":false}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1596308417602,"exec_count":1,"id":"5c76c8","input":"# execute to import notebook styling for tables and width etc.\nfrom IPython.core.display import HTML\nimport urllib.request\nresponse = urllib.request.urlopen('https://raw.githubusercontent.com/DataScienceUWL/DS775v2/master/ds755.css')\nHTML(response.read().decode(\"utf-8\"));\n\nimport warnings\nwarnings.filterwarnings('ignore')","kernel":"python3","metadata":{"code_folding":[0]},"pos":0,"start":1596308417388,"state":"done","type":"cell"}
{"cell_type":"code","end":1596308421397,"exec_count":2,"id":"4123df","input":"# load problem data into Python \nimport pandas as pd\nimport json\n\nwith open(\"data/HillierTSP.json\", \"r\") as tsp_data:\n    tsp = json.load(tsp_data)\n\ndistance_matrix = tsp[\"DistanceMatrix\"]\nind_size = tsp[\"TourSize\"] # number fo variables or dimension of the problem\n\n# put distance matrix into pandas dataframe for easy passing to R\ndist_mat_pd = pd.DataFrame(distance_matrix)\ndist_mat_pd","kernel":"python3","metadata":{"hidden":true},"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>12</td>\n      <td>10</td>\n      <td>100</td>\n      <td>100</td>\n      <td>100</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>12</td>\n      <td>0</td>\n      <td>8</td>\n      <td>12</td>\n      <td>100</td>\n      <td>100</td>\n      <td>100</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>10</td>\n      <td>8</td>\n      <td>0</td>\n      <td>11</td>\n      <td>3</td>\n      <td>100</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>100</td>\n      <td>12</td>\n      <td>11</td>\n      <td>0</td>\n      <td>11</td>\n      <td>10</td>\n      <td>100</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>100</td>\n      <td>100</td>\n      <td>3</td>\n      <td>11</td>\n      <td>0</td>\n      <td>6</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>100</td>\n      <td>100</td>\n      <td>100</td>\n      <td>10</td>\n      <td>6</td>\n      <td>0</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>12</td>\n      <td>100</td>\n      <td>9</td>\n      <td>100</td>\n      <td>7</td>\n      <td>9</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"     0    1    2    3    4    5    6\n0    0   12   10  100  100  100   12\n1   12    0    8   12  100  100  100\n2   10    8    0   11    3  100    9\n3  100   12   11    0   11   10  100\n4  100  100    3   11    0    6    7\n5  100  100  100   10    6    0    9\n6   12  100    9  100    7    9    0"},"exec_count":2}},"pos":73,"start":1596308420868,"state":"done","type":"cell"}
{"cell_type":"code","end":1596308425537,"exec_count":3,"id":"8c740e","input":"# load rpy2 to interface R to Python\nimport rpy2.rinterface\n%load_ext rpy2.ipython","kernel":"python3","pos":74,"start":1596308424685,"state":"done","type":"cell"}
{"cell_type":"code","end":1596308700179,"exec_count":13,"id":"f284f3","input":"%%R -i dist_mat_pd -o best_tour -o best_dist\n# define R cell and import dist_mat_pd as R dataframe\n\n# given a tour, calculate the total cost\ntourCost <- function(tour, costMatrix) {\n  tour <- c(tour, tour[1])\n  route <- embed(tour, 2)[, 2:1]\n  sum(costMatrix[route])\n}\n# inverse of the total distance is the fitness\ntspFitness <- function(tour, ...) 1/tourCost(tour, ...)\n\nrequire(GA)\nnumcities = 7\ncostMatrix = dist_mat_pd\nresult <- ga(type = \"permutation\", fitness = tspFitness, costMatrix=costMatrix, lower = 1, \n             upper = numcities, popSize = 10, maxiter = 500, run = 100, pmutation = 0.2            \n             , monitor = NULL)\n\nbest_dist <- as.vector(1/result@fitnessValue[1])\nbest_tour <- c(result@solution[1,]);","kernel":"python3","pos":76,"start":1596308700001,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"f025dc","input":"# Genetic Algorithm via R\n\nR has an easy-to-use genetic algorithm package called `GA`.  You can find <a href=\"https://cran.r-project.org/web/packages/GA/GA.pdf\" target=\"_blank\">documentation about it here.</a>. \n\nThis notebook also serves as an example of how to integrate R into a Python Jupyter notebook using the `rpy2` package.  For integrating R and Python in a Jupyter notebook we found <a href=\"https://www.linkedin.com/pulse/interfacing-r-from-python-3-jupyter-notebook-jared-stufft/\">this brief tutorial</a> quite helpful.","pos":72,"type":"cell"}
{"end":1596308702911,"exec_count":14,"id":"f104f2","input":"# back in Python again!\nprint(\"The best tour found was:\")\nprint(best_tour)\nprint(f\"The total distance for this tour is {best_dist[0]}\")","kernel":"python3","output":{"0":{"name":"stdout","text":"The best tour found was:\n[5. 3. 1. 2. 4. 6. 7.]\nThe total distance for this tour is 63.0\n"}},"pos":77,"start":1596308702904,"state":"done","type":"cell"}
{"id":"51b7a2","input":"","pos":78,"type":"cell"}
{"id":0,"time":1596307035617,"type":"user"}
{"last_load":1596307036978,"type":"file"}