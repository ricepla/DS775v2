{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":83685376},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.2"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{"height":"calc(100% - 180px)","left":"10px","top":"150px","width":"226.792px"},"toc_section_display":true,"toc_window_display":false},"varInspector":{"cols":{"lenName":16,"lenType":16,"lenVar":40},"kernels_config":{"python":{"delete_cmd_postfix":"","delete_cmd_prefix":"del ","library":"var_list.py","varRefreshCmd":"print(var_dic_list())"},"r":{"delete_cmd_postfix":") ","delete_cmd_prefix":"rm(","library":"var_list.r","varRefreshCmd":"cat(var_dic_list()) "}},"types_to_exclude":["module","function","builtin_function_or_method","instance","_Feature"],"window_display":false}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":1,"id":"466431","input":"# Code for textbook problem 4.7-6(c)\n\nfrom pyomo.environ import *\n\n# Concret Model\nmodel = ConcreteModel(name = \"Generic\")\n\n# Decision Variables \nmodel.x = Var( ['x1','x2','x3','x4'], \n              domain = NonNegativeReals)\n\n# Objective \nmodel.obj = Objective( expr = 5*model.x['x1'] + 4*model.x['x2'] - model.x['x3'] +\n                      3*model.x['x4'], sense = maximize)\n\n# Constraints\nmodel.Constraint1 = Constraint( expr = 3*model.x['x1'] + 2*model.x['x2'] - \n                               3*model.x['x3'] + model.x['x4'] <= 24 )\nmodel.Constraint2 = Constraint( expr = 3*model.x['x1'] + 3*model.x['x2'] + \n                               model.x['x3'] + 3*model.x['x4'] <= 36 )\n                      \n# Solve\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n# remove the comment symbol to see the pyomo display of results\n# display(model)\n\n# print a shorter summary of relevant results\nprint(f\" Z = {model.obj()}\")\nprint(f\"x1 = {model.x['x1']()}\")\nprint(f\"x2 = {model.x['x2']()}\")\nprint(f\"x3 = {model.x['x3']()}\")\nprint(f\"x4 = {model.x['x4']()}\")","metadata":{"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":" Z = 52.0\nx1 = 11.0\nx2 = 0.0\nx3 = 3.0\nx4 = 0.0\n"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"bb50bd","input":"# Code for textbook problem 7.3-5 (f)\n\nfrom pyomo.environ import *\n\n# Concret Model\nmodel = ConcreteModel(name = \"TannerCo\")\n\n# Decision Variables \nmodel.x = Var( ['x1_toys','x2_subs'], \n              domain = NonNegativeReals)\n\n# Objective \nmodel.obj = Objective( expr = 3*model.x['x1_toys'] - 2.5*model.x['x2_subs'], sense = maximize)\n\n# Constraints\nmodel.Constraint1 = Constraint( expr = 2*model.x['x1_toys'] - model.x['x2_subs'] <= 3000 )\nmodel.Constraint2 = Constraint( expr = model.x['x1_toys'] - model.x['x2_subs'] <= 1000 )\nmodel.Constraint3 = Constraint( expr = model.x['x1_toys'] <= 2500 )\n\n                      \n# Solve\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n# write the model to a sensitivity report\nmodel.write('model.lp', io_options={'symbolic_solver_labels': True})\n!glpsol -m model.lp --lp --ranges sensit.sen\n\n# widen browser and/or close TOC to see sensitivity report\nimport numpy as np\nnp.set_printoptions(linewidth=110)\nf = open('sensit.sen', 'r')\nfile_contents = f.read()\nprint(file_contents)\nf.close()","metadata":{"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"GLPSOL: GLPK LP/MIP Solver, v4.65\nParameter(s) specified in the command line:\n -m model.lp --lp --ranges sensit.sen\nReading problem data from 'model.lp'...\n4 rows, 3 columns, 6 non-zeros\n30 lines were read\nGLPK Simplex Optimizer, v4.65\n4 rows, 3 columns, 6 non-zeros\nPreprocessing...\n2 rows, 2 columns, 4 non-zeros\nScaling...\n A: min|aij| =  1.000e+00  max|aij| =  2.000e+00  ratio =  2.000e+00\nProblem data seem to be well scaled\nConstructing initial basis...\nSize of triangular part is 2\n*     0: obj =  -0.000000000e+00 inf =   0.000e+00 (1)\n*     2: obj =   3.500000000e+03 inf =   0.000e+00 (0)\nOPTIMAL LP SOLUTION FOUND\nTime used:   0.0 secs\nMemory used: 0.0 Mb (40412 bytes)\nWrite sensitivity analysis report to 'sensit.sen'...\nGLPK 4.65 - SENSITIVITY ANALYSIS REPORT                                                                         Page   1\n\nProblem:    \nObjective:  obj = 3500 (MAXimum)\n\n   No. Row name     St      Activity         Slack   Lower bound       Activity      Obj coef  Obj value at Limiting\n                                          Marginal   Upper bound          range         range   break point variable\n------ ------------ -- ------------- ------------- -------------  ------------- ------------- ------------- ------------\n     1 c_u_Constraint1_\n                    NU    3000.00000        .               -Inf     2000.00000       -.50000    3000.00000 x(x2_subs)\n                                            .50000    3000.00000     3500.00000          +Inf    3750.00000 c_u_Constraint3_\n\n     2 c_u_Constraint2_\n                    NU    1000.00000        .               -Inf      500.00000      -2.00000    2500.00000 c_u_Constraint3_\n                                           2.00000    1000.00000     1500.00000          +Inf    4500.00000 x(x2_subs)\n\n     3 c_u_Constraint3_\n                    BS    2000.00000     500.00000          -Inf     1000.00000       -.50000    2500.00000 c_u_Constraint1_\n                                            .         2500.00000           +Inf       2.00000    7500.00000 c_u_Constraint2_\n\n     4 c_e_ONE_VAR_CONSTANT\n                    NS       1.00000        .            1.00000         .               -Inf    3500.00000 ONE_VAR_CONSTANT\n                                            .            1.00000           +Inf          +Inf    3500.00000\n\nGLPK 4.65 - SENSITIVITY ANALYSIS REPORT                                                                         Page   2\n\nProblem:    \nObjective:  obj = 3500 (MAXimum)\n\n   No. Column name  St      Activity      Obj coef   Lower bound       Activity      Obj coef  Obj value at Limiting\n                                          Marginal   Upper bound          range         range   break point variable\n------ ------------ -- ------------- ------------- -------------  ------------- ------------- ------------- ------------\n     1 x(x1_toys)   BS    2000.00000       3.00000        .          1000.00000       2.50000    2500.00000 c_u_Constraint1_\n                                            .               +Inf     2500.00000       5.00000    7500.00000 c_u_Constraint2_\n\n     2 x(x2_subs)   BS    1000.00000      -2.50000        .         -1000.00000      -3.00000    3000.00000 c_u_Constraint1_\n                                            .               +Inf     2000.00000      -1.50000    4500.00000 c_u_Constraint2_\n\n     3 ONE_VAR_CONSTANT\n                    BS       1.00000        .             .             1.00000          -Inf          -Inf\n                                            .               +Inf        1.00000          +Inf          +Inf\n\nEnd of report\n\n"}},"pos":27,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"410c6a","input":"factories = ['factory1', 'factory2']\nsupply = dict(zip(factories, [400, 500]))\n\ncustomers = ['cust1', 'cust2', 'cust3']\ndemand = dict(zip(customers, [300, 200, 400]))\n\nusc = [[600, 800, 700], [400, 900, 600]]\nunit_ship_cost = {\n    factories[f]: {customers[c]: usc[f][c]\n                   for c in range(len(customers))}\n    for f in range(len(factories))\n}\n\n# throw an error if total supply and demand do not match\nassert (sum(supply.values()) == sum(demand.values()))\n\nfrom pyomo.environ import *\n\nmodel = ConcreteModel()\n\nmodel.transp = Var(factories, customers, domain=NonNegativeReals)\n\nmodel.total_cost = Objective(expr=sum(unit_ship_cost[f][c] * model.transp[f, c]\n                                      for f in factories for c in customers),\n                             sense=minimize)\n\nmodel.supply_ct = ConstraintList()\nfor f in factories:\n    model.supply_ct.add(\n        sum(model.transp[f, c] for c in customers) == supply[f])\n\nmodel.demand_ct = ConstraintList()\nfor c in customers:\n    model.demand_ct.add(\n        sum(model.transp[f, c] for f in factories) == demand[c])\n\n# solve and display\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n# display solution\nprint(f\"Minimum Total Cost = ${model.total_cost():,.2f}\")\n\n# put amounts in dataframe for nicer display\nimport pandas as pd\ndvars = pd.DataFrame([[model.transp[f, c]() for c in customers]\n                      for f in factories],\n                     index=factories,\n                     columns=customers)\nprint(\"Number to ship from each factory to each customer:\")\ndvars","output":{"0":{"name":"stdout","output_type":"stream","text":"Minimum Total Cost = $540,000.00\nNumber to ship from each factory to each customer:\n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cust1</th>\n      <th>cust2</th>\n      <th>cust3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>factory1</th>\n      <td>0.0</td>\n      <td>200.0</td>\n      <td>200.0</td>\n    </tr>\n    <tr>\n      <th>factory2</th>\n      <td>300.0</td>\n      <td>0.0</td>\n      <td>200.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"          cust1  cust2  cust3\nfactory1    0.0  200.0  200.0\nfactory2  300.0    0.0  200.0"},"exec_count":13,"output_type":"execute_result"}},"pos":34,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"752b2c","input":"# execute to import notebook styling for tables and width etc.\nfrom IPython.core.display import HTML\nimport urllib.request\nresponse = urllib.request.urlopen('https://raw.githubusercontent.com/DataScienceUWL/DS775v2/master/ds755.css')\nHTML(response.read().decode(\"utf-8\"));","metadata":{"code_folding":[0]},"pos":0,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"4b312d","input":"# Code for textbook problem 7.3-4 (a & f)\n\nfrom pyomo.environ import *\n\n# Concret Model\nmodel = ConcreteModel(name = \"TannerCo\")\n\n# Decision Variables \nmodel.x = Var( ['x1_toys','x2_subs'], \n              domain = NonNegativeReals)\n\n# Objective \nmodel.obj = Objective( expr = 3*model.x['x1_toys'] - 2.5*model.x['x2_subs'], sense = maximize)\n\n# Constraints\nmodel.Constraint1 = Constraint( expr = 2*model.x['x1_toys'] - model.x['x2_subs'] <= 3000 )\nmodel.Constraint2 = Constraint( expr = model.x['x1_toys'] - model.x['x2_subs'] <= 1000 )\n                      \n# Solve\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n# remove the comment symbol to see the pyomo display of results\n# display(model)\n\n# print a shorter summary of relevant results\nprint(f\"Total Profit = ${model.obj():,.2f}\")\nprint(f\"Daily Production rate of Toys: {model.x['x1_toys']():.0f}\")\nprint(f\"Daily Production rate of Subassemblies: {model.x['x2_subs']():.0f}\")","metadata":{"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"Total Profit = $3,500.00\nDaily Production rate of Toys: 2000\nDaily Production rate of Subassemblies: 1000\n"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"0bd5bf","input":"# Code for textbook problem 7.3-5 (a)\n\nfrom pyomo.environ import *\n\n# Concret Model\nmodel = ConcreteModel(name = \"TannerCo\")\n\n# Decision Variables \nmodel.x = Var( ['x1_toys','x2_subs'], \n              domain = NonNegativeReals)\n\n# Objective \nmodel.obj = Objective( expr = 3*model.x['x1_toys'] - 2.5*model.x['x2_subs'], sense = maximize)\n\n# Constraints\nmodel.Constraint1 = Constraint( expr = 2*model.x['x1_toys'] - model.x['x2_subs'] <= 3000 )\nmodel.Constraint2 = Constraint( expr = model.x['x1_toys'] - model.x['x2_subs'] <= 1000 )\nmodel.Constraint3 = Constraint( expr = model.x['x1_toys'] <= 2500 )\n\n                      \n# Solve\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n# remove the comment symbol to see the pyomo display of results\n# display(model)\n\n# print a shorter summary of relevant results\nprint(f\"Total Profit = ${model.obj():,.2f}\")\nprint(f\"Daily Production rate of Toys: {model.x['x1_toys']():.0f}\")\nprint(f\"Daily Production rate of Subassemblies: {model.x['x2_subs']():.0f}\")","metadata":{"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"Total Profit = $3,500.00\nDaily Production rate of Toys: 2000\nDaily Production rate of Subassemblies: 1000\n"}},"pos":23,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"fd62d8","input":"# write the model to a sensitivity report\nmodel.write('model.lp', io_options={'symbolic_solver_labels': True})\n!glpsol -m model.lp --lp --ranges sensit.sen","metadata":{"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"GLPSOL: GLPK LP/MIP Solver, v4.65\r\nParameter(s) specified in the command line:\r\n -m model.lp --lp --ranges sensit.sen\r\nReading problem data from 'model.lp'...\r\n3 rows, 5 columns, 9 non-zeros\r\n34 lines were read\r\nGLPK Simplex Optimizer, v4.65\r\n3 rows, 5 columns, 9 non-zeros\r\nPreprocessing...\r\n2 rows, 4 columns, 8 non-zeros\r\nScaling...\r\n A: min|aij| =  1.000e+00  max|aij| =  3.000e+00  ratio =  3.000e+00\r\nProblem data seem to be well scaled\r\nConstructing initial basis...\r\nSize of triangular part is 2\r\n*     0: obj =  -0.000000000e+00 inf =   0.000e+00 (3)\r\n*     2: obj =   5.200000000e+01 inf =   0.000e+00 (0)\r\nOPTIMAL LP SOLUTION FOUND\r\nTime used:   0.0 secs\r\nMemory used: 0.0 Mb (40412 bytes)\r\nWrite sensitivity analysis report to 'sensit.sen'...\r\n"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"467f09","input":"# widen browser and/or close TOC to see sensitivity report\nimport numpy as np\nnp.set_printoptions(linewidth=110)\nf = open('sensit.sen', 'r')\nfile_contents = f.read()\nprint(file_contents)\nf.close()","metadata":{"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"GLPK 4.65 - SENSITIVITY ANALYSIS REPORT                                                                         Page   1\n\nProblem:    \nObjective:  obj = 52 (MAXimum)\n\n   No. Row name     St      Activity         Slack   Lower bound       Activity      Obj coef  Obj value at Limiting\n                                          Marginal   Upper bound          range         range   break point variable\n------ ------------ -- ------------- ------------- -------------  ------------- ------------- ------------- ------------\n     1 c_u_Constraint1_\n                    NU      24.00000        .               -Inf     -108.00000       -.66667     -36.00000 x(x1)\n                                            .66667      24.00000       36.00000          +Inf      60.00000 x(x3)\n\n     2 c_u_Constraint2_\n                    NU      36.00000        .               -Inf       24.00000      -1.00000      40.00000 x(x3)\n                                           1.00000      36.00000           +Inf          +Inf          +Inf\n\n     3 c_e_ONE_VAR_CONSTANT\n                    NS       1.00000        .            1.00000         .               -Inf      52.00000 ONE_VAR_CONSTANT\n                                            .            1.00000           +Inf          +Inf      52.00000\n\nGLPK 4.65 - SENSITIVITY ANALYSIS REPORT                                                                         Page   2\n\nProblem:    \nObjective:  obj = 52 (MAXimum)\n\n   No. Column name  St      Activity      Obj coef   Lower bound       Activity      Obj coef  Obj value at Limiting\n                                          Marginal   Upper bound          range         range   break point variable\n------ ------------ -- ------------- ------------- -------------  ------------- ------------- ------------- ------------\n     1 x(x1)        BS      11.00000       5.00000        .              .            4.63636      48.00000 x(x2)\n                                            .               +Inf       11.00000          +Inf          +Inf\n\n     2 x(x2)        NL        .            4.00000        .                -Inf          -Inf          +Inf\n                                           -.33333          +Inf       12.00000       4.33333      48.00000 x(x1)\n\n     3 x(x3)        BS       3.00000      -1.00000        .            -3.60000      -2.33333      48.00000 x(x4)\n                                            .               +Inf       36.00000       1.66667      60.00000 c_u_Constraint1_\n\n     4 x(x4)        NL        .            3.00000        .                -Inf          -Inf          +Inf\n                                           -.66667          +Inf        6.00000       3.66667      48.00000 x(x3)\n\n     5 ONE_VAR_CONSTANT\n                    BS       1.00000        .             .             1.00000          -Inf          -Inf\n                                            .               +Inf        1.00000          +Inf          +Inf\n\nEnd of report\n\n"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"54d101","input":"# Code for textbook problem 7.3-5 (b)\n\nfrom pyomo.environ import *\n\n# Concret Model\nmodel = ConcreteModel(name = \"TannerCo\")\n\n# Decision Variables \nmodel.x = Var( ['x1_toys','x2_subs'], \n              domain = NonNegativeReals)\n\n# Objective \nmodel.obj = Objective( expr = 3*model.x['x1_toys'] - 2.5*model.x['x2_subs'], sense = maximize)\n\n# Constraints\nmodel.Constraint1 = Constraint( expr = 2*model.x['x1_toys'] - model.x['x2_subs'] <= 3001 )\nmodel.Constraint2 = Constraint( expr = model.x['x1_toys'] - model.x['x2_subs'] <= 1000 )\nmodel.Constraint3 = Constraint( expr = model.x['x1_toys'] <= 2500 )\n\n                      \n# Solve\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n# remove the comment symbol to see the pyomo display of results\n# display(model)\n\n# print a shorter summary of relevant results\nprint(f\"Total Profit = ${model.obj():,.2f}\")\nprint(f\"Daily Production rate of Toys: {model.x['x1_toys']():.0f}\")\nprint(f\"Daily Production rate of Subassemblies: {model.x['x2_subs']():.0f}\")","metadata":{"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"Total Profit = $3,500.50\nDaily Production rate of Toys: 2001\nDaily Production rate of Subassemblies: 1001\n"}},"pos":25,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"66f94f","input":"# Unfold for code\nfrom pyomo.environ import *\ninvests = ['Friend1', 'Friend2']\nconstraints = ['Fraction1','Fraction2','Money','Work_Hours']\nprofit_rate = {'Friend1': 9000, 'Friend2': 9000}\nconstraint_rhs = {'Fraction1':1,'Fraction2':1,'Money':12000,'Work_Hours':600}\nconstraint_coef = {\n    'Fraction1': {\n        'Friend1': 1,\n        'Friend2': 0\n    },\n    'Fraction2': {\n        'Friend1': 0,\n        'Friend2': 1\n    },\n    'Money': {\n        'Friend1': 10000,\n        'Friend2': 8000\n    },\n    'Work_Hours': {\n        'Friend1': 400,\n        'Friend2': 500\n    },\n}\n\n#Concrete Model\nmodel = ConcreteModel()\n\n#Decision Variables\nmodel.invest_frac = Var(invests, domain=NonNegativeReals)\n\n#Objective\nmodel.profit = Objective(expr=sum(profit_rate[i] * model.invest_frac[i]\n                               for i in invests),\n                      sense=maximize)\n\nmodel.constraints = ConstraintList()\nfor c in constraints:\n    model.constraints.add(\n        sum(constraint_coef[c][i] * model.invest_frac[i]\n            for i in invests) <= constraint_rhs[c])\n\n# Solve\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n# display solution\nprint(f\"Maximum Profit = ${model.profit():,.2f}\")\n\nfor i in invests:\n    print(f\"Batches of {i} = {model.invest_frac[i]():.2f}\")","metadata":{"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"Maximum Profit = $12,000.00\nBatches of Friend1 = 0.67\nBatches of Friend2 = 0.67\n"}},"pos":29,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"c9fd89","input":"# write the model to a sensitivity report\nmodel.write('model.lp', io_options={'symbolic_solver_labels': True})\n!glpsol -m model.lp --lp --ranges sensit.sen","metadata":{"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"GLPSOL: GLPK LP/MIP Solver, v4.65\r\nParameter(s) specified in the command line:\r\n -m model.lp --lp --ranges sensit.sen\r\nReading problem data from 'model.lp'...\r\n3 rows, 3 columns, 5 non-zeros\r\n26 lines were read\r\nGLPK Simplex Optimizer, v4.65\r\n3 rows, 3 columns, 5 non-zeros\r\nPreprocessing...\r\n2 rows, 2 columns, 4 non-zeros\r\nScaling...\r\n A: min|aij| =  1.000e+00  max|aij| =  2.000e+00  ratio =  2.000e+00\r\nProblem data seem to be well scaled\r\nConstructing initial basis...\r\nSize of triangular part is 2\r\n*     0: obj =  -0.000000000e+00 inf =   0.000e+00 (1)\r\n*     2: obj =   3.500000000e+03 inf =   0.000e+00 (0)\r\nOPTIMAL LP SOLUTION FOUND\r\nTime used:   0.0 secs\r\nMemory used: 0.0 Mb (40412 bytes)\r\nWrite sensitivity analysis report to 'sensit.sen'...\r\n"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"0111d6","input":"# widen browser and/or close TOC to see sensitivity report\nimport numpy as np\nnp.set_printoptions(linewidth=110)\nf = open('sensit.sen', 'r')\nfile_contents = f.read()\nprint(file_contents)\nf.close()","metadata":{"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"GLPK 4.65 - SENSITIVITY ANALYSIS REPORT                                                                         Page   1\n\nProblem:    \nObjective:  obj = 3500 (MAXimum)\n\n   No. Row name     St      Activity         Slack   Lower bound       Activity      Obj coef  Obj value at Limiting\n                                          Marginal   Upper bound          range         range   break point variable\n------ ------------ -- ------------- ------------- -------------  ------------- ------------- ------------- ------------\n     1 c_u_Constraint1_\n                    NU    3000.00000        .               -Inf     2000.00000       -.50000    3000.00000 x(x2_subs)\n                                            .50000    3000.00000           +Inf          +Inf          +Inf\n\n     2 c_u_Constraint2_\n                    NU    1000.00000        .               -Inf           -Inf      -2.00000          -Inf\n                                           2.00000    1000.00000     1500.00000          +Inf    4500.00000 x(x2_subs)\n\n     3 c_e_ONE_VAR_CONSTANT\n                    NS       1.00000        .            1.00000         .               -Inf    3500.00000 ONE_VAR_CONSTANT\n                                            .            1.00000           +Inf          +Inf    3500.00000\n\nGLPK 4.65 - SENSITIVITY ANALYSIS REPORT                                                                         Page   2\n\nProblem:    \nObjective:  obj = 3500 (MAXimum)\n\n   No. Column name  St      Activity      Obj coef   Lower bound       Activity      Obj coef  Obj value at Limiting\n                                          Marginal   Upper bound          range         range   break point variable\n------ ------------ -- ------------- ------------- -------------  ------------- ------------- ------------- ------------\n     1 x(x1_toys)   BS    2000.00000       3.00000        .          1000.00000       2.50000    2500.00000 c_u_Constraint1_\n                                            .               +Inf           +Inf       5.00000    7500.00000 c_u_Constraint2_\n\n     2 x(x2_subs)   BS    1000.00000      -2.50000        .         -1000.00000      -3.00000    3000.00000 c_u_Constraint1_\n                                            .               +Inf           +Inf      -1.50000    4500.00000 c_u_Constraint2_\n\n     3 ONE_VAR_CONSTANT\n                    BS       1.00000        .             .             1.00000          -Inf          -Inf\n                                            .               +Inf        1.00000          +Inf          +Inf\n\nEnd of report\n\n"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"2976ab","input":"# unfold to see Pyomo solution\nfrom pyomo.environ import *\n\n# Concrete Model\nmodel = ConcreteModel(name=\"HolidayFactory\")\n\n# Parameters and Index Sets\nnum_months = 11\nmax_duration = 11\n\nmonths = range(1, num_months + 1)\ndurations = range(1, max_duration + 1)\n\nrate = [sum(20 - i for i in range(month)) for month in range(1, 12)]\nrent = dict(zip(durations, rate))\nspace = dict(\n    zip(months,\n        [2000, 2000, 3000, 4000, 6000, 10000, 10000, 10000, 9000, 7000, 5000]))\n\n# Decision Variables\nmodel.x_sqft = Var(months, durations, domain=NonNegativeReals)\n\n# Objective\nmodel.obj = Objective(expr=sum(rent[d] * model.x_sqft[m, d] for m in months\n                               for d in durations))\n\n# Constraints\nmodel.space_ct = ConstraintList()\nfor month in months:\n    model.space_ct.add(\n        sum(model.x_sqft[m, d] for m in months for d in durations\n            if m <= month and m + d > month) >= space[month])\n\nmodel.time_rule_ct = ConstraintList()\nfor m in months:\n    for d in durations:\n        if m + d > num_months + 1:\n            model.time_rule_ct.add(model.x_sqft[m, d] == 0)\n\n# Solve\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n# print a short summary of relevant results\nprint(f\"Total Cost = ${model.obj():,.2f}\")\n\nprint(\"\\nHere are the amounts to lease by month and duration:\")\nfor m in months:\n    for d in durations:\n        if model.x_sqft[m, d]() > 0:\n            print(f\"Lease {model.x_sqft[m, d]():.0f} sq ft in month {m:d} for {d:d} months\")\n\nprint(\"\\nHere are the amounts needed and the total amount needed in each month:\")\nfor m in months:\n    amount_leased = sum(model.x_sqft[i, d]() for d in durations for i in months if i <= m and i + d > m)\n    print(f\"In month {m:d}, {space[m]:.0f} square feet are needed and {amount_leased:.0f} square feet are leased\")","metadata":{"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"Total Cost = $1,125,000.00\n\nHere are the amounts to lease by month and duration:\nLease 2000 sq ft in month 1 for 11 months\nLease 1000 sq ft in month 3 for 9 months\nLease 1000 sq ft in month 4 for 8 months\nLease 1000 sq ft in month 5 for 6 months\nLease 1000 sq ft in month 5 for 7 months\nLease 1000 sq ft in month 6 for 3 months\nLease 2000 sq ft in month 6 for 4 months\nLease 1000 sq ft in month 6 for 5 months\n\nHere are the amounts needed and the total amount needed in each month:\nIn month 1, 2000 square feet are needed and 2000 square feet are leased\nIn month 2, 2000 square feet are needed and 2000 square feet are leased\nIn month 3, 3000 square feet are needed and 3000 square feet are leased\nIn month 4, 4000 square feet are needed and 4000 square feet are leased\nIn month 5, 6000 square feet are needed and 6000 square feet are leased\nIn month 6, 10000 square feet are needed and 10000 square feet are leased\nIn month 7, 10000 square feet are needed and 10000 square feet are leased\nIn month 8, 10000 square feet are needed and 10000 square feet are leased\nIn month 9, 9000 square feet are needed and 9000 square feet are leased\nIn month 10, 7000 square feet are needed and 7000 square feet are leased\nIn month 11, 5000 square feet are needed and 5000 square feet are leased\n"}},"pos":31,"type":"cell"}
{"cell_type":"markdown","id":"05711e","input":"(b) Run the model with RHS of coefficient 1 at 3001 rather than 3000. The shadow price for subassembly A is \\$0.50, which is the maximum premium that the company should be willing to pay.  See the code in the next cell.","metadata":{"hidden":true},"pos":24,"type":"cell"}
{"cell_type":"markdown","id":"057d7f","input":"# *Self-Assessment: Formulate, Solve, and Perform Sensitivity #1*","metadata":{"heading_collapsed":true},"pos":16,"type":"cell"}
{"cell_type":"markdown","id":"42f80a","input":"(a) See the code and output for the cell below.  The maximum profit is \\$3500, obtained when 2000 toys and 1000 subassemlies are produced per day.\n\n(f) From the \"Obj coef range\" in the bottom table of the GLPK sensitivty report, the allowable range of the unit profit for toys is \\$2.50 to \\$5 whereas that for subassemblies is -\\$3 to -\\$1.50.","metadata":{"hidden":true},"pos":17,"type":"cell"}
{"cell_type":"markdown","id":"5fccff","input":"(a) This is pretty simple.  Add an extra constraint that $x_1 \\leq 2500$.  The maximum profit is still \\$3500, obtained when 2000 toys and 1000 subassemlies are produced per day.  See the code cell below.\n\nSee cells befow for parts b and f.","metadata":{"hidden":true},"pos":22,"type":"cell"}
{"cell_type":"markdown","id":"67ae46","input":"(c) See the code in the following cells and the associated output.\n\n(b) From the column labeled \"Marginal\" in the top table of the GLPK sensitivity report below, the shadow prices are 0.667 for resource 1 and 1 for resource 2.","metadata":{"hidden":true},"pos":11,"type":"cell"}
{"cell_type":"markdown","id":"6914bf","input":"# *Self Assessment: Investment Allocation*","metadata":{"heading_collapsed":true},"pos":28,"type":"cell"}
{"cell_type":"markdown","id":"6bdb62","input":"# *Self-Assessment: Formulate, Solve, and Perform Sensitivity #2*","metadata":{"heading_collapsed":true},"pos":21,"type":"cell"}
{"cell_type":"markdown","id":"72c210","input":"Let $F$ be the set of factories and let $C$ be the set of customers.\n\nDecision Variables:  let $x_{f,c}$ be the number of units shipped from factory $f \\in F$ to customer $c \\in C$\n\nConstants:  \n- $q_{f,c}$ is the shipping cost per unit between factory $f \\in F$ and customer $c \\in C$\n- $d_c$ is the number of units demanded by customer $c \\in C$\n- $s_f$ is the number of units supplied by factory $f \\in F$\n\nObjective Function:  minimize $ Cost = \\displaystyle \\sum_{f \\in F} \\sum_{c \\in C} q_{f,c} x_{f,c}$\n\nConstraints:\n- Supply: $ \\displaystyle \\sum_{c \\in C} x_{f,c} = s_f, \\mbox{ for each } f \\in F$\n- Demand: $ \\displaystyle \\sum_{f \\in F} x_{f,c} = d_c, \\mbox{ for each } c \\in C$\n- Nonnegativity: $x_{f,c} \\geq 0$ for each $f \\in F, c \\in C$","pos":33,"type":"cell"}
{"cell_type":"markdown","id":"79cd5c","input":"<font size=18>Lesson 02 - Self-Assessment Solutions</font>","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"83b939","input":"# *Self Assessment: Graphical Exploration of Sensitivity*","metadata":{"heading_collapsed":true},"pos":8,"type":"cell"}
{"cell_type":"markdown","id":"89b446","input":"Answer: False","metadata":{"hidden":true},"pos":7,"type":"cell"}
{"cell_type":"markdown","id":"936c18","input":"# *Self Assessment: Supply and Demand Problem*","pos":32,"type":"cell"}
{"cell_type":"markdown","id":"9bd417","input":"Answer: True","metadata":{"hidden":true},"pos":5,"type":"cell"}
{"cell_type":"markdown","id":"9c8b18","input":"# *Self Assessment: Positive Shadow Price*","metadata":{"heading_collapsed":true},"pos":2,"type":"cell"}
{"cell_type":"markdown","id":"9dd9fd","input":"# *Self Assessment: Changing Parameters*","metadata":{"heading_collapsed":true},"pos":6,"type":"cell"}
{"cell_type":"markdown","id":"9f40cf","input":"(f) As shown in the sensitivity report, the shadow price is \\$0.50 for subassembly A and \\$2 for subassembly B. According to the activity range, the allowable range for the right-hand side of the subassembly A constraint is 2,000 to 3,500. The allowable range for the right-hand side of the subassembly B constraint is 500 to 1,500.","metadata":{"hidden":true},"pos":26,"type":"cell"}
{"cell_type":"markdown","id":"a02037","input":"# *Self-Assessment: Solve and Perform Sensitivity*","metadata":{"heading_collapsed":true},"pos":10,"type":"cell"}
{"cell_type":"markdown","id":"a27994","input":"Answer: True","metadata":{"hidden":true},"pos":3,"type":"cell"}
{"cell_type":"markdown","id":"a635be","input":"# *Self Assessment: Allowable Range (Objective Coef)*","metadata":{"heading_collapsed":true},"pos":4,"type":"cell"}
{"cell_type":"markdown","id":"aa83de","input":"(a) Optimal $Z=22$ occurs when $x=6$ and $y=2$.\n\n<img src=\"images/HW_exploration_a.png\" width=\"640\"> \n\n(b) Shadow price $=23-22=1$. The new optimal is $Z=23$ with coordinates $x=4$ and $y=3$.\n\n<img src=\"images/HW_exploration_b.png\" width=\"640\"> \n\n(c) The allowable range for resource 2 is $10 \\leq b_2 \\leq 15$. \n\nThe lower bound is 10, as shown here.\n\n<img src=\"images/HW_exploration_c2.png\" width=\"640\"> \n\nThe upper bound is 15, as shown here.\n\n<img src=\"images/HW_exploration_c1.png\" width=\"640\"> \n\n(d) The allowable range for the unit profit of activity 2 is $4 \\leq c_2 \\leq 6$. \n\nThe lower bound is 4, as shown here.\n\n<img src=\"images/HW_exploration_d2.png\" width=\"640\"> \n\nThe upper bound is 6, as shown here.\n\n<img src=\"images/HW_exploration_d1.png\" width=\"640\"> ","metadata":{"hidden":true},"pos":9,"type":"cell"}
{"cell_type":"markdown","id":"df4389","input":"# *Self Assessment: A Holiday Factory*","metadata":{"heading_collapsed":true},"pos":30,"type":"cell"}
{"cell_type":"markdown","id":"e03949","input":"Shadow Prices\n* Resource 1: 0.66667\n* Resource 2: 1.00000\n\nAllowable Range for Right Hand Side of Constraints\n* Resource 1: -108 to 36\n* Resource 2: 24 to $\\infty$\n\n\nAllowable Range Objective Function Coefficients\n* Coefficient 1: 4.63636 to $\\infty$\n* Coefficient 2: $-\\infty$ to 4.3333\n* Coefficient 3: -2.33333 to 1.66667\n* Coefficient 4: $-\\infty$ to 3.66667","metadata":{"hidden":true},"pos":15,"type":"cell"}
{"id":0,"time":1601345652518,"type":"user"}
{"last_load":1601388029505,"type":"file"}