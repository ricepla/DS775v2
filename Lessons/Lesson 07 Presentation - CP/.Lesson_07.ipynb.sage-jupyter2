{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-942e185f-9cce-456e-9b2f-95fcc49943d1.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{"height":"calc(100% - 180px)","left":"10px","top":"150px","width":"265.781px"},"toc_section_display":true,"toc_window_display":true},"varInspector":{"cols":{"lenName":16,"lenType":16,"lenVar":40},"kernels_config":{"python":{"delete_cmd_postfix":"","delete_cmd_prefix":"del ","library":"var_list.py","varRefreshCmd":"print(var_dic_list())"},"r":{"delete_cmd_postfix":") ","delete_cmd_prefix":"rm(","library":"var_list.r","varRefreshCmd":"cat(var_dic_list()) "}},"types_to_exclude":["module","function","builtin_function_or_method","instance","_Feature"],"window_display":false}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":1,"id":"0ce568","input":"# EXECUTE FIRST\n\n# computational imports\nfrom ortools.sat.python import cp_model\nimport numpy as np\nimport pandas as pd\nfrom bokeh.io import show, output_notebook\nfrom bokeh.models import ColumnDataSource\nfrom bokeh.plotting import figure\nfrom ortools.constraint_solver import routing_enums_pb2\nfrom ortools.constraint_solver import pywrapcp\nimport json\n# plotting imports\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\n# for reading files from urls\nimport urllib.request\n# display imports\nfrom IPython.display import display, IFrame\nfrom IPython.core.display import HTML\n\n# for playing videos, customize height and width if desired\ndef play_video(vid_name, w = 640, h = 360):\n    vid_path = \"https://media.uwex.edu/content/ds/ds775_r19/\"\n    return IFrame( vid_path + vid_name + \"/index.html\", width = w, height = h )\n\n# import notebook styling for tables and width etc.\nresponse = urllib.request.urlopen('https://raw.githubusercontent.com/DataScienceUWL/DS775v2/master/ds755.css')\nHTML(response.read().decode(\"utf-8\"));","metadata":{"code_folding":[0]},"pos":0,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"6f2095","input":"# map coloring\n\n# Creates the model.\nmodel = cp_model.CpModel()\n\n# Creates the variables.\nnum_colors = 4\nBelgium = model.NewIntVar(0, num_colors - 1, 'Belgium')\nDenmark = model.NewIntVar(0, num_colors - 1, 'Denmark')\nFrance = model.NewIntVar(0, num_colors - 1, 'France')\nGermany = model.NewIntVar(0, num_colors - 1, 'Germany')\nLuxembourg = model.NewIntVar(0, num_colors - 1, 'Luxembourg')\nNetherlands = model.NewIntVar(0, num_colors - 1, 'Netherlands')\n\n# Constraints so that adjacent countries get assigned different colors\nmodel.Add(Belgium != France)\nmodel.Add(Belgium != Germany)\nmodel.Add(Belgium != Netherlands)\nmodel.Add(Belgium != Luxembourg)\nmodel.Add(Denmark != Germany)\nmodel.Add(France != Germany)\nmodel.Add(France != Luxembourg)\nmodel.Add(Germany != Luxembourg)\nmodel.Add(Germany != Netherlands)\n\n# Creates a solver and solves the model.\nsolver = cp_model.CpSolver()\nstatus = solver.Solve(model)\n\nif status == cp_model.FEASIBLE:\n    print(f'Belgium = {solver.Value(Belgium)}')\n    print(f'Denmark = {solver.Value(Denmark)}')\n    print(f'France = {solver.Value(France)}')\n    print(f'Germany = {solver.Value(Germany)}')\n    print(f'Luxembourg = {solver.Value(Luxembourg)}')\n    print(f'Netherlands = {solver.Value(Netherlands)}')","metadata":{"hidden":true},"pos":38,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"686131","input":"country_names = ['Belgium','Denmark','France','Germany','Luxembourg','Netherlands']\nadjacency_matrix = pd.DataFrame([[1,0,1,1,1,1],\n                                 [0,1,0,1,0,0],\n                                 [1,0,1,1,1,0],\n                                 [1,1,1,1,1,1],\n                                 [1,0,1,1,1,0],\n                                 [1,0,0,1,0,1]],\n                                index=country_names,columns=country_names)\n\n# Creates the model.\nmodel = cp_model.CpModel()\n\n# Creates the variables.\nnum_colors = 4\ncountries = [ model.NewIntVar(0, num_colors - 1, c) for c in country_names]\n\n# Creates the constraints from the upper triangular part of the adj. matrix\nnum_countries = len(countries)\nfor i in range(num_countries):\n    for j in np.arange(i+1,num_countries):\n        if adjacency_matrix.iloc[i,j] == 1:\n            model.Add( countries[i] != countries[j] )\n            \n# Creates a solver and solves the model.\nsolver = cp_model.CpSolver()\nstatus = solver.Solve(model)\n\n# Print Results\nfor c in countries:\n    print(f'{c} = {solver.Value(c)}')","metadata":{"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"Belgium = 0\nDenmark = 0\nFrance = 3\nGermany = 2\nLuxembourg = 1\nNetherlands = 1\n"}},"pos":40,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"5c862a","input":"# sets of values\n\n# Create the model.\nmodel = cp_model.CpModel()\n\n# Creates the variables.\nx = model.NewIntVarFromDomain(cp_model.Domain.FromValues([5,10,20]), 'x')\ny = model.NewIntVarFromDomain(cp_model.Domain.FromValues([3, 7,12]), 'y')\n\n# Creates the constraints.\nmodel.Add(x + y <= 30)\n\n# Add an objective function and a direction, need not be linear\nmodel.Maximize(x + y)\n\n# Creates a solver and solves the model.\nsolver = cp_model.CpSolver()\nstatus = solver.Solve(model)\n\nif status == cp_model.OPTIMAL:\n    print('Maximum of objective function: %i' % solver.ObjectiveValue())\n    print()\n    print('x = %i' % solver.Value(x))\n    print('y = %i' % solver.Value(y))","metadata":{"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"Maximum of objective function: 27\n\nx = 20\ny = 7\n"}},"pos":46,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"a69ee3","input":"# nonlinear objective code\n\n# Create the model.\nmodel = cp_model.CpModel()\n\n# Creates the variables.\nx = model.NewIntVarFromDomain(cp_model.Domain.FromValues([5,10,20]), 'x')\ny = model.NewIntVarFromDomain(cp_model.Domain.FromValues([3, 7,12]), 'y')\nysq = model.NewIntVar(9,144,'ysq') # NEW variable to hold y^2, where did that range come from?\n\n# Creates the constraints.\nmodel.Add(x + y <= 30)\nmodel.AddMultiplicationEquality(ysq, [y, y]) # NEW to enforce ysq = y*y\n# can be generalized so that target = product of all items in second list\n\n# Add an objective function and a direction, need not be linear\nmodel.Maximize(x - ysq)\n\n# Creates a solver and solves the model.\nsolver = cp_model.CpSolver()\nstatus = solver.Solve(model)\n\nif status == cp_model.OPTIMAL:\n    print('Maximum of objective function: %i' % solver.ObjectiveValue())\n    print()\n    print('x = %i' % solver.Value(x))\n    print('y = %i' % solver.Value(y))","metadata":{"code_folding":[]},"output":{"0":{"name":"stdout","output_type":"stream","text":"Maximum of objective function: 11\n\nx = 20\ny = 3\n"}},"pos":53,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"b9d921","input":"# execute this cell for video\nplay_video(\"ds775_lesson7-intro-to-element-constraint\")","metadata":{"hidden":true},"output":{"0":{"data":{"text/html":"\n        <iframe\n            width=\"640\"\n            height=\"360\"\n            src=\"https://media.uwex.edu/content/ds/ds775_r19/ds775_lesson7-intro-to-element-constraint/index.html\"\n            frameborder=\"0\"\n            allowfullscreen\n        ></iframe>\n        ","text/plain":"<IPython.lib.display.IFrame at 0x7f9d6dd11b50>"},"exec_count":14,"output_type":"execute_result"}},"pos":63,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"82bae0","input":"# element constraint\n\n# Create the model.\nmodel = cp_model.CpModel()\n\nx_list = [5, 10, 20]\ny_list = [3,  7, 12]\n\nx_idx = model.NewIntVar(0,2,'x_idx')\ny_idx = model.NewIntVar(0,2,'y_idx')\n\nx = model.NewIntVar(0,20,'x')\ny = model.NewIntVar(0,12,'y')\n\nmodel.AddElement(x_idx, x_list, x) # x = x_list[x_idx]\nmodel.AddElement(y_idx, y_list, y) # y = y_list[y_idx]\nmodel.Add( x + y <= 30)\n\n# Add an objective function and a direction, need not be linear\nmodel.Maximize(x + y)\n\n# output the model (not as nice as Pyomo though)\n# print(model.Proto())\n\n# Creates a solver and solves the model.\nsolver = cp_model.CpSolver()\nstatus = solver.Solve(model)\n\nif status == cp_model.OPTIMAL:\n    print('Maximum of objective function: %i' % solver.ObjectiveValue())\n    print()\n    print('x = %i' % solver.Value(x))\n    print('y = %i' % solver.Value(y))","metadata":{"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"Maximum of objective function: 27\n\nx = 20\ny = 7\n"}},"pos":65,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"b5bf32","input":"# execute this cell for video\nplay_video(\"ds775_lesson7-assignment-with-constraint-programming\")","output":{"0":{"data":{"text/html":"\n        <iframe\n            width=\"640\"\n            height=\"360\"\n            src=\"https://media.uwex.edu/content/ds/ds775_r19/ds775_lesson7-assignment-with-constraint-programming/index.html\"\n            frameborder=\"0\"\n            allowfullscreen\n        ></iframe>\n        ","text/plain":"<IPython.lib.display.IFrame at 0x7f9d6dd11f40>"},"exec_count":16,"output_type":"execute_result"}},"pos":70,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"10f4cc","input":"# assignment problem\n\n# problem data\nlocations = ['Loc1', 'Loc2', 'Loc3', 'Loc4']\nmachines = ['Mach1', 'Mach2', 'Mach3']\ncost = [ [13, 16, 12, 11],\n         [15, 99, 13, 20],\n         [ 5,  7, 10,  6]]\n\nnum_locations = len(cost[0])\n\n# Create the model.\nmodel = cp_model.CpModel()\n\n# Creates the variables.\nassign0 = model.NewIntVar(0,num_locations-1,'assign0')\nassign1 = model.NewIntVar(0,num_locations-1,'assign1')\nassign2 = model.NewIntVar(0,num_locations-1,'assign2')\n\n\ncost0 = model.NewIntVar(0,99,'cost0')\ncost1 = model.NewIntVar(0,99,'cost1')\ncost2 = model.NewIntVar(0,99,'cost2')\n\nmodel.AddAllDifferent([assign0,assign1, assign2])\nmodel.AddElement(assign0,cost[0],cost0) # cost0 = cost[0][assign0]\nmodel.AddElement(assign1,cost[1],cost1) # cost1 = cost[1][assign1]\nmodel.AddElement(assign2,cost[2],cost2) # cost2 = cost[2][assign2]\n\nmodel.Minimize(cost0 + cost1 + cost2)\n\n# Creates a solver and solves the model.\nsolver = cp_model.CpSolver()\nstatus = solver.Solve(model)\n\nif status == cp_model.OPTIMAL:\n    print(f'Lowest Possible Cost: {solver.ObjectiveValue()}')\n    print()\n    print('Assignments and associated costs:')\n    cost_assigns = pd.DataFrame(0, index=machines, columns=locations)\n    cost_assigns.iloc[ 0, solver.Value(assign0) ] = solver.Value(cost0)\n    cost_assigns.iloc[ 1, solver.Value(assign1) ] = solver.Value(cost1)\n    cost_assigns.iloc[ 2, solver.Value(assign2) ] = solver.Value(cost2)\n    display(cost_assigns)","output":{"0":{"name":"stdout","output_type":"stream","text":"Lowest Possible Cost: 29.0\n\nAssignments and associated costs:\n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loc1</th>\n      <th>Loc2</th>\n      <th>Loc3</th>\n      <th>Loc4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Mach1</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>Mach2</th>\n      <td>0</td>\n      <td>0</td>\n      <td>13</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Mach3</th>\n      <td>5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"       Loc1  Loc2  Loc3  Loc4\nMach1     0     0     0    11\nMach2     0     0    13     0\nMach3     5     0     0     0"},"exec_count":17,"output_type":"execute_result"}},"pos":72,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"6784b3","input":"# abstract assignment problem\n\n# problem data\nlocations = ['Loc1', 'Loc2', 'Loc3', 'Loc4']\nmachines = ['Mach1', 'Mach2', 'Mach3']\ncost_table = [[13, 16, 12, 11], [15, 99, 13, 20], [5, 7, 10, 6]]\n\nnum_locations = len(cost_table[0])\nnum_machines = len(cost_table)\n\n# Create the model.\nmodel = cp_model.CpModel()\n\n# Variables\nassign = [\n    model.NewIntVar(0, num_locations - 1, machines[i])\n    for i in range(num_machines)\n]\n\n#get the maximum cost from the cost_table for the top of our intvar range\nmax_cost = max(list(map(max, cost_table)))\ncost = [model.NewIntVar(0, max_cost, f'cost{i}') for i in range(num_machines)]\n\n# Constraints\nmodel.AddAllDifferent(assign)\n\nfor i in range(num_machines):\n    model.AddElement(assign[i], cost_table[i], cost[i]) #cost[i]= cost_table[i][assign[i]] \n\nmodel.Minimize(sum(cost))\n\n# Creates a solver and solves the model.\nsolver = cp_model.CpSolver()\nstatus = solver.Solve(model)\n\nif status == cp_model.OPTIMAL:\n    print(f'Lowest Possible Cost: {solver.ObjectiveValue()}')\n    print()\n    print('Assignments and associated costs:')\n    cost_assigns = pd.DataFrame(0, index=machines, columns=locations)\n    for i in range(num_machines):\n        cost_assigns.iloc[i, solver.Value(assign[i])] = solver.Value(cost[i])\n    display(cost_assigns)","metadata":{"code_folding":[0],"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"Lowest Possible Cost: 29.0\n\nAssignments and associated costs:\n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loc1</th>\n      <th>Loc2</th>\n      <th>Loc3</th>\n      <th>Loc4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Mach1</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>Mach2</th>\n      <td>0</td>\n      <td>0</td>\n      <td>13</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Mach3</th>\n      <td>5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"       Loc1  Loc2  Loc3  Loc4\nMach1     0     0     0    11\nMach2     0     0    13     0\nMach3     5     0     0     0"},"exec_count":18,"output_type":"execute_result"}},"pos":75,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"b6537d","input":"# scheduling problem\n\n# Creates the model.\nmodel = cp_model.CpModel()\n\n# maximum total time required if tasks done sequentially\nhorizon = 35 + 15 + 40 + 15 + 5 + 10 + 5 + 10 + 5 + 5\n\nstart_masonry = model.NewIntVar(0, horizon, 'start_masonry')\nstart_carpentry = model.NewIntVar(0, horizon, 'start_carpentry')\nstart_plumbing = model.NewIntVar(0, horizon, 'start_plumbing')\nstart_ceiling = model.NewIntVar(0, horizon, 'start_ceiling')\nstart_roofing = model.NewIntVar(0, horizon, 'start_roofing')\nstart_painting = model.NewIntVar(0, horizon, 'start_painting')\nstart_windows = model.NewIntVar(0, horizon, 'start_windows')\nstart_facade = model.NewIntVar(0, horizon, 'start_facade')\nstart_garden = model.NewIntVar(0, horizon, 'start_garden')\nstart_moving = model.NewIntVar(0, horizon, 'start_moving')","pos":86,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"5788b2","input":"# execute this cell for video\nplay_video(\"ds775_lesson7-finding-one-feasible-solution\")","metadata":{"code_folding":[],"hidden":true},"output":{"0":{"data":{"text/html":"\n        <iframe\n            width=\"640\"\n            height=\"360\"\n            src=\"https://media.uwex.edu/content/ds/ds775_r19/ds775_lesson7-finding-one-feasible-solution/index.html\"\n            frameborder=\"0\"\n            allowfullscreen\n        ></iframe>\n        ","text/plain":"<IPython.lib.display.IFrame at 0x7f9d8d78ce20>"},"exec_count":2,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"d3aea9","input":"end_masonry = model.NewIntVar(0, horizon, 'end_masonry')\nend_carpentry = model.NewIntVar(0, horizon, 'end_carpentry')\nend_plumbing = model.NewIntVar(0, horizon, 'end_plumbing')\nend_ceiling = model.NewIntVar(0, horizon, 'end_ceiling')\nend_roofing = model.NewIntVar(0, horizon, 'end_roofing')\nend_painting = model.NewIntVar(0, horizon, 'end_painting')\nend_windows = model.NewIntVar(0, horizon, 'end_windows')\nend_facade = model.NewIntVar(0, horizon, 'end_facade')\nend_garden = model.NewIntVar(0, horizon, 'end_garden')\nend_moving = model.NewIntVar(0, horizon, 'end_moving')","pos":88,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"ceff14","input":"model.Add(end_masonry == start_masonry + 35)\nmodel.Add(end_carpentry == start_carpentry + 15)\nmodel.Add(end_plumbing == start_plumbing + 40)\nmodel.Add(end_ceiling == start_ceiling + 15)\nmodel.Add(end_roofing == start_roofing + 5 )\nmodel.Add(end_painting == start_painting + 10)\nmodel.Add(end_windows == start_windows + 5)\nmodel.Add(end_facade == start_facade + 10)\nmodel.Add(end_garden == start_garden + 5)\nmodel.Add(end_moving == start_moving + 5)","output":{"0":{"data":{"text/plain":"<ortools.sat.python.cp_model.Constraint at 0x7f9d6dd28640>"},"exec_count":21,"output_type":"execute_result"}},"pos":90,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"b858b6","input":"model.Add(end_masonry <= start_carpentry)\nmodel.Add(end_masonry <= start_plumbing)\nmodel.Add(end_masonry <= start_ceiling)\nmodel.Add(end_carpentry <= start_roofing)\nmodel.Add(end_plumbing <= start_facade)\nmodel.Add(end_plumbing <= start_garden)\nmodel.Add(end_ceiling <= start_painting)\nmodel.Add(end_roofing <= start_windows)\nmodel.Add(end_roofing <= start_facade)\nmodel.Add(end_roofing <= start_garden)\nmodel.Add(end_windows <= start_moving)\nmodel.Add(end_facade <= start_moving)\nmodel.Add(end_garden <= start_moving)","output":{"0":{"data":{"text/plain":"<ortools.sat.python.cp_model.Constraint at 0x7f9d6dd98460>"},"exec_count":22,"output_type":"execute_result"}},"pos":92,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"925580","input":"obj_var = model.NewIntVar(0, horizon, 'makespan')\nmodel.AddMaxEquality(obj_var, [\n    end_masonry, end_carpentry, end_plumbing, end_ceiling, end_roofing,\n    end_painting, end_windows, end_facade, end_garden, end_moving\n])\nmodel.Minimize(obj_var)","pos":94,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"7e46bf","input":"solver = cp_model.CpSolver()\nstatus = solver.Solve(model)","pos":96,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"e979ff","input":"print(f'Optimal Schedule Length: {solver.ObjectiveValue()}')\nprint(f'Masonry start at {solver.Value(start_masonry)} and end at {solver.Value(end_masonry)}')\nprint(f'Carpentry start at {solver.Value(start_carpentry)} and end at {solver.Value(end_carpentry)}')\nprint(f'Plumbing start at {solver.Value(start_plumbing)} and end at {solver.Value(end_plumbing)}')\nprint(f'Ceiling start at {solver.Value(start_ceiling)} and end at {solver.Value(end_ceiling)}')\nprint(f'Roofing start at {solver.Value(start_roofing)} and end at {solver.Value(end_roofing)}')\nprint(f'Painting start at {solver.Value(start_painting)} and end at {solver.Value(end_painting)}')\nprint(f'Windows start at {solver.Value(start_windows)} and end at {solver.Value(end_windows)}')\nprint(f'Facade start at {solver.Value(start_facade)} and end at {solver.Value(end_facade)}')\nprint(f'Garden start at {solver.Value(start_garden)} and end at {solver.Value(end_garden)}')\nprint(f'Moving start at {solver.Value(start_moving)} and end at {solver.Value(end_moving)}')","output":{"0":{"name":"stdout","output_type":"stream","text":"Optimal Schedule Length: 90.0\nMasonry start at 0 and end at 35\nCarpentry start at 35 and end at 50\nPlumbing start at 35 and end at 75\nCeiling start at 35 and end at 50\nRoofing start at 50 and end at 55\nPainting start at 50 and end at 60\nWindows start at 55 and end at 60\nFacade start at 75 and end at 85\nGarden start at 75 and end at 80\nMoving start at 85 and end at 90\n"}},"pos":98,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"e2e41a","input":"# execute this cell for video\nplay_video(\"ds775_lesson7-scheduling-with-constraint-programming\")","metadata":{"hidden":true},"output":{"0":{"data":{"text/html":"\n        <iframe\n            width=\"640\"\n            height=\"360\"\n            src=\"https://media.uwex.edu/content/ds/ds775_r19/ds775_lesson7-scheduling-with-constraint-programming/index.html\"\n            frameborder=\"0\"\n            allowfullscreen\n        ></iframe>\n        ","text/plain":"<IPython.lib.display.IFrame at 0x7f9d6dd985e0>"},"exec_count":26,"output_type":"execute_result"}},"pos":103,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"51b8f5","input":"# generalizable schedule code\n\ntask_duration_dict = {\n    'masonry': 35,\n    'carpentry': 15,\n    'plumbing': 40,\n    'ceiling': 15,\n    'roofing': 5,\n    'painting': 10,\n    'windows': 5,\n    'facade': 10,\n    'garden': 5,\n    'moving': 5\n}\ntask_names = list(task_duration_dict.keys())\nnum_tasks = len(task_names)\ndurations = list(task_duration_dict.values())\n\n# for each task we have a list of tasks that must go after\n# task:['these','tasks','after']\nprecedence_dict = {\n    'masonry': ['carpentry', 'plumbing', 'ceiling'],\n    'carpentry': ['roofing'],\n    'plumbing': ['facade', 'garden'],\n    'ceiling': ['painting'],\n    'roofing': ['windows', 'facade', 'garden'],\n    'painting': ['moving'],\n    'windows': ['moving'],\n    'facade': ['moving'],\n    'garden': ['moving']\n}\n\ntask_name_to_number_dict = dict(zip(task_names, np.arange(0, num_tasks)))\n\nhorizon = sum(task_duration_dict.values())\n\nmodel = cp_model.CpModel()\n\nstart_vars = [\n    model.NewIntVar(0, horizon, name=f'start_{t}') for t in task_names\n]\nend_vars = [model.NewIntVar(0, horizon, name=f'end_{t}') for t in task_names]\n\n# the `NewIntervalVar` are both variables and constraints, the internally enforce that start + duration = end\nintervals = [\n    model.NewIntervalVar(start_vars[i],\n                         durations[i],\n                         end_vars[i],\n                         name=f'interval_{task_names[i]}')\n    for i in range(num_tasks)\n]\n\n# precedence constraints\nfor before in list(precedence_dict.keys()):\n    for after in precedence_dict[before]:\n        before_index = task_name_to_number_dict[before]\n        after_index = task_name_to_number_dict[after]\n        model.Add(end_vars[before_index] <= start_vars[after_index])\n\nobj_var = model.NewIntVar(0, horizon, 'largest_end_time')\nmodel.AddMaxEquality(obj_var, end_vars)\nmodel.Minimize(obj_var)\n\nsolver = cp_model.CpSolver()\nstatus = solver.Solve(model)\n\nprint(f'Optimal Schedule Length: {solver.ObjectiveValue()}')\nfor i in range(num_tasks):\n    print(\n        f'{task_names[i]} start at {solver.Value(start_vars[i])} and end at {solver.Value(end_vars[i])}'\n    )","metadata":{"code_folding":[0],"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"Optimal Schedule Length: 90.0\nmasonry start at 0 and end at 35\ncarpentry start at 35 and end at 50\nplumbing start at 35 and end at 75\nceiling start at 35 and end at 50\nroofing start at 50 and end at 55\npainting start at 50 and end at 60\nwindows start at 55 and end at 60\nfacade start at 75 and end at 85\ngarden start at 75 and end at 80\nmoving start at 85 and end at 90\n"}},"pos":105,"type":"cell"}
{"cell_type":"code","exec_count":28,"id":"fdbdf7","input":"\noutput_notebook()\n\nstarts = [solver.Value(start_vars[i]) for i in range(num_tasks)]\nends = [solver.Value(end_vars[i]) for i in range(num_tasks)]\n\nsource = ColumnDataSource(data=dict(tasks=task_names, starts = starts, ends=ends))\n\np = figure(x_range=(0,solver.ObjectiveValue()), y_range=task_names, plot_height=350, title=\"Task Time Spans\",\n           toolbar_location=None, tools=\"\")\n\np.hbar(y='tasks', left='starts', right='ends', height=0.9, source=source)\n\np.xaxis.axis_label = \"Time\"\np.ygrid.grid_line_color = None\n\nshow(p)","metadata":{"code_folding":[0],"hidden":true},"output":{"0":{"data":{"text/html":"\n    <div class=\"bk-root\">\n        <a href=\"https://bokeh.org\" target=\"_blank\" class=\"bk-logo bk-logo-small bk-logo-notebook\"></a>\n        <span id=\"1001\">Loading BokehJS ...</span>\n    </div>"},"exec_count":28,"output_type":"execute_result"},"1":{"data":{"application/javascript":"\n(function(root) {\n  function now() {\n    return new Date();\n  }\n\n  var force = true;\n\n  if (typeof root._bokeh_onload_callbacks === \"undefined\" || force === true) {\n    root._bokeh_onload_callbacks = [];\n    root._bokeh_is_loading = undefined;\n  }\n\n  var JS_MIME_TYPE = 'application/javascript';\n  var HTML_MIME_TYPE = 'text/html';\n  var EXEC_MIME_TYPE = 'application/vnd.bokehjs_exec.v0+json';\n  var CLASS_NAME = 'output_bokeh rendered_html';\n\n  /**\n   * Render data to the DOM node\n   */\n  function render(props, node) {\n    var script = document.createElement(\"script\");\n    node.appendChild(script);\n  }\n\n  /**\n   * Handle when an output is cleared or removed\n   */\n  function handleClearOutput(event, handle) {\n    var cell = handle.cell;\n\n    var id = cell.output_area._bokeh_element_id;\n    var server_id = cell.output_area._bokeh_server_id;\n    // Clean up Bokeh references\n    if (id != null && id in Bokeh.index) {\n      Bokeh.index[id].model.document.clear();\n      delete Bokeh.index[id];\n    }\n\n    if (server_id !== undefined) {\n      // Clean up Bokeh references\n      var cmd = \"from bokeh.io.state import curstate; print(curstate().uuid_to_server['\" + server_id + \"'].get_sessions()[0].document.roots[0]._id)\";\n      cell.notebook.kernel.execute(cmd, {\n        iopub: {\n          output: function(msg) {\n            var id = msg.content.text.trim();\n            if (id in Bokeh.index) {\n              Bokeh.index[id].model.document.clear();\n              delete Bokeh.index[id];\n            }\n          }\n        }\n      });\n      // Destroy server and session\n      var cmd = \"import bokeh.io.notebook as ion; ion.destroy_server('\" + server_id + \"')\";\n      cell.notebook.kernel.execute(cmd);\n    }\n  }\n\n  /**\n   * Handle when a new output is added\n   */\n  function handleAddOutput(event, handle) {\n    var output_area = handle.output_area;\n    var output = handle.output;\n\n    // limit handleAddOutput to display_data with EXEC_MIME_TYPE content only\n    if ((output.output_type != \"display_data\") || (!output.data.hasOwnProperty(EXEC_MIME_TYPE))) {\n      return\n    }\n\n    var toinsert = output_area.element.find(\".\" + CLASS_NAME.split(' ')[0]);\n\n    if (output.metadata[EXEC_MIME_TYPE][\"id\"] !== undefined) {\n      toinsert[toinsert.length - 1].firstChild.textContent = output.data[JS_MIME_TYPE];\n      // store reference to embed id on output_area\n      output_area._bokeh_element_id = output.metadata[EXEC_MIME_TYPE][\"id\"];\n    }\n    if (output.metadata[EXEC_MIME_TYPE][\"server_id\"] !== undefined) {\n      var bk_div = document.createElement(\"div\");\n      bk_div.innerHTML = output.data[HTML_MIME_TYPE];\n      var script_attrs = bk_div.children[0].attributes;\n      for (var i = 0; i < script_attrs.length; i++) {\n        toinsert[toinsert.length - 1].firstChild.setAttribute(script_attrs[i].name, script_attrs[i].value);\n        toinsert[toinsert.length - 1].firstChild.textContent = bk_div.children[0].textContent\n      }\n      // store reference to server id on output_area\n      output_area._bokeh_server_id = output.metadata[EXEC_MIME_TYPE][\"server_id\"];\n    }\n  }\n\n  function register_renderer(events, OutputArea) {\n\n    function append_mime(data, metadata, element) {\n      // create a DOM node to render to\n      var toinsert = this.create_output_subarea(\n        metadata,\n        CLASS_NAME,\n        EXEC_MIME_TYPE\n      );\n      this.keyboard_manager.register_events(toinsert);\n      // Render to node\n      var props = {data: data, metadata: metadata[EXEC_MIME_TYPE]};\n      render(props, toinsert[toinsert.length - 1]);\n      element.append(toinsert);\n      return toinsert\n    }\n\n    /* Handle when an output is cleared or removed */\n    events.on('clear_output.CodeCell', handleClearOutput);\n    events.on('delete.Cell', handleClearOutput);\n\n    /* Handle when a new output is added */\n    events.on('output_added.OutputArea', handleAddOutput);\n\n    /**\n     * Register the mime type and append_mime function with output_area\n     */\n    OutputArea.prototype.register_mime_type(EXEC_MIME_TYPE, append_mime, {\n      /* Is output safe? */\n      safe: true,\n      /* Index of renderer in `output_area.display_order` */\n      index: 0\n    });\n  }\n\n  // register the mime type if in Jupyter Notebook environment and previously unregistered\n  if (root.Jupyter !== undefined) {\n    var events = require('base/js/events');\n    var OutputArea = require('notebook/js/outputarea').OutputArea;\n\n    if (OutputArea.prototype.mime_types().indexOf(EXEC_MIME_TYPE) == -1) {\n      register_renderer(events, OutputArea);\n    }\n  }\n\n  \n  if (typeof (root._bokeh_timeout) === \"undefined\" || force === true) {\n    root._bokeh_timeout = Date.now() + 5000;\n    root._bokeh_failed_load = false;\n  }\n\n  var NB_LOAD_WARNING = {'data': {'text/html':\n     \"<div style='background-color: #fdd'>\\n\"+\n     \"<p>\\n\"+\n     \"BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n\"+\n     \"may be due to a slow or bad network connection. Possible fixes:\\n\"+\n     \"</p>\\n\"+\n     \"<ul>\\n\"+\n     \"<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n\"+\n     \"<li>use INLINE resources instead, as so:</li>\\n\"+\n     \"</ul>\\n\"+\n     \"<code>\\n\"+\n     \"from bokeh.resources import INLINE\\n\"+\n     \"output_notebook(resources=INLINE)\\n\"+\n     \"</code>\\n\"+\n     \"</div>\"}};\n\n  function display_loaded() {\n    var el = document.getElementById(\"1001\");\n    if (el != null) {\n      el.textContent = \"BokehJS is loading...\";\n    }\n    if (root.Bokeh !== undefined) {\n      if (el != null) {\n        el.textContent = \"BokehJS \" + root.Bokeh.version + \" successfully loaded.\";\n      }\n    } else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(display_loaded, 100)\n    }\n  }\n\n\n  function run_callbacks() {\n    try {\n      root._bokeh_onload_callbacks.forEach(function(callback) {\n        if (callback != null)\n          callback();\n      });\n    } finally {\n      delete root._bokeh_onload_callbacks\n    }\n    console.debug(\"Bokeh: all callbacks have finished\");\n  }\n\n  function load_libs(css_urls, js_urls, callback) {\n    if (css_urls == null) css_urls = [];\n    if (js_urls == null) js_urls = [];\n\n    root._bokeh_onload_callbacks.push(callback);\n    if (root._bokeh_is_loading > 0) {\n      console.debug(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n      return null;\n    }\n    if (js_urls == null || js_urls.length === 0) {\n      run_callbacks();\n      return null;\n    }\n    console.debug(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n    root._bokeh_is_loading = css_urls.length + js_urls.length;\n\n    function on_load() {\n      root._bokeh_is_loading--;\n      if (root._bokeh_is_loading === 0) {\n        console.debug(\"Bokeh: all BokehJS libraries/stylesheets loaded\");\n        run_callbacks()\n      }\n    }\n\n    function on_error() {\n      console.error(\"failed to load \" + url);\n    }\n\n    for (var i = 0; i < css_urls.length; i++) {\n      var url = css_urls[i];\n      const element = document.createElement(\"link\");\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.rel = \"stylesheet\";\n      element.type = \"text/css\";\n      element.href = url;\n      console.debug(\"Bokeh: injecting link tag for BokehJS stylesheet: \", url);\n      document.body.appendChild(element);\n    }\n\n    const hashes = {\"https://cdn.bokeh.org/bokeh/release/bokeh-2.2.3.min.js\": \"T2yuo9Oe71Cz/I4X9Ac5+gpEa5a8PpJCDlqKYO0CfAuEszu1JrXLl8YugMqYe3sM\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.2.3.min.js\": \"98GDGJ0kOMCUMUePhksaQ/GYgB3+NH9h996V88sh3aOiUNX3N+fLXAtry6xctSZ6\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.2.3.min.js\": \"89bArO+nlbP3sgakeHjCo1JYxYR5wufVgA3IbUvDY+K7w4zyxJqssu7wVnfeKCq8\"};\n\n    for (var i = 0; i < js_urls.length; i++) {\n      var url = js_urls[i];\n      var element = document.createElement('script');\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.async = false;\n      element.src = url;\n      if (url in hashes) {\n        element.crossOrigin = \"anonymous\";\n        element.integrity = \"sha384-\" + hashes[url];\n      }\n      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n      document.head.appendChild(element);\n    }\n  };\n\n  function inject_raw_css(css) {\n    const element = document.createElement(\"style\");\n    element.appendChild(document.createTextNode(css));\n    document.body.appendChild(element);\n  }\n\n  \n  var js_urls = [\"https://cdn.bokeh.org/bokeh/release/bokeh-2.2.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.2.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.2.3.min.js\"];\n  var css_urls = [];\n  \n\n  var inline_js = [\n    function(Bokeh) {\n      Bokeh.set_log_level(\"info\");\n    },\n    function(Bokeh) {\n    \n    \n    }\n  ];\n\n  function run_inline_js() {\n    \n    if (root.Bokeh !== undefined || force === true) {\n      \n    for (var i = 0; i < inline_js.length; i++) {\n      inline_js[i].call(root, root.Bokeh);\n    }\n    if (force === true) {\n        display_loaded();\n      }} else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(run_inline_js, 100);\n    } else if (!root._bokeh_failed_load) {\n      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n      root._bokeh_failed_load = true;\n    } else if (force !== true) {\n      var cell = $(document.getElementById(\"1001\")).parents('.cell').data().cell;\n      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n    }\n\n  }\n\n  if (root._bokeh_is_loading === 0) {\n    console.debug(\"Bokeh: BokehJS loaded, going straight to plotting\");\n    run_inline_js();\n  } else {\n    load_libs(css_urls, js_urls, function() {\n      console.debug(\"Bokeh: BokehJS plotting callback run at\", now());\n      run_inline_js();\n    });\n  }\n}(window));","application/vnd.bokehjs_load.v0+json":"\n(function(root) {\n  function now() {\n    return new Date();\n  }\n\n  var force = true;\n\n  if (typeof root._bokeh_onload_callbacks === \"undefined\" || force === true) {\n    root._bokeh_onload_callbacks = [];\n    root._bokeh_is_loading = undefined;\n  }\n\n  \n\n  \n  if (typeof (root._bokeh_timeout) === \"undefined\" || force === true) {\n    root._bokeh_timeout = Date.now() + 5000;\n    root._bokeh_failed_load = false;\n  }\n\n  var NB_LOAD_WARNING = {'data': {'text/html':\n     \"<div style='background-color: #fdd'>\\n\"+\n     \"<p>\\n\"+\n     \"BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n\"+\n     \"may be due to a slow or bad network connection. Possible fixes:\\n\"+\n     \"</p>\\n\"+\n     \"<ul>\\n\"+\n     \"<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n\"+\n     \"<li>use INLINE resources instead, as so:</li>\\n\"+\n     \"</ul>\\n\"+\n     \"<code>\\n\"+\n     \"from bokeh.resources import INLINE\\n\"+\n     \"output_notebook(resources=INLINE)\\n\"+\n     \"</code>\\n\"+\n     \"</div>\"}};\n\n  function display_loaded() {\n    var el = document.getElementById(\"1001\");\n    if (el != null) {\n      el.textContent = \"BokehJS is loading...\";\n    }\n    if (root.Bokeh !== undefined) {\n      if (el != null) {\n        el.textContent = \"BokehJS \" + root.Bokeh.version + \" successfully loaded.\";\n      }\n    } else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(display_loaded, 100)\n    }\n  }\n\n\n  function run_callbacks() {\n    try {\n      root._bokeh_onload_callbacks.forEach(function(callback) {\n        if (callback != null)\n          callback();\n      });\n    } finally {\n      delete root._bokeh_onload_callbacks\n    }\n    console.debug(\"Bokeh: all callbacks have finished\");\n  }\n\n  function load_libs(css_urls, js_urls, callback) {\n    if (css_urls == null) css_urls = [];\n    if (js_urls == null) js_urls = [];\n\n    root._bokeh_onload_callbacks.push(callback);\n    if (root._bokeh_is_loading > 0) {\n      console.debug(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n      return null;\n    }\n    if (js_urls == null || js_urls.length === 0) {\n      run_callbacks();\n      return null;\n    }\n    console.debug(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n    root._bokeh_is_loading = css_urls.length + js_urls.length;\n\n    function on_load() {\n      root._bokeh_is_loading--;\n      if (root._bokeh_is_loading === 0) {\n        console.debug(\"Bokeh: all BokehJS libraries/stylesheets loaded\");\n        run_callbacks()\n      }\n    }\n\n    function on_error() {\n      console.error(\"failed to load \" + url);\n    }\n\n    for (var i = 0; i < css_urls.length; i++) {\n      var url = css_urls[i];\n      const element = document.createElement(\"link\");\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.rel = \"stylesheet\";\n      element.type = \"text/css\";\n      element.href = url;\n      console.debug(\"Bokeh: injecting link tag for BokehJS stylesheet: \", url);\n      document.body.appendChild(element);\n    }\n\n    const hashes = {\"https://cdn.bokeh.org/bokeh/release/bokeh-2.2.3.min.js\": \"T2yuo9Oe71Cz/I4X9Ac5+gpEa5a8PpJCDlqKYO0CfAuEszu1JrXLl8YugMqYe3sM\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.2.3.min.js\": \"98GDGJ0kOMCUMUePhksaQ/GYgB3+NH9h996V88sh3aOiUNX3N+fLXAtry6xctSZ6\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.2.3.min.js\": \"89bArO+nlbP3sgakeHjCo1JYxYR5wufVgA3IbUvDY+K7w4zyxJqssu7wVnfeKCq8\"};\n\n    for (var i = 0; i < js_urls.length; i++) {\n      var url = js_urls[i];\n      var element = document.createElement('script');\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.async = false;\n      element.src = url;\n      if (url in hashes) {\n        element.crossOrigin = \"anonymous\";\n        element.integrity = \"sha384-\" + hashes[url];\n      }\n      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n      document.head.appendChild(element);\n    }\n  };\n\n  function inject_raw_css(css) {\n    const element = document.createElement(\"style\");\n    element.appendChild(document.createTextNode(css));\n    document.body.appendChild(element);\n  }\n\n  \n  var js_urls = [\"https://cdn.bokeh.org/bokeh/release/bokeh-2.2.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.2.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.2.3.min.js\"];\n  var css_urls = [];\n  \n\n  var inline_js = [\n    function(Bokeh) {\n      Bokeh.set_log_level(\"info\");\n    },\n    function(Bokeh) {\n    \n    \n    }\n  ];\n\n  function run_inline_js() {\n    \n    if (root.Bokeh !== undefined || force === true) {\n      \n    for (var i = 0; i < inline_js.length; i++) {\n      inline_js[i].call(root, root.Bokeh);\n    }\n    if (force === true) {\n        display_loaded();\n      }} else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(run_inline_js, 100);\n    } else if (!root._bokeh_failed_load) {\n      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n      root._bokeh_failed_load = true;\n    } else if (force !== true) {\n      var cell = $(document.getElementById(\"1001\")).parents('.cell').data().cell;\n      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n    }\n\n  }\n\n  if (root._bokeh_is_loading === 0) {\n    console.debug(\"Bokeh: BokehJS loaded, going straight to plotting\");\n    run_inline_js();\n  } else {\n    load_libs(css_urls, js_urls, function() {\n      console.debug(\"Bokeh: BokehJS plotting callback run at\", now());\n      run_inline_js();\n    });\n  }\n}(window));"},"exec_count":28,"output_type":"execute_result"},"2":{"data":{"text/html":"\n\n\n\n\n\n  <div class=\"bk-root\" id=\"8f36562f-9263-44ad-a39b-0fd2292abdce\" data-root-id=\"1003\"></div>\n"},"exec_count":28,"output_type":"execute_result"},"3":{"data":{"application/javascript":"(function(root) {\n  function embed_document(root) {\n    \n  var docs_json = {\"6d2e35bc-3362-449e-918b-8565309546c8\":{\"roots\":{\"references\":[{\"attributes\":{\"below\":[{\"id\":\"1014\"}],\"center\":[{\"id\":\"1017\"},{\"id\":\"1020\"}],\"left\":[{\"id\":\"1018\"}],\"plot_height\":350,\"renderers\":[{\"id\":\"1025\"}],\"title\":{\"id\":\"1004\"},\"toolbar\":{\"id\":\"1021\"},\"toolbar_location\":null,\"x_range\":{\"id\":\"1006\"},\"x_scale\":{\"id\":\"1010\"},\"y_range\":{\"id\":\"1008\"},\"y_scale\":{\"id\":\"1012\"}},\"id\":\"1003\",\"subtype\":\"Figure\",\"type\":\"Plot\"},{\"attributes\":{\"fill_alpha\":{\"value\":0.1},\"fill_color\":{\"value\":\"#1f77b4\"},\"height\":{\"value\":0.9},\"left\":{\"field\":\"starts\"},\"line_alpha\":{\"value\":0.1},\"line_color\":{\"value\":\"#1f77b4\"},\"right\":{\"field\":\"ends\"},\"y\":{\"field\":\"tasks\"}},\"id\":\"1024\",\"type\":\"HBar\"},{\"attributes\":{},\"id\":\"1032\",\"type\":\"Selection\"},{\"attributes\":{\"axis\":{\"id\":\"1014\"},\"ticker\":null},\"id\":\"1017\",\"type\":\"Grid\"},{\"attributes\":{\"source\":{\"id\":\"1002\"}},\"id\":\"1026\",\"type\":\"CDSView\"},{\"attributes\":{\"data\":{\"ends\":[35,50,75,50,55,60,60,85,80,90],\"starts\":[0,35,35,35,50,50,55,75,75,85],\"tasks\":[\"masonry\",\"carpentry\",\"plumbing\",\"ceiling\",\"roofing\",\"painting\",\"windows\",\"facade\",\"garden\",\"moving\"]},\"selected\":{\"id\":\"1032\"},\"selection_policy\":{\"id\":\"1033\"}},\"id\":\"1002\",\"type\":\"ColumnDataSource\"},{\"attributes\":{},\"id\":\"1012\",\"type\":\"CategoricalScale\"},{\"attributes\":{},\"id\":\"1033\",\"type\":\"UnionRenderers\"},{\"attributes\":{\"formatter\":{\"id\":\"1031\"},\"ticker\":{\"id\":\"1019\"}},\"id\":\"1018\",\"type\":\"CategoricalAxis\"},{\"attributes\":{},\"id\":\"1015\",\"type\":\"BasicTicker\"},{\"attributes\":{\"active_drag\":\"auto\",\"active_inspect\":\"auto\",\"active_multi\":null,\"active_scroll\":\"auto\",\"active_tap\":\"auto\"},\"id\":\"1021\",\"type\":\"Toolbar\"},{\"attributes\":{\"axis_label\":\"Time\",\"formatter\":{\"id\":\"1029\"},\"ticker\":{\"id\":\"1015\"}},\"id\":\"1014\",\"type\":\"LinearAxis\"},{\"attributes\":{},\"id\":\"1029\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{\"data_source\":{\"id\":\"1002\"},\"glyph\":{\"id\":\"1023\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1024\"},\"selection_glyph\":null,\"view\":{\"id\":\"1026\"}},\"id\":\"1025\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"text\":\"Task Time Spans\"},\"id\":\"1004\",\"type\":\"Title\"},{\"attributes\":{\"fill_color\":{\"value\":\"#1f77b4\"},\"height\":{\"value\":0.9},\"left\":{\"field\":\"starts\"},\"line_color\":{\"value\":\"#1f77b4\"},\"right\":{\"field\":\"ends\"},\"y\":{\"field\":\"tasks\"}},\"id\":\"1023\",\"type\":\"HBar\"},{\"attributes\":{},\"id\":\"1010\",\"type\":\"LinearScale\"},{\"attributes\":{},\"id\":\"1031\",\"type\":\"CategoricalTickFormatter\"},{\"attributes\":{\"end\":90.0},\"id\":\"1006\",\"type\":\"Range1d\"},{\"attributes\":{\"axis\":{\"id\":\"1018\"},\"dimension\":1,\"grid_line_color\":null,\"ticker\":null},\"id\":\"1020\",\"type\":\"Grid\"},{\"attributes\":{\"factors\":[\"masonry\",\"carpentry\",\"plumbing\",\"ceiling\",\"roofing\",\"painting\",\"windows\",\"facade\",\"garden\",\"moving\"]},\"id\":\"1008\",\"type\":\"FactorRange\"},{\"attributes\":{},\"id\":\"1019\",\"type\":\"CategoricalTicker\"}],\"root_ids\":[\"1003\"]},\"title\":\"Bokeh Application\",\"version\":\"2.2.3\"}};\n  var render_items = [{\"docid\":\"6d2e35bc-3362-449e-918b-8565309546c8\",\"root_ids\":[\"1003\"],\"roots\":{\"1003\":\"8f36562f-9263-44ad-a39b-0fd2292abdce\"}}];\n  root.Bokeh.embed.embed_items_notebook(docs_json, render_items);\n\n  }\n  if (root.Bokeh !== undefined) {\n    embed_document(root);\n  } else {\n    var attempts = 0;\n    var timer = setInterval(function(root) {\n      if (root.Bokeh !== undefined) {\n        clearInterval(timer);\n        embed_document(root);\n      } else {\n        attempts++;\n        if (attempts > 100) {\n          clearInterval(timer);\n          console.log(\"Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing\");\n        }\n      }\n    }, 10, root)\n  }\n})(window);","application/vnd.bokehjs_exec.v0+json":""},"exec_count":28,"metadata":{"application/vnd.bokehjs_exec.v0+json":{"id":"1003"}},"output_type":"execute_result"}},"pos":108,"type":"cell"}
{"cell_type":"code","exec_count":29,"id":"ed750d","input":"import bokeh\nbokeh.__version__","output":{"0":{"data":{"text/plain":"'2.2.3'"},"exec_count":29,"output_type":"execute_result"}},"pos":109,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"af51b1","input":"# CP-SAT solution\n\n# Create the model\nmodel = cp_model.CpModel()\n\n# Create the variables\nx1 = model.NewIntVar(1,2,'x1')\nx2 = model.NewIntVar(1,2,'x2')\nx3 = model.NewIntVar(1,3,'x3')\nx4 = model.NewIntVar(1,5,'x4')\n\n# Create the constraints\nmodel.Add(x1 + x3 == 4)\nmodel.AddAllDifferent([x1,x2,x3,x4])\n\n# print model if desired - limited usefulness\n# print(model.Proto())\n\n# Create a solver and solve the model.\nsolver = cp_model.CpSolver()\nstatus = solver.Solve(model)\n\n# the solver stops when it finds a feasible solution\nif status == cp_model.OPTIMAL:\n    print('A feasible solution is:')\n    for x in [x1,x2,x3,x4]:\n        print(f'{x} = {solver.Value(x)}')","metadata":{"code_folding":[0],"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"A feasible solution is:\nx1 = 1\nx2 = 2\nx3 = 3\nx4 = 4\n"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"b2a13a","input":"\"\"\"Simple travelling salesman problem between cities.\"\"\"\n\n# imports at top of notebook!\n\ndef create_data_model():\n    # load data (this may have to be adapted for different problems)\n    with open(\"data/Caps48.json\", \"r\") as tsp_data:\n        tsp = json.load(tsp_data)\n    \"\"\"Stores the data for the problem.\"\"\"\n    data = {}\n    data['distance_matrix'] = tsp[\"DistanceMatrix\"]\n    data['num_vehicles'] = 1\n    data['depot'] = 0\n    return data\n\ndef print_solution(manager, routing, assignment):\n    \"\"\"Prints assignment on console.\"\"\"\n    print('Objective: {} km'.format(assignment.ObjectiveValue()/1000))\n    index = routing.Start(0)\n    plan_output = 'Route for vehicle 0:\\n'\n    route_distance = 0\n    while not routing.IsEnd(index):\n        plan_output += ' {} ->'.format(manager.IndexToNode(index))\n        previous_index = index\n        index = assignment.Value(routing.NextVar(index))\n        route_distance += routing.GetArcCostForVehicle(previous_index, index, 0)\n    plan_output += ' {}\\n'.format(manager.IndexToNode(index))\n    print(plan_output)\n    plan_output += 'Route distance: {}kilometers\\n'.format(route_distance/1000)\n\n# Instantiate the data problem.\ndata = create_data_model()\n\n# Create the routing index manager.\nmanager = pywrapcp.RoutingIndexManager(len(data['distance_matrix']),\n                                       data['num_vehicles'], data['depot'])\n\n# Create Routing Model.\nrouting = pywrapcp.RoutingModel(manager)\n\ndef distance_callback(from_index, to_index):\n    \"\"\"Returns the distance between the two nodes.\"\"\"\n    # Convert from routing variable Index to distance matrix NodeIndex.\n    from_node = manager.IndexToNode(from_index)\n    to_node = manager.IndexToNode(to_index)\n    return data['distance_matrix'][from_node][to_node]\n\ntransit_callback_index = routing.RegisterTransitCallback(distance_callback)\n\n# Define cost of each arc.\nrouting.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)\n\n# Setting first solution heuristic.\nsearch_parameters = pywrapcp.DefaultRoutingSearchParameters()\nsearch_parameters.first_solution_strategy = (\n    routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC)\n\nsearch_parameters.local_search_metaheuristic = (\nrouting_enums_pb2.LocalSearchMetaheuristic.GUIDED_LOCAL_SEARCH)\nsearch_parameters.time_limit.seconds = 10\nsearch_parameters.log_search = True\n\n# Solve the problem.\nassignment = routing.SolveWithParameters(search_parameters)\n\n# Print solution on console.\nif assignment:\n    print_solution(manager, routing, assignment)","metadata":{"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"Objective: 17395.494 km\nRoute for vehicle 0:\n 0 -> 7 -> 37 -> 30 -> 43 -> 17 -> 6 -> 27 -> 5 -> 36 -> 18 -> 26 -> 16 -> 42 -> 29 -> 35 -> 45 -> 32 -> 14 -> 11 -> 19 -> 46 -> 10 -> 22 -> 13 -> 24 -> 12 -> 20 -> 31 -> 38 -> 47 -> 4 -> 41 -> 23 -> 9 -> 44 -> 34 -> 3 -> 25 -> 1 -> 28 -> 33 -> 40 -> 15 -> 21 -> 2 -> 39 -> 8 -> 0\n\n"}},"pos":114,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"68a859","input":"# execute this cell for video\nplay_video(\"ds775_lesson7-finding-all-feasible-solutions\")","metadata":{"code_folding":[],"hidden":true},"output":{"0":{"data":{"text/html":"\n        <iframe\n            width=\"640\"\n            height=\"360\"\n            src=\"https://media.uwex.edu/content/ds/ds775_r19/ds775_lesson7-finding-all-feasible-solutions/index.html\"\n            frameborder=\"0\"\n            allowfullscreen\n        ></iframe>\n        ","text/plain":"<IPython.lib.display.IFrame at 0x7f9d6dd81a60>"},"exec_count":4,"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"f213b8","input":"# solution printer\n\nclass VarArraySolutionPrinter(cp_model.CpSolverSolutionCallback):\n    \"\"\"Print intermediate solutions.\"\"\"\n\n    def __init__(self, variables):\n        cp_model.CpSolverSolutionCallback.__init__(self)\n        self.__variables = variables\n        self.__solution_count = 0\n\n    def on_solution_callback(self):\n        self.__solution_count += 1\n        for v in self.__variables:\n            print(f'{v} = {self.Value(v)}', end = ' ')\n        print()\n\n    def solution_count(self):\n        return self.__solution_count","pos":17,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"21f14f","input":"# find all the solutions\n\n# Creates the model.\nmodel = cp_model.CpModel()\n\nx1 = model.NewIntVar(1,2,'x1')\nx2 = model.NewIntVar(1,2,'x2')\nx3 = model.NewIntVar(1,3,'x3')\nx4 = model.NewIntVar(1,5,'x4')\n\n# Creates the constraints.\nmodel.Add(x1 + x3 == 4)\nmodel.AddAllDifferent([x1,x2,x3,x4])\n\n# Creates a solver and solves the model.\nsolver = cp_model.CpSolver()  # it wasn't really necessary to redo any of the above code\nsolution_printer = VarArraySolutionPrinter([x1,x2,x3,x4])\nstatus = solver.SearchForAllSolutions(model, solution_printer)\n\nprint(f'Status = {solver.StatusName(status)}')\nprint(f'Number of solutions found: {solution_printer.solution_count()}')","metadata":{"code_folding":[]},"output":{"0":{"name":"stdout","output_type":"stream","text":"x1 = 1 x2 = 2 x3 = 3 x4 = 4 \nx1 = 1 x2 = 2 x3 = 3 x4 = 5 \nStatus = OPTIMAL\nNumber of solutions found: 2\n"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"b92193","input":"# concrete cp-sat code\n\n# Create the model\nmodel = cp_model.CpModel()\n\n# Create the variables\nx1 = model.NewIntVar(1,2,'x1')\nx2 = model.NewIntVar(1,2,'x2')\nx3 = model.NewIntVar(1,3,'x3')\nx4 = model.NewIntVar(1,5,'x4')\n\n# Create the constraints\nmodel.Add(x1 + x3 == 4)\nmodel.AddAllDifferent([x1,x2,x3,x4])\n\n# Add a linear objective function\nmodel.Minimize(10*x1 - 2*x2 + 20*x3 - x4)\n\n# Create a solver and solve the model.\nsolver = cp_model.CpSolver()\nstatus = solver.Solve(model)\n\n# the solver stops when it finds a feasible solution\nif status == cp_model.OPTIMAL:\n    print(f'The minimum value of the objective function is {solver.ObjectiveValue()}')\n    print()\n    for x in [x1,x2,x3,x4]:\n        print(f'{x} = {solver.Value(x)}')","metadata":{"code_folding":[]},"output":{"0":{"name":"stdout","output_type":"stream","text":"The minimum value of the objective function is 61.0\n\nx1 = 1\nx2 = 2\nx3 = 3\nx4 = 5\n"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"e1c38a","input":"# execute this cell for video\nplay_video(\"ds775_lesson7-using-lists-to-generalize\")","metadata":{"hidden":true},"output":{"0":{"data":{"text/html":"\n        <iframe\n            width=\"640\"\n            height=\"360\"\n            src=\"https://media.uwex.edu/content/ds/ds775_r19/ds775_lesson7-using-lists-to-generalize/index.html\"\n            frameborder=\"0\"\n            allowfullscreen\n        ></iframe>\n        ","text/plain":"<IPython.lib.display.IFrame at 0x7f9d6ddb15b0>"},"exec_count":8,"output_type":"execute_result"}},"pos":31,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"52ce5d","input":"# generalizable cp-sat code\n\n\"\"\"Minimal CP-SAT example to showcase calling the solver.\"\"\"\n# Creates the model.\nmodel = cp_model.CpModel()\n\n# Creates the variables.\nbounds = [[1,2],[1,2],[1,3],[1,5]]\nnum_vars = 4\nx = [model.NewIntVar(bounds[i][0], bounds[i][1], f'x{i}') for i in range(num_vars)]\nxsq = [ (model.NewIntVar(bounds[i][0]**2,bounds[i][1]**2,f'xsq{i}') for i in range(num_vars))]\n# note we now have x[0],...,x[3] instead of x1,...,x4\n\n# Creates the constraints.\nmodel.Add(x[0]+x[2]==4)\nmodel.AddAllDifferent(x)\n\n# for i in range(num_vars):\n#     model.AddMulitp....(xsq[i],[x[i],x[i]])\n                       \n# Add an objective function and a direction, need not be linear\ncoef = [10,-2,20,-1]\nmodel.Minimize(sum(coef[i]*x[i] for i in range(num_vars)))\n\n# Creates a solver and solves the model.\nsolver = cp_model.CpSolver()\nstatus = solver.Solve(model)\n\nif status == cp_model.OPTIMAL:\n    print('Minimum of objective function: %i' % solver.ObjectiveValue())\n    print()\n    for i in range(num_vars):\n        print(f'x{i} = {solver.Value(x[i])}')","metadata":{"code_folding":[0],"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"Minimum of objective function: 61\n\nx0 = 1\nx1 = 2\nx2 = 3\nx3 = 5\n"}},"pos":33,"type":"cell"}
{"cell_type":"markdown","id":"001421","input":"Before showing how the element constraint can be used to solve assignment problems we'll show how to use it to pick values from sets as we did earlier for this problem:\n\nMaximize $x+y$\n\nSubject to: \n\n$x \\in \\{ 5, 10, 20\\}, y \\in \\{ 3, 7, 12\\}$\n\n$x+y \\leq 30$.\n\nThe previous Python solution is better than this one, but we're including this to illustrate how the element constraint works.  We'll use two main decision variables `x_idx` and `y_idx` whose job is to specify which element of $x$ and $y$ to use.","metadata":{"hidden":true},"pos":60,"type":"cell"}
{"cell_type":"markdown","id":"007561","input":"Maximize $x+y$\n\nSubject to: \n\n$x \\in \\{ 5, 10, 20\\}, y \\in \\{ 3, 7, 12\\}$\n\n$x+y \\leq 30$\n\nHere is a concrete implementation of a solution:","metadata":{"hidden":true},"pos":45,"type":"cell"}
{"cell_type":"markdown","id":"00b952","input":"## Video","metadata":{"heading_collapsed":true},"pos":6,"type":"cell"}
{"cell_type":"markdown","id":"0188ff","input":"<font size=16>Lesson 07: Constraint Programming</font>","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"0267e6","input":"# A Map Coloring Example","metadata":{"heading_collapsed":true},"pos":36,"type":"cell"}
{"cell_type":"markdown","id":"03d5f8","input":"If the tasks were done in succession the total time would be 145, but by allowing tasks to overlap where possible we reduced the total time to 90.  However, we really didn't enjoy typing out all of those variables and constraints individually, this problem really should be formulated abstractly for anything more than a few tasks.","pos":99,"type":"cell"}
{"cell_type":"markdown","id":"043389","input":"Now we can display the total schedule and its length:","pos":97,"type":"cell"}
{"cell_type":"markdown","id":"0cd543","input":"We'll look at the example below and see how it gets solved in with CP-SAT with Python.\n\nFind a feasible solution with the following constraints:\n\n$x_1 \\in \\left\\{ 1, 2 \\right\\}$ \n\n$x_2 \\in \\left\\{ 1, 2 \\right\\}$ \n\n$x_3 \\in \\left\\{ 1, 2, 3 \\right\\}$\n\n$x_4 \\in \\left\\{ 1, 2, 3, 4, 5 \\right\\}$ \n\n$x_1 + x_3 = 4$ \n\n$x_1, x_2, x_3, x_4$ are all different.\n\nNote, we aren't trying to optimize anything here.  Instead we're just focused on finding a feasible solution.  Also, notice that the last constraint requiring the 4 variables to have different values is something we haven't seen before.  It could be done in integer programming by using a bunch of inequalities, but the elegance of constraint programming is that can often make it quite simple to declare complicated constraints.\n\nThe all-different constraint is an example of a constraint that would be difficult in an integer program, but is one line in a constraint program as we'll see in the next section. \n\nHere is a video that discusses this problem, how constraint programming works, and introduces the solution code:","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"129ce2","input":"We first solved this problem in Homework 3:\n\nThe coach of an age group swim team needs to assign swimmers to a 200-yard medley relay team to send to the Junior Olympics. Since most of his best swimmers are very fast in more than one stroke, it is not clear which swimmer should be assigned to each of the four strokes. The five fastest swimmers and the best times (in seconds) they have achieved in each of the strokes (for 50 yards) are\n\n<img src = \"images/swim.png\" width=\"500\">\n\nThe coach wishes to determine how to assign four swimmers to the four different strokes to minimize the sum of the corresponding best times.  \n\nUse a generalizable approach constraint programming to solve this problem.  Be sure to identify both the minimum total time and the swimmer assignments.  For CP-SAT the variables must be integers so you'll need to multiply the times by 10 so that they're integers and then divide the total time by 10 to report the result.","metadata":{"hidden":true},"pos":77,"type":"cell"}
{"cell_type":"markdown","id":"15476f","input":"### Video","metadata":{"hidden":true},"pos":30,"type":"cell"}
{"cell_type":"markdown","id":"15644d","input":"## *Self Assessment: Add a task*","metadata":{"heading_collapsed":true},"pos":110,"type":"cell"}
{"cell_type":"markdown","id":"19b987","input":"### *Self Assessment: Generalizable code with CP-SAT*","metadata":{"heading_collapsed":true,"hidden":true},"pos":34,"type":"cell"}
{"cell_type":"markdown","id":"19f2b2","input":"### *Self Assessment: Textbook Problem 9.3-4*","metadata":{"heading_collapsed":true},"pos":76,"type":"cell"}
{"cell_type":"markdown","id":"1f14e4","input":"### Code","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"237e72","input":"The objective is to make the shortest schedule which we can do my minimizing the largest end time.  To do this we create a new objective variable and use the `AddMaxEquality` constraint to set it equal to the maximum of the end times for all of the jobs.  Note that everything we've done to this point in this problem is just integer programming and could be handled by Pyomo, but Pyomo couldn't handle the objective function:","pos":93,"type":"cell"}
{"cell_type":"markdown","id":"2434bb","input":"# Introduction","metadata":{"heading_collapsed":true},"pos":2,"type":"cell"}
{"cell_type":"markdown","id":"2730f8","input":"## Finding an optimal value","pos":22,"type":"cell"}
{"cell_type":"markdown","id":"2c68a9","input":"When we write this in a more general way we'll introduce interval variables and \"no-overlap\" constraints.  Now the precedence constraints:","pos":91,"type":"cell"}
{"cell_type":"markdown","id":"315968","input":"## An Assignment Problem","pos":66,"type":"cell"}
{"cell_type":"markdown","id":"328b80","input":"Even though the focus of constraint programming is finding feasible solutions it can find optimal values of an objective function by comparing the values of the objective function for all feasible solutions.  This can be a slow process if there are too many feasible solutions.  There are a variety of ways to do an incomplete search.  If you're curious to learn more have a look at <a href=\"https://ktiml.mff.cuni.cz/~bartak/podminky/lectures/CSP-lecture09eng.pdf\">these lecture slides</a> as a starting point.\n\nAs an example we'll add an objective to the problem we developed above:\n\n\nMinimize $ 10 x_1 - 2 x_2 + 20 x_3 - x_4$\n\nSubject to:\n\n$x_1 \\in \\left\\{ 1, 2 \\right\\}, x_2 \\in \\left\\{ 1, 2 \\right\\}, x_3 \\in \\left\\{ 1, 2, 3 \\right\\}, x_4 \\in \\left\\{ 1, 2, 3, 4, 5 \\right\\}$ \n\n$x_1 + x_3 = 4$ \n\n$x_1, x_2, x_3, x_4$ are all different.\n\nAdding the code is pretty simple as we just have to add the objective and an extra line to display its optimized value:","pos":23,"type":"cell"}
{"cell_type":"markdown","id":"3482cd","input":"### Video","metadata":{"heading_collapsed":true,"hidden":true},"pos":61,"type":"cell"}
{"cell_type":"markdown","id":"35c797","input":"### Code for Concrete Approach\n\n**Important Note:** This code is configured for an assignment problem in which we need to assign one element within each row.  If you want to apply this to a problem in which you need to assign one element within each column then transpose the original data table to make it into a \"one per row\" problem ... this occurs where the nested list is formed for `cost` in this problem.","pos":71,"type":"cell"}
{"cell_type":"markdown","id":"3a4924","input":"## Using a list of variables to abstract and generalize","metadata":{"heading_collapsed":true},"pos":27,"type":"cell"}
{"cell_type":"markdown","id":"3c9bce","input":"## *Self Assessment: Add your own quadratic term*","metadata":{"heading_collapsed":true},"pos":55,"type":"cell"}
{"cell_type":"markdown","id":"4033b7","input":"First we initialize the model and create variables for the start times of each task.  To make the range of the variables adequately large we initialize them with the total time required if all the tasks were done without overlap.  There is a video at the beginning of the next section.","pos":85,"type":"cell"}
{"cell_type":"markdown","id":"47fb67","input":"The element constraint allows us to use decision variables as indices to arrays.  It is discussed on page 529 and the syntax in CP-SAT is very similar.  ","pos":58,"type":"cell"}
{"cell_type":"markdown","id":"4cbfcd","input":"Use CP-SAT to print out all of the feasible solutions to \n\n$x \\neq y$\n\nFor $x,y,z \\in \\{0,1,2\\}.$","metadata":{"hidden":true},"pos":21,"type":"cell"}
{"cell_type":"markdown","id":"593249","input":"### Code","metadata":{"heading_collapsed":true,"hidden":true},"pos":64,"type":"cell"}
{"cell_type":"markdown","id":"5a49d2","input":"# Example:  Including Nonlinear Terms in the Objective","pos":51,"type":"cell"}
{"cell_type":"markdown","id":"5d730a","input":"Below we present a version of the solution that can be easily generalized to a large number of countries or regions.  To represent the adjacencies between countries we've used what is called an adjacency matrix where a 1 indicates two countries are adjacent and a 0 indicates they are not.  We can consider countries adjacent to themselves or not, but it doesn't matter since we don't use the information from the diagonal of the matrix.  The adjacencies could also be specified using a list of adjacent pairs, or with a dictionary, or ...","metadata":{"hidden":true},"pos":39,"type":"cell"}
{"cell_type":"markdown","id":"6050f5","input":"The code below is mostly a repeat of the code above, but everything beginning with `solution_printer` is new (line 17).  Notice we initialize the solution printer with a list of the variables that we want to print as CP-SAT finds each solution.","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"64e4d3","input":"For our purposes this isn't a very important example and we're not going to have you do something like it for the homework, but it's a fun application of constraint programming.  \n\n<img src=\"./images/europe_countries.png\" width=400>\n\nHow do we select the colors for regions on a map so that adjacent regions don't have the same colors?  A now famous theorem in mathematics called the <a href=\"https://en.wikipedia.org/wiki/Four_color_theorem\">four color theorem</a> states that we can always do it with no more than 4 colors provided adjacency means that regions touch along an edge not just at a corner.  The theorem is famous because it is the first major theorem to be proved by computer.  The theorem tells us it can be done, but it doesn't tell us how to do it.  It's a relatively easy application of constraint programming to find a feasible coloring.\n\nHere is a concrete version of the code to find a coloring for 6 adjacent European countries:","metadata":{"hidden":true},"pos":37,"type":"cell"}
{"cell_type":"markdown","id":"66e61a","input":"### *Self Assessment: Find a feasible solution.*","metadata":{"hidden":true},"pos":10,"type":"cell"}
{"cell_type":"markdown","id":"6b196e","input":"Now we could use only these variables and build the task durations right into the precedence constraints, it is convenient and better for generalization to introduce variables for the end times of the tasks.","pos":87,"type":"cell"}
{"cell_type":"markdown","id":"775d17","input":"## CP-SAT solution","metadata":{"heading_collapsed":true},"pos":8,"type":"cell"}
{"cell_type":"markdown","id":"785b2a","input":"### Video","metadata":{"heading_collapsed":true,"hidden":true},"pos":101,"type":"cell"}
{"cell_type":"markdown","id":"78c7ca","input":"## Using the Element Constraint to Choose Values from Lists","metadata":{"heading_collapsed":true},"pos":59,"type":"cell"}
{"cell_type":"markdown","id":"7c19f0","input":"### *Self Assessment: Optimizing a linear objective function with CP-SAT*","metadata":{"heading_collapsed":true},"pos":25,"type":"cell"}
{"cell_type":"markdown","id":"840c95","input":"###  *Self Assessment: Finding all feasible solutions.*","metadata":{"heading_collapsed":true},"pos":20,"type":"cell"}
{"cell_type":"markdown","id":"8446e1","input":"## A Generalizable CP-SAT solution","metadata":{"heading_collapsed":true},"pos":100,"type":"cell"}
{"cell_type":"markdown","id":"850323","input":"## A concrete CP-SAT solution","pos":84,"type":"cell"}
{"cell_type":"markdown","id":"89f3f3","input":"Solve the model:","pos":95,"type":"cell"}
{"cell_type":"markdown","id":"8c1029","input":"## A Housebuilding Example","pos":82,"type":"cell"}
{"cell_type":"markdown","id":"8d00ff","input":"Similarly we can use the element constraint to look up costs or profits associated with assigning workers to jobs or machines to locations as in the Job Shop Co. problem described on pages 348-350 of the textbook.  In that problem we have to assign each of 3 machines to one of 4 different locations.  Each machine can only be in one location and machine 2 can't be assigned to location 2.  There is a cost associated with each assignment and we want to minimize the total cost of placing the 3 machines.\n\n*To use the element constraint for an assignment problem you should assign the elements of the smaller set.  In this problem for example, we'll assign 3 machines to 4 locations.  If we were to assign 4 locations to 3 machines, then we'd need an extra \"dummy\" machine.*\n\nWe will have one decision variable for each machine whose job it is to specify the location of the machine.  We'll use the element constraint to look up the costs and we'll use the all-different constraint to make sure the 3 machines are assigned to different locations.  Here are the costs (table is from page 349):\n\n<img src = \"./images/job_shop_cost_table.png\" width = 400>\n\nWe'll use a \"bigM\" value of 99 to avoid assigning Machine 2 to Location 2.","pos":67,"type":"cell"}
{"cell_type":"markdown","id":"90dbc1","input":"If you think it through, you'll see that the solution is correct!","pos":54,"type":"cell"}
{"cell_type":"markdown","id":"976817","input":"Suppose we take the previous example and tweak the objective to include a quadratic term so that it now looks like this:\n\nMaximize $x-y^2$\n\nSubject to: \n\n$x \\in \\{ 5, 10, 20\\}, y \\in \\{ 3, 7, 12\\}$\n\n$x+y \\leq 30.$$\n\nIf we were to take the code from the previous section and change the objective to:\n\n`model.Maximize(x - y**2)` \n\nwe'd get an error telling us that the objective function contains nonlinear terms!\n\nThere's a simple way around this.  Just add an extra variable to represent the quantity $y^2$, say `ysq` and then an additional special constraint that enforces `ysq == y*y`.  Here's the code:","pos":52,"type":"cell"}
{"cell_type":"markdown","id":"978e1e","input":"Use CP-SAT to find a feasible solution to \n\n$x \\neq y$\n\nFor $x,y,z \\in \\{0,1,2\\}.$","metadata":{"hidden":true},"pos":11,"type":"cell"}
{"cell_type":"markdown","id":"97b884","input":"This one is a continuation from the previous problem and is a bit of a challenge to learn something on your own.  \n\nSuppose the coach decides that for the next swim meet Ken will be on the relay even if the total time is larger than before.  Add an extra constraint to the code so that all variable assignments that exclude Ken are not allowed.\n\nUse the `AddForbiddenAssignments` constraint to forbid all assignments that exclude Ken.  You can look it up in the <a href=\"https://developers.google.com/optimization/reference/python/sat/python/cp_model\">reference manual for CP-SAT.</a>  The assignments you need to exclude are those that include only the swimmers 0,1,2, and 3 so you'll need a list of all permutations of those four numbers.  Look up `permutations` in the `itertools` package and remember to convert the `itertools` object to a list of permutations with `list`.","metadata":{"hidden":true},"pos":79,"type":"cell"}
{"cell_type":"markdown","id":"a8b8f3","input":"### Code","metadata":{"heading_collapsed":true,"hidden":true},"pos":32,"type":"cell"}
{"cell_type":"markdown","id":"a9fc59","input":"### Code for Abstract Approach","metadata":{"heading_collapsed":true},"pos":73,"type":"cell"}
{"cell_type":"markdown","id":"abc3ee","input":"## *Self Assessment: Using Sets and All-Different*","metadata":{"heading_collapsed":true,"hidden":true},"pos":47,"type":"cell"}
{"cell_type":"markdown","id":"ad1c58","input":"A horizontal bar-like graph called a Gantt chart is often used to visualize scheduled tasks:","metadata":{"hidden":true},"pos":107,"type":"cell"}
{"cell_type":"markdown","id":"b0066c","input":"# Example - Using Sets of Values","metadata":{"heading_collapsed":true},"pos":43,"type":"cell"}
{"cell_type":"markdown","id":"b03c90","input":"### *Self Assessment: Ken must swim!*","metadata":{"heading_collapsed":true},"pos":78,"type":"cell"}
{"cell_type":"markdown","id":"b1a4f5","input":"### Video","pos":68,"type":"cell"}
{"cell_type":"markdown","id":"b4fa79","input":"# The Element Constraint and Assignment Problems","pos":57,"type":"cell"}
{"cell_type":"markdown","id":"b6c5e5","input":"This is a tweaked version of the self-assessment from the previous section with the objective function changed to include a quadratic term.\n\nMaximize:  $10 x_1 + 2 x_2 - x_3^2$\n\nSubject to\n\n$x_1 \\in \\left\\{10, 20, 30\\right\\}$\n\n$x_2 \\in \\left\\{20, 30, 40\\right\\}$\n\n$x_3 \\in \\left\\{10, 30, 50\\right\\}$\n\n$x_1, x_2,$ and $x_3$ are all different.\n\nWrite code to use CP-SAT to solve this problem.  Concrete code or generalizable code is fine.  Our solution is written concretely, but it wouldn't be hard to create an extra list of variables to contain all the quadratic variables and then use a loop to add all the necessary `MultiplicationEquality` constraints to make generalizable code.","metadata":{"hidden":true},"pos":56,"type":"cell"}
{"cell_type":"markdown","id":"b7a211","input":"Use CP-SAT and lists write generalizable code to solve:\n\nMinimize $ 10 x_1 - 2 x_2 + 20 x_3 - x_4$\n\nSubject to:\n\n$x_1 \\in \\left\\{ 1, 2 \\right\\}, x_2 \\in \\left\\{ 1, 2 \\right\\}, x_3 \\in \\left\\{ 1, 2, 3 \\right\\}, x_4 \\in \\left\\{ 1, 2, 3, 4, 5 \\right\\}$ \n\n$x_1 + x_3 = 4$ \n\n$x_1, x_2, x_3, x_4$ are all different.\n\nBelow we create a list of variables and frame the constraints and objective function using indices to access the variables in the list.  Here is a brief video walkthrough of the code followed by the code:","metadata":{"hidden":true},"pos":29,"type":"cell"}
{"cell_type":"markdown","id":"bb3077","input":"# Traveling Salesman Problem","metadata":{"heading_collapsed":true},"pos":112,"type":"cell"}
{"cell_type":"markdown","id":"bbf043","input":"## *Self Assessment: How many different ways to color?*","metadata":{"heading_collapsed":true,"hidden":true},"pos":41,"type":"cell"}
{"cell_type":"markdown","id":"bd67db","input":"Use CP-SAT to\n\nMaximize $x + 2y + 3z$ \n\nSubject to:\n\n$x \\neq y$\n\nFor $x,y,z \\in \\{0,1,2\\}.$","metadata":{"hidden":true},"pos":26,"type":"cell"}
{"cell_type":"markdown","id":"c0c929","input":"We can create lists of variables using list comprehensions to make it easier to solve large problems.  Here is how we could setup the problem above using generalizable code.","metadata":{"hidden":true},"pos":28,"type":"cell"}
{"cell_type":"markdown","id":"c68106","input":"Find all the feasible solutions with four colors to determine how many different ways there are to color the map using the same four colors.","metadata":{"hidden":true},"pos":42,"type":"cell"}
{"cell_type":"markdown","id":"ce8082","input":"This section is here just for fun and you needn't worry about solving a TSP for this lesson.  The Google or-tools package has tools for routing problems that are built on top of CP-SAT.  In particular they solve the TSP problems by a combination of a heuristic first search (like two-opt for instance) followed by some kind of local search.\n\nTo learn more visit the or-tools documentation.  We <a href=\"https://developers.google.com/optimization/routing/tsp\">adapted the code from here</a> to solve the 48 capitals TSP we've seen previously.  Run the code below to see it come up with what we think is the optimal solution in about 30 seconds:","metadata":{"hidden":true},"pos":113,"type":"cell"}
{"cell_type":"markdown","id":"cf32cd","input":"Now solve the same problem as in the previous self assessment, but write generalizable code that could be easily employed to solve a large model.  \nYou may which to use a dictionary to store the sets for each variable like this:\n    \n`sets_dict = { 'x1':[10,20,30], 'x2':[20,30,40], 'x3':[10,30,50]}`\n\nYou'll have to loop over the dictionary keys (`sets_dict.keys()`) in your list comprehension to declare the variables.","metadata":{"hidden":true},"pos":50,"type":"cell"}
{"cell_type":"markdown","id":"d01367","input":"Here is a brief video discussing the element constraint and the code below:","metadata":{"hidden":true},"pos":62,"type":"cell"}
{"cell_type":"markdown","id":"d4bf4f","input":"## *Self Assessment: Generalizable Use of Sets*","metadata":{"heading_collapsed":true,"hidden":true},"pos":49,"type":"cell"}
{"cell_type":"markdown","id":"d5171c","input":"Many discrete or combinatorial optimization problems don't exactly fit the integer programming paradigm with linear constraints and and a linear objective function as we'll see with several examples below.  Moreover, the constraints can be both many and complicated.  Constraint programming concentrate more on feasibility than on optimization and can deal with many different constraints that aren't available in standard integer programming.\n\nYou should read the introductory material on pages 525-531.  In particular we'll use both the element and all-different constraints discussed in the text which are both unlike constraints we've seen before.  For programming we'll be using CP-SAT (Constraint Programming - SATisfiability) by Google.  It's written in C++, but has an API that is part of the or-tools package which you can install using `pip install ortools` (there doesn't appear to be a conda install option).  \n\nWe'll start by looking at the example introduced on page 526.  We'll use it to introduce several ideas.","metadata":{"hidden":true},"pos":3,"type":"cell"}
{"cell_type":"markdown","id":"db464a","input":"In the example above our variables each took values in a range.  If we instead want to specify a list of possible values then we can use the construction in the following example which uses CP-SAT's concept of domains. Note:  the only substantive change in the code here is how we declare the variables, otherwise it's just like the previous examples.","metadata":{"hidden":true},"pos":44,"type":"cell"}
{"cell_type":"markdown","id":"df2296","input":"# Scheduling Problems","pos":80,"type":"cell"}
{"cell_type":"markdown","id":"e0f57c","input":"### Video","metadata":{"heading_collapsed":true},"pos":14,"type":"cell"}
{"cell_type":"markdown","id":"e2dd00","input":"Maximize:  $10 x_1 + 2 x_2 - x_3$\n\nSubject to\n\n$x_1 \\in \\left\\{10, 20, 30\\right\\}$\n\n$x_2 \\in \\left\\{20, 30, 40\\right\\}$\n\n$x_3 \\in \\left\\{10, 30, 50\\right\\}$\n\n$x_1, x_2,$ and $x_3$ are all different. (You'll need the `AddAllDifferent` constraint used in one of the previous examples.)","metadata":{"hidden":true},"pos":48,"type":"cell"}
{"cell_type":"markdown","id":"e36e78","input":"The end time minus the start time of task must equal the duration of the task.  This can be handled by adding equality constraints:","pos":89,"type":"cell"}
{"cell_type":"markdown","id":"e58d5c","input":"Suppose there is an additional housebuilding task to be included.  The \"insulation\" task has duration 15 and must be done before ceiling and after carpentry, and plumbing.  Add this task and compute the new schedule.  Use the generalizable code to add this task and also make a Gantt chart to visualize the new schedule. *Hopefully this will help convince you of the power of writing generalizable code!*","metadata":{"hidden":true},"pos":111,"type":"cell"}
{"cell_type":"markdown","id":"e6e84f","input":"## Finding all feasible solutions","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"e76eae","input":"Write code that can be easily extended to a larger problem to solve:\n\nMaximize $x + 2y + 3z$ \n\nSubject to:\n\n$x \\neq y$\n\nFor $x,y,z \\in \\{0,1,2\\}.$","metadata":{"hidden":true},"pos":35,"type":"cell"}
{"cell_type":"markdown","id":"e8e361","input":"A common application for constraint programming is to generate feasible schedules of workers to shifts, sports league play schedules, processing jobs to machines, etc.  Often constraint programming tools have special functionality built in to facilitate scheduling problems.  \n\nWe'll explore a simple example below, but if you wish to see more examples you could explore the <a href=\"https://developers.google.com/optimization/scheduling\">CP-SAT documention on scheduling problems.</a>","pos":81,"type":"cell"}
{"cell_type":"markdown","id":"eb9671","input":"## Visualizing a Schedule","metadata":{"heading_collapsed":true},"pos":106,"type":"cell"}
{"cell_type":"markdown","id":"ebb99e","input":"Here is a brief video discussing the code below:","pos":69,"type":"cell"}
{"cell_type":"markdown","id":"ecc94e","input":"Here is a video to introduce the elements of the generalizable code.","metadata":{"hidden":true},"pos":102,"type":"cell"}
{"cell_type":"markdown","id":"f08b2a","input":"# Textbook Example 1 (page 526)","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"f6d6b1","input":"### Code","metadata":{"heading_collapsed":true,"hidden":true},"pos":104,"type":"cell"}
{"cell_type":"markdown","id":"f8988b","input":"That's pretty neat!","metadata":{"hidden":true},"pos":115,"type":"cell"}
{"cell_type":"markdown","id":"fb9694","input":"Sometimes we need to collect all of the feasible solutions.  This can be done by telling the solver to search for all of the solutions and then using a callback method to print or record them.  We'll just print them.  First we create a solution printer class that contains a callback method which gets executed by the solver as it enumerates the solutions.  In this case it just updates a counter and prints all of values of the variables we specify.  You can use this without change for other problems.","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"fd822d","input":"You can see in the code above that many lines of code are essentially repeated three times.  Imagine if there 100 assignments or more, then the code above would be really gross.  We present an abstracted version of the code below that can be easily generalized to larger or different problems.\n\n**Important Note:** This code is configured for an assignment problem in which we need to assign one element within each row.  If you want to apply this to a problem in which you need to assign one element within each column then transpose the original data table to make it into a \"one per row\" problem ... this occurs where the nested list is formed for `cost` in this problem.","metadata":{"hidden":true},"pos":74,"type":"cell"}
{"cell_type":"markdown","id":"ff9756","input":"We have a housebuilding problem in which there are 10 tasks of fixed size, each of which needs to be assigned a starting time in such a way as to minimize the total time.  Moreover, there are precedence constraints wherein some tasks must be completed before others are started.  The table below summarizes the durations and precedence constraints: \n\ntask | duration | must be done before\n---- | ---- | ----\nmasonry | 35 | carpentry, plumbing, ceiling\ncarpentry | 15 | roofing\nplumbing | 40| facade, garden\nceiling | 15 | painting\nroofing | 5 | windows, facade, garden\npainting | 10 | moving\nwindows | 5 | moving\nfacade | 10 | moving\ngarden | 5 | moving\nmoving | 5 |\n\nWe'll lay out how to do this with CP-SAT in a very concrete way first, then we'll code it in a way that could be generalized to other problems.  We include a video with the generalizable code in section 7.3.","pos":83,"type":"cell"}
{"id":0,"time":1610056941335,"type":"user"}
{"last_load":1610056941727,"type":"file"}