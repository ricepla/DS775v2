{"backend_state":"init","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{},"toc_section_display":true,"toc_window_display":false}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"774ece","input":"# here are the possible status values after calling solver\nfrom ortools.sat.python import cp_mode\n\nprint(\"status OPTIMAL\", cp_model.OPTIMAL)\nprint(\"status FEASIBLE\", cp_model.FEASIBLE)\nprint(\"status INFEASIBLE\", cp_model.INFEASIBLE)\nprint(\"status MODEL_INVALID\", cp_model.MODEL_INVALID)\nprint(\"status UNKNOWN\", cp_model.UNKNOWN)","pos":0,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"f410e4","input":"import pandas as pd\n\nswimmers = ['Carl', 'Chris', 'David', 'Tony', 'Ken']\nstrokes = ['backstroke', 'breaststroke', 'butterfly', 'freestyle']\n# multiplied by 10 to get integers\nswimmer_times = [[377, 329, 338, 370, 354], \n                 [434, 331, 422, 347, 418],\n                 [333, 285, 389, 304, 335], \n                 [292, 264, 296, 285, 311]]\n\nnum_strokes = len(swimmer_times)\nnum_swimmers = len(swimmer_times[0])\n\nfrom ortools.sat.python import cp_model\n\n# Create the model.\nmodel = cp_model.CpModel()\n\nassign = [\n    model.NewIntVar(0, num_swimmers - 1, strokes[i])\n    for i in range(num_strokes)\n]\ntime = [model.NewIntVar(0, 500, f'time{i}') for i in range(num_strokes)]\n\nmodel.AddAllDifferent(assign)\nfor i in range(num_strokes):\n    model.AddElement(assign[i], swimmer_times[i], time[i])\n\nmodel.Minimize(sum(time))\n\n# Creates a solver and solves the model.\nsolver = cp_model.CpSolver()\nstatus = solver.Solve(model)\n\nif status == cp_model.OPTIMAL:\n    print(\n        f'Minimum of objective function: {solver.ObjectiveValue()/10} seconds')\n    print()\n    swimmer_assigns = pd.DataFrame(0, index=strokes, columns=swimmers)\n    for i in range(num_strokes):\n        swimmer_assigns.iloc[ i, solver.Value(assign[i]) ] = solver.Value(time[i])/10\n    print('Here are the swimmer assignments with their times:')\n    display(swimmer_assigns)","output":{"0":{"name":"stdout","output_type":"stream","text":"Minimum of objective function: 126.2 seconds\n\nHere are the swimmer assignments with their times:\n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Carl</th>\n      <th>Chris</th>\n      <th>David</th>\n      <th>Tony</th>\n      <th>Ken</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>backstroke</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>33.8</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>breaststroke</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>34.7</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>butterfly</th>\n      <td>0.0</td>\n      <td>28.5</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>freestyle</th>\n      <td>29.2</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"              Carl  Chris  David  Tony  Ken\nbackstroke     0.0    0.0   33.8   0.0    0\nbreaststroke   0.0    0.0    0.0  34.7    0\nbutterfly      0.0   28.5    0.0   0.0    0\nfreestyle     29.2    0.0    0.0   0.0    0"},"exec_count":10,"output_type":"execute_result"}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"ddf2d1","input":"import pandas as pd\nfrom itertools import permutations\n\nswimmers = ['Carl', 'Chris', 'David', 'Tony', 'Ken']\nstrokes = ['backstroke', 'breaststroke', 'butterfly', 'freestyle']\n# multiplied by 10 to get integers\nswimmer_times = [[377, 329, 338, 370, 354], \n                 [434, 331, 422, 347, 418],\n                 [333, 285, 389, 304, 335], \n                 [292, 264, 296, 285, 311]]\n\nnum_strokes = len(swimmer_times)\nnum_swimmers = len(swimmer_times[0])\n\nfrom ortools.sat.python import cp_model\n\n# Create the model.\nmodel = cp_model.CpModel()\n\nassign = [\n    model.NewIntVar(0, num_swimmers - 1, strokes[i])\n    for i in range(num_strokes)\n]\ntime = [model.NewIntVar(0, 500, f'time{i}') for i in range(num_strokes)]\n\nmodel.AddAllDifferent(assign)\nfor i in range(num_strokes):\n    model.AddElement(assign[i], swimmer_times[i], time[i])\n    \n# forbid all of the tuples that don't include Ken\nno_ken = list(permutations([0,1,2,3]))\nmodel.AddForbiddenAssignments(assign, no_ken)\n\nmodel.Minimize(sum(time))\n\n# Creates a solver and solves the model.\nsolver = cp_model.CpSolver()\nstatus = solver.Solve(model)\n\nif status == cp_model.OPTIMAL:\n    print(\n        f'Minimum of objective function: {solver.ObjectiveValue()/10} seconds')\n    print()\n    swimmer_assigns = pd.DataFrame(0, index=strokes, columns=swimmers)\n    for i in range(num_strokes):\n        swimmer_assigns.iloc[ i, solver.Value(assign[i]) ] = solver.Value(time[i])/10\n    print('Here are the swimmer assignments with their times:')\n    display(swimmer_assigns)","output":{"0":{"name":"stdout","output_type":"stream","text":"Minimum of objective function: 127.8 seconds\n\nHere are the swimmer assignments with their times:\n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Carl</th>\n      <th>Chris</th>\n      <th>David</th>\n      <th>Tony</th>\n      <th>Ken</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>backstroke</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>35.4</td>\n    </tr>\n    <tr>\n      <th>breaststroke</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>34.7</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>butterfly</th>\n      <td>0.0</td>\n      <td>28.5</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>freestyle</th>\n      <td>29.2</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"              Carl  Chris  David  Tony   Ken\nbackstroke     0.0    0.0      0   0.0  35.4\nbreaststroke   0.0    0.0      0  34.7   0.0\nbutterfly      0.0   28.5      0   0.0   0.0\nfreestyle     29.2    0.0      0   0.0   0.0"},"exec_count":11,"output_type":"execute_result"}},"pos":29,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"ba4301","input":"import numpy as np\n\ntask_duration_dict = {\n    'masonry': 35,\n    'carpentry': 15,\n    'plumbing': 40,\n    'insulation': 15,\n    'ceiling': 15,\n    'roofing': 5,\n    'painting': 10,\n    'windows': 5,\n    'facade': 10,\n    'garden': 5,\n    'moving': 5\n}\ntask_names = list(task_duration_dict.keys())\nnum_tasks = len(task_names)\ndurations = list(task_duration_dict.values())\n\nprecedence_dict = {\n    'masonry': ['carpentry', 'plumbing', 'ceiling'],\n    'carpentry': ['roofing','insulation'],\n    'plumbing': ['facade', 'garden','insulation'],\n    'insulation': ['ceiling'],\n    'ceiling': ['painting'],\n    'roofing': ['windows', 'facade', 'garden'],\n    'painting': ['moving'],\n    'windows': ['moving'],\n    'facade': ['moving'],\n    'garden': ['moving']\n}\n\ntask_name_to_number_dict = dict(zip(task_names, np.arange(0, num_tasks)))\n\nhorizon = sum(task_duration_dict.values())\n\nfrom ortools.sat.python import cp_model\nmodel = cp_model.CpModel()\n\nstart_vars = [\n    model.NewIntVar(0, horizon, name=f'start_{t}') for t in task_names\n]\nend_vars = [model.NewIntVar(0, horizon, name=f'end_{t}') for t in task_names]\n\n# the `NewIntervalVar` are both variables and constraints, the internally enforce that start + duration = end\nintervals = [\n    model.NewIntervalVar(start_vars[i],\n                         durations[i],\n                         end_vars[i],\n                         name=f'interval_{task_names[i]}')\n    for i in range(num_tasks)\n]\n\n# precedence constraints\nfor before in list(precedence_dict.keys()):\n    for after in precedence_dict[before]:\n        before_index = task_name_to_number_dict[before]\n        after_index = task_name_to_number_dict[after]\n        model.Add(end_vars[before_index] <= start_vars[after_index])\n\nobj_var = model.NewIntVar(0, horizon, 'largest_end_time')\nmodel.AddMaxEquality(obj_var, end_vars)\nmodel.Minimize(obj_var)\n\nsolver = cp_model.CpSolver()\nstatus = solver.Solve(model)\n\nprint(f'Optimal Schedule Length: {solver.ObjectiveValue()}')\nfor i in range(num_tasks):\n    print(f'{task_names[i]} start at {solver.Value(start_vars[i])} and end at {solver.Value(end_vars[i])}')","output":{"0":{"name":"stdout","output_type":"stream","text":"Optimal Schedule Length: 120.0\nmasonry start at 0 and end at 35\ncarpentry start at 35 and end at 50\nplumbing start at 35 and end at 75\ninsulation start at 75 and end at 90\nceiling start at 90 and end at 105\nroofing start at 50 and end at 55\npainting start at 105 and end at 115\nwindows start at 55 and end at 60\nfacade start at 75 and end at 85\ngarden start at 75 and end at 80\nmoving start at 115 and end at 120\n"}},"pos":32,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"863b47","input":"# Solution, this example is from the or-tools documentation\nfrom ortools.sat.python import cp_model\n\nclass VarArraySolutionPrinter(cp_model.CpSolverSolutionCallback):\n    \"\"\"Print intermediate solutions.\"\"\"\n\n    def __init__(self, variables):\n        cp_model.CpSolverSolutionCallback.__init__(self)\n        self.__variables = variables\n        self.__solution_count = 0\n\n    def on_solution_callback(self):\n        self.__solution_count += 1\n        for v in self.__variables:\n            print(f'{v} = {self.Value(v)}', end = ' ')\n        print()\n\n    def solution_count(self):\n        return self.__solution_count\n\n# Creates the model.\nmodel = cp_model.CpModel()\n\n# Creates the variables.\nnum_vals = 3\nx = model.NewIntVar(0, num_vals - 1, 'x')\ny = model.NewIntVar(0, num_vals - 1, 'y')\nz = model.NewIntVar(0, num_vals - 1, 'z')\n\n# Create the constraints.\nmodel.Add(x != y)\n\n# Create a solver and solve.\nsolver = cp_model.CpSolver() # it wasn't really necessary to include all the code to this point again\nsolution_printer = VarArraySolutionPrinter([x, y, z])\nstatus = solver.SearchForAllSolutions(model, solution_printer)\n\nprint(f'Status = {solver.StatusName(status)}')\nprint(f'Number of solutions found: {solution_printer.solution_count()}')","output":{"0":{"name":"stdout","output_type":"stream","text":"x = 1 y = 2 z = 0 \nx = 1 y = 0 z = 0 \nx = 2 y = 0 z = 0 \nx = 2 y = 1 z = 0 \nx = 2 y = 1 z = 1 \nx = 2 y = 0 z = 1 \nx = 1 y = 0 z = 1 \nx = 1 y = 2 z = 1 \nx = 1 y = 2 z = 2 \nx = 1 y = 0 z = 2 \nx = 2 y = 0 z = 2 \nx = 2 y = 1 z = 2 \nx = 0 y = 1 z = 2 \nx = 0 y = 1 z = 1 \nx = 0 y = 1 z = 0 \nx = 0 y = 2 z = 0 \nx = 0 y = 2 z = 1 \nx = 0 y = 2 z = 2 \nStatus = OPTIMAL\nNumber of solutions found: 18\n"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"0126d7","input":"# Solution to SA1 - actually from CP-SAT documentation\nfrom ortools.sat.python import cp_model\n\n# Create the model.\nmodel = cp_model.CpModel()\n\n# Create the variables.\nnum_vals = 3\nx = model.NewIntVar(0, num_vals - 1, 'x')\ny = model.NewIntVar(0, num_vals - 1, 'y')\nz = model.NewIntVar(0, num_vals - 1, 'z')\n\n# Create the constraints.\nmodel.Add(x != y)\n\n# Create a solver and solve the model.\nsolver = cp_model.CpSolver()\nstatus = solver.Solve(model)\n\nif status == cp_model.OPTIMAL:\n    print('x = %i' % solver.Value(x))\n    print('y = %i' % solver.Value(y))\n    print('z = %i' % solver.Value(z))","output":{"0":{"name":"stdout","output_type":"stream","text":"x = 1\ny = 0\nz = 0\n"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"cf1c24","input":"# Solution to self assessment\nfrom ortools.sat.python import cp_model\n\n\"\"\"Minimal CP-SAT example to showcase calling the solver.\"\"\"\n# Creates the model.\nmodel = cp_model.CpModel()\n\n# Creates the variables.\nnum_vals = 3\nx = model.NewIntVar(0, num_vals - 1, 'x')\ny = model.NewIntVar(0, num_vals - 1, 'y')\nz = model.NewIntVar(0, num_vals - 1, 'z')\n\n# Creates the constraints.\nmodel.Add(x != y)\n\n# Add a linear objective function\nmodel.Maximize(x + 2 * y + 3 * z)\n\n# Creates a solver and solves the model.\nsolver = cp_model.CpSolver()\nstatus = solver.Solve(model)\n\nif status == cp_model.OPTIMAL:\n    print('Maximum of objective function: %i' % solver.ObjectiveValue())\n    print()\n    for v in [x,y,z]:\n        print(f'{v} = {solver.Value(v)}')","output":{"0":{"name":"stdout","output_type":"stream","text":"Maximum of objective function: 11\n\nx = 1\ny = 2\nz = 2\n"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"bdcab0","input":"from ortools.sat.python import cp_model\n\n# Creates the model.\nmodel = cp_model.CpModel()\n\n# Creates the variables.\nnum_vals = 3\nnum_vars = 3\ndvars = [model.NewIntVar(0, num_vals - 1, f'x{i}') for i in range(num_vars)]\n\n# Creates the constraints.\nmodel.Add(dvars[0] != dvars[1])\n\n# Add an objective function and a direction, need not be linear\ncoef = [1,2,3]\nmodel.Maximize(sum(coef[i]*dvars[i] for i in range(num_vars)))\n\n# Creates a solver and solves the model.\nsolver = cp_model.CpSolver()\nstatus = solver.Solve(model)\n\nif status == cp_model.OPTIMAL:\n    print('Maximum of objective function: %i' % solver.ObjectiveValue())\n    print()\n    for i in range(num_vars):\n        print(f'x{i} = {solver.Value(dvars[i])}')","output":{"0":{"name":"stdout","output_type":"stream","text":"Maximum of objective function: 11\n\nx0 = 1\nx1 = 2\nx2 = 2\n"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"1a3774","input":"from ortools.sat.python import cp_model\n\nclass VarArraySolutionPrinter(cp_model.CpSolverSolutionCallback):\n    \"\"\"Print intermediate solutions.\"\"\"\n\n    def __init__(self, variables):\n        cp_model.CpSolverSolutionCallback.__init__(self)\n        self.__variables = variables\n        self.__solution_count = 0\n\n    def on_solution_callback(self):\n        self.__solution_count += 1\n        for v in self.__variables:\n            print(f'{v} = {self.Value(v)}', end = ' ')\n        print()\n\n    def solution_count(self):\n        return self.__solution_count\n    \nimport pandas as pd \nimport numpy as np\ncountry_names = ['Belgium','Denmark','France','Germany','Luxembourg','Netherlands']\nadjacency_matrix = pd.DataFrame([[1,0,1,1,1,1],\n                                 [0,1,0,1,0,0],\n                                 [1,0,1,1,1,0],\n                                 [1,1,1,1,1,1],\n                                 [1,0,1,1,1,0],\n                                 [1,0,0,1,0,1]],\n                                index=country_names,columns=country_names)\n\n# Creates the model.\nmodel = cp_model.CpModel()\n\n# Creates the variables.\nnum_colors = 4\ncountries = [ model.NewIntVar(0, num_colors - 1, c) for c in country_names]\n\n# Creates the constraints from the upper triangular part of the adj. matrix\nnum_countries = len(countries)\nfor i in range(num_countries):\n    for j in np.arange(i+1,num_countries):\n        if adjacency_matrix.iloc[i,j] == 1:\n            model.Add( countries[i] != countries[j] )\n            \n# Creates a solver and solves the model.\nsolver = cp_model.CpSolver()\nsolution_printer = VarArraySolutionPrinter(countries)\nstatus = solver.SearchForAllSolutions(model, solution_printer)\n\nprint(f'Status = {solver.StatusName(status)}')\nprint(f'Number of solutions found: {solution_printer.solution_count()}')","output":{"0":{"name":"stdout","output_type":"stream","text":"Belgium = 0 Denmark = 0 France = 3 Germany = 2 Luxembourg = 1 Netherlands = 1 \nBelgium = 0 Denmark = 0 France = 2 Germany = 3 Luxembourg = 1 Netherlands = 1 \nBelgium = 0 Denmark = 0 France = 1 Germany = 3 Luxembourg = 2 Netherlands = 1 \nBelgium = 0 Denmark = 0 France = 1 Germany = 2 Luxembourg = 3 Netherlands = 1 \nBelgium = 0 Denmark = 0 France = 2 Germany = 3 Luxembourg = 1 Netherlands = 2 \nBelgium = 0 Denmark = 0 France = 3 Germany = 1 Luxembourg = 2 Netherlands = 2 \nBelgium = 0 Denmark = 0 France = 1 Germany = 3 Luxembourg = 2 Netherlands = 2 \nBelgium = 0 Denmark = 0 France = 2 Germany = 1 Luxembourg = 3 Netherlands = 2 \nBelgium = 0 Denmark = 0 France = 3 Germany = 2 Luxembourg = 1 Netherlands = 3 \nBelgium = 0 Denmark = 0 France = 3 Germany = 1 Luxembourg = 2 Netherlands = 3 \nBelgium = 0 Denmark = 0 France = 2 Germany = 1 Luxembourg = 3 Netherlands = 3 \nBelgium = 0 Denmark = 0 France = 1 Germany = 2 Luxembourg = 3 Netherlands = 3 \nBelgium = 0 Denmark = 1 France = 3 Germany = 2 Luxembourg = 1 Netherlands = 1 \nBelgium = 0 Denmark = 1 France = 2 Germany = 3 Luxembourg = 1 Netherlands = 1 \nBelgium = 0 Denmark = 1 France = 1 Germany = 3 Luxembourg = 2 Netherlands = 1 \nBelgium = 0 Denmark = 1 France = 1 Germany = 2 Luxembourg = 3 Netherlands = 1 \nBelgium = 0 Denmark = 1 France = 2 Germany = 3 Luxembourg = 1 Netherlands = 2 \nBelgium = 0 Denmark = 1 France = 1 Germany = 3 Luxembourg = 2 Netherlands = 2 \nBelgium = 0 Denmark = 1 France = 3 Germany = 2 Luxembourg = 1 Netherlands = 3 \nBelgium = 0 Denmark = 1 France = 1 Germany = 2 Luxembourg = 3 Netherlands = 3 \nBelgium = 0 Denmark = 2 France = 2 Germany = 3 Luxembourg = 1 Netherlands = 1 \nBelgium = 0 Denmark = 2 France = 1 Germany = 3 Luxembourg = 2 Netherlands = 1 \nBelgium = 0 Denmark = 2 France = 2 Germany = 3 Luxembourg = 1 Netherlands = 2 \nBelgium = 0 Denmark = 2 France = 1 Germany = 3 Luxembourg = 2 Netherlands = 2 \nBelgium = 0 Denmark = 3 France = 3 Germany = 2 Luxembourg = 1 Netherlands = 1 \nBelgium = 3 Denmark = 1 France = 2 Germany = 0 Luxembourg = 1 Netherlands = 1 \nBelgium = 2 Denmark = 1 France = 3 Germany = 0 Luxembourg = 1 Netherlands = 1 \nBelgium = 3 Denmark = 1 France = 1 Germany = 0 Luxembourg = 2 Netherlands = 1 \nBelgium = 2 Denmark = 1 France = 1 Germany = 0 Luxembourg = 3 Netherlands = 1 \nBelgium = 3 Denmark = 1 France = 2 Germany = 0 Luxembourg = 1 Netherlands = 2 \nBelgium = 3 Denmark = 1 France = 1 Germany = 0 Luxembourg = 2 Netherlands = 2 \nBelgium = 1 Denmark = 1 France = 3 Germany = 0 Luxembourg = 2 Netherlands = 2 \nBelgium = 1 Denmark = 1 France = 2 Germany = 0 Luxembourg = 3 Netherlands = 2 \nBelgium = 2 Denmark = 1 France = 3 Germany = 0 Luxembourg = 1 Netherlands = 3 \nBelgium = 1 Denmark = 1 France = 3 Germany = 0 Luxembourg = 2 Netherlands = 3 \nBelgium = 2 Denmark = 1 France = 1 Germany = 0 Luxembourg = 3 Netherlands = 3 \nBelgium = 1 Denmark = 1 France = 2 Germany = 0 Luxembourg = 3 Netherlands = 3 \nBelgium = 3 Denmark = 2 France = 2 Germany = 0 Luxembourg = 1 Netherlands = 1 \nBelgium = 3 Denmark = 3 France = 2 Germany = 0 Luxembourg = 1 Netherlands = 1 \nBelgium = 2 Denmark = 2 France = 3 Germany = 0 Luxembourg = 1 Netherlands = 1 \nBelgium = 2 Denmark = 3 France = 3 Germany = 0 Luxembourg = 1 Netherlands = 1 \nBelgium = 3 Denmark = 2 France = 1 Germany = 0 Luxembourg = 2 Netherlands = 1 \nBelgium = 3 Denmark = 3 France = 1 Germany = 0 Luxembourg = 2 Netherlands = 1 \nBelgium = 2 Denmark = 2 France = 1 Germany = 0 Luxembourg = 3 Netherlands = 1 \nBelgium = 2 Denmark = 3 France = 1 Germany = 0 Luxembourg = 3 Netherlands = 1 \nBelgium = 3 Denmark = 2 France = 2 Germany = 0 Luxembourg = 1 Netherlands = 2 \nBelgium = 3 Denmark = 3 France = 2 Germany = 0 Luxembourg = 1 Netherlands = 2 \nBelgium = 3 Denmark = 2 France = 1 Germany = 0 Luxembourg = 2 Netherlands = 2 \nBelgium = 3 Denmark = 3 France = 1 Germany = 0 Luxembourg = 2 Netherlands = 2 \nBelgium = 1 Denmark = 2 France = 3 Germany = 0 Luxembourg = 2 Netherlands = 2 \nBelgium = 1 Denmark = 3 France = 3 Germany = 0 Luxembourg = 2 Netherlands = 2 \nBelgium = 1 Denmark = 2 France = 2 Germany = 0 Luxembourg = 3 Netherlands = 2 \nBelgium = 1 Denmark = 3 France = 2 Germany = 0 Luxembourg = 3 Netherlands = 2 \nBelgium = 2 Denmark = 2 France = 3 Germany = 0 Luxembourg = 1 Netherlands = 3 \nBelgium = 2 Denmark = 3 France = 3 Germany = 0 Luxembourg = 1 Netherlands = 3 \nBelgium = 1 Denmark = 2 France = 3 Germany = 0 Luxembourg = 2 Netherlands = 3 \nBelgium = 1 Denmark = 3 France = 3 Germany = 0 Luxembourg = 2 Netherlands = 3 \nBelgium = 2 Denmark = 2 France = 1 Germany = 0 Luxembourg = 3 Netherlands = 3 \nBelgium = 2 Denmark = 3 France = 1 Germany = 0 Luxembourg = 3 Netherlands = 3 \nBelgium = 1 Denmark = 2 France = 2 Germany = 0 Luxembourg = 3 Netherlands = 3 \nBelgium = 1 Denmark = 3 France = 2 Germany = 0 Luxembourg = 3 Netherlands = 3 \nBelgium = 3 Denmark = 2 France = 2 Germany = 1 Luxembourg = 0 Netherlands = 0 \nBelgium = 3 Denmark = 3 France = 2 Germany = 1 Luxembourg = 0 Netherlands = 0 \nBelgium = 2 Denmark = 2 France = 3 Germany = 1 Luxembourg = 0 Netherlands = 0 \nBelgium = 2 Denmark = 3 France = 3 Germany = 1 Luxembourg = 0 Netherlands = 0 \nBelgium = 3 Denmark = 2 France = 0 Germany = 1 Luxembourg = 2 Netherlands = 0 \nBelgium = 3 Denmark = 3 France = 0 Germany = 1 Luxembourg = 2 Netherlands = 0 \nBelgium = 2 Denmark = 2 France = 0 Germany = 1 Luxembourg = 3 Netherlands = 0 \nBelgium = 2 Denmark = 3 France = 0 Germany = 1 Luxembourg = 3 Netherlands = 0 \nBelgium = 3 Denmark = 2 France = 2 Germany = 1 Luxembourg = 0 Netherlands = 2 \nBelgium = 3 Denmark = 3 France = 2 Germany = 1 Luxembourg = 0 Netherlands = 2 \nBelgium = 3 Denmark = 2 France = 0 Germany = 1 Luxembourg = 2 Netherlands = 2 \nBelgium = 3 Denmark = 3 France = 0 Germany = 1 Luxembourg = 2 Netherlands = 2 \nBelgium = 0 Denmark = 2 France = 3 Germany = 1 Luxembourg = 2 Netherlands = 2 \nBelgium = 0 Denmark = 3 France = 3 Germany = 1 Luxembourg = 2 Netherlands = 2 \nBelgium = 0 Denmark = 2 France = 2 Germany = 1 Luxembourg = 3 Netherlands = 2 \nBelgium = 0 Denmark = 3 France = 2 Germany = 1 Luxembourg = 3 Netherlands = 2 \nBelgium = 2 Denmark = 2 France = 3 Germany = 1 Luxembourg = 0 Netherlands = 3 \nBelgium = 2 Denmark = 3 France = 3 Germany = 1 Luxembourg = 0 Netherlands = 3 \nBelgium = 0 Denmark = 2 France = 3 Germany = 1 Luxembourg = 2 Netherlands = 3 \nBelgium = 0 Denmark = 3 France = 3 Germany = 1 Luxembourg = 2 Netherlands = 3 \nBelgium = 2 Denmark = 2 France = 0 Germany = 1 Luxembourg = 3 Netherlands = 3 \nBelgium = 2 Denmark = 3 France = 0 Germany = 1 Luxembourg = 3 Netherlands = 3 \nBelgium = 0 Denmark = 2 France = 2 Germany = 1 Luxembourg = 3 Netherlands = 3 \nBelgium = 0 Denmark = 3 France = 2 Germany = 1 Luxembourg = 3 Netherlands = 3 \nBelgium = 3 Denmark = 0 France = 2 Germany = 1 Luxembourg = 0 Netherlands = 0 \nBelgium = 2 Denmark = 0 France = 3 Germany = 1 Luxembourg = 0 Netherlands = 0 \nBelgium = 3 Denmark = 0 France = 0 Germany = 1 Luxembourg = 2 Netherlands = 0 \nBelgium = 2 Denmark = 0 France = 0 Germany = 1 Luxembourg = 3 Netherlands = 0 \nBelgium = 3 Denmark = 0 France = 2 Germany = 1 Luxembourg = 0 Netherlands = 2 \nBelgium = 3 Denmark = 0 France = 0 Germany = 1 Luxembourg = 2 Netherlands = 2 \nBelgium = 2 Denmark = 0 France = 3 Germany = 1 Luxembourg = 0 Netherlands = 3 \nBelgium = 2 Denmark = 0 France = 0 Germany = 1 Luxembourg = 3 Netherlands = 3 \nBelgium = 1 Denmark = 0 France = 3 Germany = 2 Luxembourg = 0 Netherlands = 0 \nBelgium = 3 Denmark = 0 France = 1 Germany = 2 Luxembourg = 0 Netherlands = 0 \nBelgium = 3 Denmark = 1 France = 1 Germany = 2 Luxembourg = 0 Netherlands = 0 \nBelgium = 1 Denmark = 1 France = 3 Germany = 2 Luxembourg = 0 Netherlands = 0 \nBelgium = 3 Denmark = 0 France = 0 Germany = 2 Luxembourg = 1 Netherlands = 0 \nBelgium = 3 Denmark = 1 France = 0 Germany = 2 Luxembourg = 1 Netherlands = 0 \nBelgium = 1 Denmark = 0 France = 0 Germany = 2 Luxembourg = 3 Netherlands = 0 \nBelgium = 1 Denmark = 1 France = 0 Germany = 2 Luxembourg = 3 Netherlands = 0 \nBelgium = 3 Denmark = 0 France = 1 Germany = 2 Luxembourg = 0 Netherlands = 1 \nBelgium = 3 Denmark = 1 France = 1 Germany = 2 Luxembourg = 0 Netherlands = 1 \nBelgium = 3 Denmark = 0 France = 0 Germany = 2 Luxembourg = 1 Netherlands = 1 \nBelgium = 3 Denmark = 1 France = 0 Germany = 2 Luxembourg = 1 Netherlands = 1 \nBelgium = 1 Denmark = 0 France = 3 Germany = 2 Luxembourg = 0 Netherlands = 3 \nBelgium = 1 Denmark = 1 France = 3 Germany = 2 Luxembourg = 0 Netherlands = 3 \nBelgium = 1 Denmark = 0 France = 0 Germany = 2 Luxembourg = 3 Netherlands = 3 \nBelgium = 1 Denmark = 1 France = 0 Germany = 2 Luxembourg = 3 Netherlands = 3 \nBelgium = 3 Denmark = 3 France = 1 Germany = 2 Luxembourg = 0 Netherlands = 0 \nBelgium = 1 Denmark = 3 France = 3 Germany = 2 Luxembourg = 0 Netherlands = 0 \nBelgium = 3 Denmark = 3 France = 0 Germany = 2 Luxembourg = 1 Netherlands = 0 \nBelgium = 1 Denmark = 3 France = 0 Germany = 2 Luxembourg = 3 Netherlands = 0 \nBelgium = 3 Denmark = 3 France = 1 Germany = 2 Luxembourg = 0 Netherlands = 1 \nBelgium = 3 Denmark = 3 France = 0 Germany = 2 Luxembourg = 1 Netherlands = 1 \nBelgium = 0 Denmark = 3 France = 1 Germany = 2 Luxembourg = 3 Netherlands = 1 \nBelgium = 1 Denmark = 3 France = 3 Germany = 2 Luxembourg = 0 Netherlands = 3 \nBelgium = 0 Denmark = 3 France = 3 Germany = 2 Luxembourg = 1 Netherlands = 3 \nBelgium = 1 Denmark = 3 France = 0 Germany = 2 Luxembourg = 3 Netherlands = 3 \nBelgium = 0 Denmark = 3 France = 1 Germany = 2 Luxembourg = 3 Netherlands = 3 \nBelgium = 2 Denmark = 0 France = 1 Germany = 3 Luxembourg = 0 Netherlands = 0 \nBelgium = 1 Denmark = 0 France = 2 Germany = 3 Luxembourg = 0 Netherlands = 0 \nBelgium = 2 Denmark = 0 France = 0 Germany = 3 Luxembourg = 1 Netherlands = 0 \nBelgium = 1 Denmark = 0 France = 0 Germany = 3 Luxembourg = 2 Netherlands = 0 \nBelgium = 2 Denmark = 0 France = 1 Germany = 3 Luxembourg = 0 Netherlands = 1 \nBelgium = 2 Denmark = 0 France = 0 Germany = 3 Luxembourg = 1 Netherlands = 1 \nBelgium = 1 Denmark = 0 France = 2 Germany = 3 Luxembourg = 0 Netherlands = 2 \nBelgium = 1 Denmark = 0 France = 0 Germany = 3 Luxembourg = 2 Netherlands = 2 \nBelgium = 2 Denmark = 1 France = 1 Germany = 3 Luxembourg = 0 Netherlands = 0 \nBelgium = 1 Denmark = 1 France = 2 Germany = 3 Luxembourg = 0 Netherlands = 0 \nBelgium = 2 Denmark = 1 France = 0 Germany = 3 Luxembourg = 1 Netherlands = 0 \nBelgium = 1 Denmark = 1 France = 0 Germany = 3 Luxembourg = 2 Netherlands = 0 \nBelgium = 2 Denmark = 1 France = 1 Germany = 3 Luxembourg = 0 Netherlands = 1 \nBelgium = 2 Denmark = 1 France = 0 Germany = 3 Luxembourg = 1 Netherlands = 1 \nBelgium = 1 Denmark = 1 France = 2 Germany = 3 Luxembourg = 0 Netherlands = 2 \nBelgium = 1 Denmark = 1 France = 0 Germany = 3 Luxembourg = 2 Netherlands = 2 \nBelgium = 1 Denmark = 2 France = 2 Germany = 3 Luxembourg = 0 Netherlands = 0 \nBelgium = 1 Denmark = 2 France = 0 Germany = 3 Luxembourg = 2 Netherlands = 0 \nBelgium = 1 Denmark = 2 France = 2 Germany = 3 Luxembourg = 0 Netherlands = 2 \nBelgium = 1 Denmark = 2 France = 0 Germany = 3 Luxembourg = 2 Netherlands = 2 \nBelgium = 2 Denmark = 2 France = 0 Germany = 3 Luxembourg = 1 Netherlands = 0 \nBelgium = 2 Denmark = 2 France = 0 Germany = 3 Luxembourg = 1 Netherlands = 1 \nBelgium = 2 Denmark = 2 France = 1 Germany = 3 Luxembourg = 0 Netherlands = 0 \nBelgium = 2 Denmark = 2 France = 1 Germany = 3 Luxembourg = 0 Netherlands = 1 \nStatus = OPTIMAL\nNumber of solutions found: 144\n"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"fb3936","input":"from ortools.sat.python import cp_model\n\n# Create the model.\nmodel = cp_model.CpModel()\n\n# Creates the variables.\nx1 = model.NewIntVarFromDomain(cp_model.Domain.FromValues([10,20,30]), 'x1')\nx2 = model.NewIntVarFromDomain(cp_model.Domain.FromValues([20,30,40]), 'x2')\nx3 = model.NewIntVarFromDomain(cp_model.Domain.FromValues([10,30,50]), 'x3')\n\n# Creates the constraints.\nmodel.AddAllDifferent([x1,x2,x3])\n\n# Add an objective function and a direction, need not be linear\nmodel.Maximize(10*x1 + 2*x2 - x3)\n\n# Creates a solver and solves the model.\nsolver = cp_model.CpSolver()\nstatus = solver.Solve(model)\n\nif status == cp_model.OPTIMAL:\n    print('Maximum of objective function: %i' % solver.ObjectiveValue())\n    print()\n    for v in [x1,x2,x3]:\n        print(f'{v} = {solver.Value(v)}')","output":{"0":{"name":"stdout","output_type":"stream","text":"Maximum of objective function: 370\n\nx1 = 30\nx2 = 40\nx3 = 10\n"}},"pos":17,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"7ca355","input":"from ortools.sat.python import cp_model\n\n# Create the model.\nmodel = cp_model.CpModel()\n\n# Creates the variables.\nsets_dict = { 'x1':[10,20,30], 'x2':[20,30,40], 'x3':[10,30,50]}\ndvars = [model.NewIntVarFromDomain(cp_model.Domain.FromValues(sets_dict[v]),v) for v in sets_dict.keys()]\n\n# Creates the constraints.\nmodel.AddAllDifferent(dvars)\n\n# Add an objective function and a direction, need not be linear\ncoefs = [10, 2, -1]\nmodel.Maximize( sum( coefs[i]*dvars[i] for i in range(len(dvars))) )\n\n# Creates a solver and solves the model.\nsolver = cp_model.CpSolver()\nstatus = solver.Solve(model)\n\nif status == cp_model.OPTIMAL:\n    print('Maximum of objective function: %i' % solver.ObjectiveValue())\n    print()\n    for v in dvars:\n        print(f'{v} = {solver.Value(v)}')","output":{"0":{"name":"stdout","output_type":"stream","text":"Maximum of objective function: 370\n\nx1 = 30\nx2 = 40\nx3 = 10\n"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"8952ad","input":"from ortools.sat.python import cp_model\n\n# Create the model.\nmodel = cp_model.CpModel()\n\n# Creates the variables.\nx1 = model.NewIntVarFromDomain(cp_model.Domain.FromValues([10,20,30]), 'x1')\nx2 = model.NewIntVarFromDomain(cp_model.Domain.FromValues([20,30,40]), 'x2')\nx3 = model.NewIntVarFromDomain(cp_model.Domain.FromValues([10,30,50]), 'x3')\nx3sq = model.NewIntVar(0,2500,'x3sq')\n\n# Creates the constraints.\nmodel.AddAllDifferent([x1,x2,x3])\nmodel.AddMultiplicationEquality(x3sq, [x3, x3])\n\n# Add an objective function and a direction, need not be linear\nmodel.Maximize(10*x1 + 2*x2 - x3sq)\n\n# Creates a solver and solves the model.\nsolver = cp_model.CpSolver()\nstatus = solver.Solve(model)\n\nif status == cp_model.OPTIMAL:\n    print('Maximum of objective function: %i' % solver.ObjectiveValue())\n    print()\n    for v in [x1,x2,x3]:\n        print(f'{v} = {solver.Value(v)}')","output":{"0":{"name":"stdout","output_type":"stream","text":"Maximum of objective function: 280\n\nx1 = 30\nx2 = 40\nx3 = 10\n"}},"pos":23,"type":"cell"}
{"cell_type":"markdown","id":"0cbc26","input":"# *Self Assessment: How many different ways to color?*","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"19705c","input":"# *Self Assessment: Finding all feasible solutions.*","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"3a6588","input":"# *Self Assessment: Find a feasible solution.*","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"4c952e","input":"We first solved this problem in Homework 3:\n\nThe coach of an age group swim team needs to assign swimmers to a 200-yard medley relay team to send to the Junior Olympics. Since most of his best swimmers are very fast in more than one stroke, it is not clear which swimmer should be assigned to each of the four strokes. The five fastest swimmers and the best times (in seconds) they have achieved in each of the strokes (for 50 yards) are\n\n<img src = \"images/swim.png\" width=\"500\">\n\nThe coach wishes to determine how to assign four swimmers to the four different strokes to minimize the sum of the corresponding best times.  \n\nUse a generalizable approach constraint programming to solve this problem.  Be sure to identify both the minimum total time and the swimmer assignments.  Note, you'll need to multiply the times by 10 so that they're integers and then divide the total time by 10 to report the result.","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"5c359b","input":"Write code that can be easily extended to a larger problem to solve:\n\nMaximize $x + 2y + 3z$\n\nSubject to:\n\n$x \\neq y$\n\nFor $x,y,z \\in \\{0,1,2\\}.$","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"611b74","input":"Use CP-SAT to\n\nMaximize $x + 2y + 3z$ \n\nSubject to:\n\n$x \\neq y$\n\nFor $x,y,z \\in \\{0,1,2\\}.$","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"6cd606","input":"Suppose there is an additional housebuilding task to be included.  The \"insulation\" task has duration 15 and must be done before ceiling and after carpentry, and plumbing.  Add this task and compute the new schedule.  Use the generalizable code to add this task. *Hopefully this will help convince you of the power of writing generalizable code!*","pos":31,"type":"cell"}
{"cell_type":"markdown","id":"7d743e","input":"# *Self Assessment: Ken must swim!*","pos":27,"type":"cell"}
{"cell_type":"markdown","id":"880bce","input":"# *Self Assessment: Generalizable code with CP-SAT*","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"8ae527","input":"Use CP-SAT to print out all of the feasible solutions to \n\n$x \\neq y$\n\nFor $x,y,z \\in \\{0,1,2\\}.$","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"938f60","input":"Now solve the same problem as in the previous self assessment, but write generalizable code that could be easily employed to solve a large model.  \nYou may which to use a dictionary to store the sets for each variable like this:\n    \n`sets_dict = { 'x1':[10,20,30], 'x2':[20,30,40], 'x3':[10,30,50]}`\n\nYou'll have to loop over the dictionary keys (`sets_dict.keys()`) in your list comprehension to declare the variables.","pos":19,"type":"cell"}
{"cell_type":"markdown","id":"98db68","input":"# *Self Assessment: Optimizing a linear objective function with CP-SAT*","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"a8faa8","input":"This one is a continuation from the previous problem and is a bit of a challenge to learn something on your own.  \n\nSuppose the coach decides that for the next swim meet Ken will be on the relay even if the total time is larger than before.  Add an extra constraint to the code so that all variable assignments that exclude Ken are not allowed.\n\nUse the `AddForbiddenAssignments` constraint to forbid all assignments that exclude Ken.  You can look it up in the <a href=\"https://developers.google.com/optimization/reference/python/sat/python/cp_model\">reference manual for CP-SAT.</a>  The assignments you need to exclude are those that include only the swimmers 0,1,2, and 3 so you'll need a list of all permutations of those four numbers.  Look up `permutations` in the `itertools` package and remember to convert the `itertools` object to a list of permutations with `list`.","pos":28,"type":"cell"}
{"cell_type":"markdown","id":"af95d7","input":"# <font color = \"blue\"> Self Assessment: Add your own quadratic term</font>","pos":21,"type":"cell"}
{"cell_type":"markdown","id":"b040c0","input":"This is a tweaked version of the self-assessment from the previous section with the objective function changed to include a quadratic term.\n\nMaximize:  $10 x_1 + 2 x_2 - x_3^2$\n\nSubject to\n\n$x_1 \\in \\left\\{10, 20, 30\\right\\}$\n\n$x_2 \\in \\left\\{20, 30, 40\\right\\}$\n\n$x_3 \\in \\left\\{10, 30, 50\\right\\}$\n\n$x_1, x_2,$ and $x_3$ are all different.\n\nWrite code to use CP-SAT to solve this problem.  Concrete code or generalizable code is fine.  Our solution is written concretely, but it wouldn't be hard to create an extra list of variables to contain all the quadratic variables and then use a loop to add all the necessary `MultiplicationEquality` constraints to make generalizable code.","pos":22,"type":"cell"}
{"cell_type":"markdown","id":"b8e985","input":"# *Self Assessment: Textbook Problem 9.3-4*","pos":24,"type":"cell"}
{"cell_type":"markdown","id":"c2ec0a","input":"Use CP-SAT to find a feasible solution to \n\n$x \\neq y$\n\nFor $x,y,z \\in \\{0,1,2\\}.$","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"d30941","input":"# *Self Assessment: Using Sets and All-Different*\nMaximize:  $10 x_1 + 2 x_2 - x_3$\n\nSubject to\n\n$x_1 \\in \\left\\{10, 20, 30\\right\\}$\n\n$x_2 \\in \\left\\{20, 30, 40\\right\\}$\n\n$x_3 \\in \\left\\{10, 30, 50\\right\\}$\n\n$x_1, x_2,$ and $x_3$ are all different. (You'll need the `AddAllDifferent` constraint used in one of the previous examples.)","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"e1402b","input":"Find all the feasible solutions with four colors to determine how many different ways there are to color the map using the same four colors.","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"ec93cc","input":"# *Self Assessment: Generalizable Use of Sets*","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"f307c7","input":"# *Self Assessment: Add a task*","pos":30,"type":"cell"}
{"id":0,"time":1610056957879,"type":"user"}
{"last_load":1610056958702,"type":"file"}