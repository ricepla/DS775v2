{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":82489344},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.2"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{},"toc_section_display":true,"toc_window_display":true}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":1,"id":"a8c820","input":"# execute to import notebook styling for tables and width etc.\nfrom IPython.core.display import HTML\nimport urllib.request\nresponse = urllib.request.urlopen('https://raw.githubusercontent.com/DataScienceUWL/DS775v2/master/ds755.css')\nHTML(response.read().decode(\"utf-8\"));","metadata":{"code_folding":[0]},"pos":0,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"2986ee","input":"# Solve the worker scheduling problem\nfrom pyomo.environ import *\nimport pandas as pd\n\nmodel = ConcreteModel()\n\nworkers = ['KC', 'DH', 'HB', 'SC', 'KS', 'NK']\nmin_hours = [8, 8, 8, 8, 7, 7]\nhourly_rate = [25, 26, 24, 23, 28, 30]\ndays = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri']\nhours_to_staff = [14, 14, 14, 14, 14]\n\nmin_hours_dict = dict(zip(workers, min_hours))  # zip two lists into dict\nhourly_rate_dict = dict(zip(workers, hourly_rate))\nhours_to_staff_dict = dict(zip(days, hours_to_staff))\n\nhours_avail = 8\n\n# instantiate Concrete Model\nmodel = ConcreteModel()\n\n# define variables\nmodel.hrs = Var(workers, days, domain=NonNegativeReals)\n\n# define objective function\nmodel.total_cost = Objective(expr=sum(hourly_rate_dict[w] * model.hrs[w, d]\n                                      for w in workers for d in days),\n                             sense=minimize)\n\n# define constraints\nmodel.supply_ct = ConstraintList()\nfor w in workers:\n    model.supply_ct.add(\n        sum(model.hrs[w, d] for d in days) >= min_hours_dict[w])\n\nmodel.demand_ct = ConstraintList()\nfor d in days:\n    model.demand_ct.add(\n        sum(model.hrs[w, d] for w in workers) == hours_to_staff_dict[d])\n\nmodel.avail_ct = ConstraintList()\nfor w in workers:\n    for d in days:\n        model.avail_ct.add(model.hrs[w, d] <= hours_avail)\n\n# solve\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n# convert model.hrs into a Pandas data frame for nicer display\nschedule = pd.DataFrame([[model.hrs[w, d].value for d in days]\n                         for w in workers],\n                        index=workers,\n                        columns=days)\n\n# display\nprint(f\"The minimum total weekly cost = ${model.total_cost():,.2f}\")\n\nprint(\"\\nThe weekly hours assigned to each worker:\")\nfor w in workers:\n    print(f\"Worker {w} is assigned {int(sum(schedule.loc[w,:])):.0f} hours\")\n    \nprint(\"\\nThe number of hours to schedule for each worker is: \")\nschedule","metadata":{"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"The minimum total weekly cost = $1,742.00\n\nThe weekly hours assigned to each worker:\nWorker KC is assigned 8 hours\nWorker DH is assigned 8 hours\nWorker HB is assigned 8 hours\nWorker SC is assigned 32 hours\nWorker KS is assigned 7 hours\nWorker NK is assigned 7 hours\n\nThe number of hours to schedule for each worker is: \n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Mon</th>\n      <th>Tue</th>\n      <th>Wed</th>\n      <th>Thu</th>\n      <th>Fri</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>KC</th>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>6.0</td>\n    </tr>\n    <tr>\n      <th>DH</th>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>6.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>HB</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>8.0</td>\n    </tr>\n    <tr>\n      <th>SC</th>\n      <td>8.0</td>\n      <td>8.0</td>\n      <td>8.0</td>\n      <td>8.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>KS</th>\n      <td>4.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>3.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>NK</th>\n      <td>0.0</td>\n      <td>4.0</td>\n      <td>0.0</td>\n      <td>3.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"    Mon  Tue  Wed  Thu  Fri\nKC  2.0  0.0  0.0  0.0  6.0\nDH  0.0  2.0  6.0  0.0  0.0\nHB  0.0  0.0  0.0  0.0  8.0\nSC  8.0  8.0  8.0  8.0  0.0\nKS  4.0  0.0  0.0  3.0  0.0\nNK  0.0  4.0  0.0  3.0  0.0"},"exec_count":3,"output_type":"execute_result"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"67a3f1","input":"# problem data\nmills = ['Bahamas', 'Hong Kong', 'Korea', 'Nigeria', 'Venezuela']\n\nmax_supply = dict(zip(mills, [1000, 2000, 1000, 2000, 1000]))\n\ndist_ctrs = [\n    'Los Angeles', 'Chicago', 'London', 'Mexico City', 'Manila', 'Rome',\n    'Tokyo', 'New York'\n]\n\ndemand = dict(zip(dist_ctrs, [500, 800, 900, 900, 800, 100, 200, 700]))\n\nship_cost = [[2, 2, 3, 3, 7, 4, 7, 1], [6, 7, 8, 10, 2, 9, 4, 8],\n             [5, 6, 8, 11, 4, 9, 1, 7], [14, 12, 6, 9, 11, 7, 5, 10],\n             [4, 3, 5, 1, 9, 6, 11, 4]]\n\nship_cost_dict = {\n    mills[m]: dict(zip(dist_ctrs, ship_cost[m][:]))\n    for m in range(len(mills))\n}\n\n# since cotton supply is 7000 and demand is 4900 we'll add a dummy\n# distribution center with demand 2100 for balance\n\ndist_ctrs += ['Dummy']\nfor m in mills:\n    ship_cost_dict[m]['Dummy'] = 0\n\ndemand['Dummy'] = sum(max_supply.values()) - sum(demand.values())\n\n### Define Pyomo Model ###\n\nfrom pyomo.environ import *\n\nmodel = ConcreteModel()\n\n# define variables\nmodel.bolts = Var(mills, dist_ctrs, domain=NonNegativeReals)\n\n# define objective function\nmodel.total_cost = Objective(expr=sum(ship_cost_dict[m][d] *\n                                      model.bolts[m, d] for m in mills\n                                      for d in dist_ctrs),\n                             sense=minimize)\n\n# define constraints\n\nmodel.supply_ct = ConstraintList()\nfor m in mills:\n    model.supply_ct.add( sum( model.bolts[m,d] for d in dist_ctrs )\n                        == max_supply[m] )\n\nmodel.demand_ct = ConstraintList()\nfor d in dist_ctrs:\n    model.demand_ct.add( sum( model.bolts[m,d] for m in mills ) == demand[d] ) \n\n# solve\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n# display\nprint(f\"Total Shipping Cost = ${model.total_cost():,.2f}\")\n\nimport pandas as pd\nbolts = pd.DataFrame([[model.bolts[m, d].value for d in dist_ctrs] for m in mills],\n                         columns=dist_ctrs,\n                         index=mills)\nbolts","metadata":{"code_folding":[0],"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"Total Shipping Cost = $15,400.00\n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Los Angeles</th>\n      <th>Chicago</th>\n      <th>London</th>\n      <th>Mexico City</th>\n      <th>Manila</th>\n      <th>Rome</th>\n      <th>Tokyo</th>\n      <th>New York</th>\n      <th>Dummy</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Bahamas</th>\n      <td>0.0</td>\n      <td>300.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>700.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>Hong Kong</th>\n      <td>0.0</td>\n      <td>100.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>800.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1100.0</td>\n    </tr>\n    <tr>\n      <th>Korea</th>\n      <td>500.0</td>\n      <td>300.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>200.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>Nigeria</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>900.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>100.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1000.0</td>\n    </tr>\n    <tr>\n      <th>Venezuela</th>\n      <td>0.0</td>\n      <td>100.0</td>\n      <td>0.0</td>\n      <td>900.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"           Los Angeles  Chicago  London  Mexico City  Manila   Rome  Tokyo  \\\nBahamas            0.0    300.0     0.0          0.0     0.0    0.0    0.0   \nHong Kong          0.0    100.0     0.0          0.0   800.0    0.0    0.0   \nKorea            500.0    300.0     0.0          0.0     0.0    0.0  200.0   \nNigeria            0.0      0.0   900.0          0.0     0.0  100.0    0.0   \nVenezuela          0.0    100.0     0.0        900.0     0.0    0.0    0.0   \n\n           New York   Dummy  \nBahamas       700.0     0.0  \nHong Kong       0.0  1100.0  \nKorea           0.0     0.0  \nNigeria         0.0  1000.0  \nVenezuela       0.0     0.0  "},"exec_count":5,"output_type":"execute_result"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"ea683e","input":"from pyomo.environ import *\n\nmodel = ConcreteModel()\n\nworkers = ['KC','DH','HB','SC','KS','NK']\nmin_hr = [8,8,8,8,7,7]\nhourly_rate = [25,26,24,23,28,30]\ndays = ['Mon','Tue','Wed','Thu','Fri']\nhours_to_staff = [14,14,14,14,14]\n\nmin_hours = dict( zip( workers, min_hr ) )\nrate_per_hour = dict( zip( workers, hourly_rate) )\ntot_staff_hrs = dict( zip( days, hours_to_staff ) )\n\nworker_day_avail={ ('KC','Mon'):6,('KC','Wed'):6,('KC','Fri'):6,\n                   ('DH','Tue'):6,('DH','Thu'):6,\n                   ('HB','Mon'):4,('HB','Tue'):8,('HB','Wed'):4,('HB','Fri'):4,\n                   ('SC','Mon'):5,('SC','Tue'):5,('SC','Wed'):5,('SC','Fri'):5,\n                   ('KS','Mon'):3,('KS','Wed'):3,('KS','Thu'):8,\n                   ('NK','Thu'):6,('NK','Fri'):2 }\n\nworker_days = worker_day_avail.keys() # makes a set of all the keys in the dictionary\n\n# define variables\nmodel.hrs = Var(worker_days, domain = NonNegativeReals) # one variable for each feasible worker-day pair\n\n# define objective function\nmodel.total_cost = Objective( expr = sum(rate_per_hour[w]*model.hrs[w,d] \n                                         for (w,d) in worker_days ), \n                            sense = minimize )\n\n# define constraints \n\nmodel.supply_ct = ConstraintList()\nfor w in workers:\n    model.supply_ct.add( sum( model.hrs[w,d] for d in days if (w,d) in worker_days ) >= min_hours[w])\n\nmodel.demand_ct = ConstraintList()\nfor d in days:\n    model.demand_ct.add( sum( model.hrs[w,d] for w in workers if (w,d) in worker_days) == tot_staff_hrs[d] )\n\nmodel.avail_ct = ConstraintList()\nfor (w,d) in worker_days:\n    model.avail_ct.add(model.hrs[w,d] <= worker_day_avail[w,d])\n    \n# solve\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n# convert model.hrs into a Pandas data frame for nicer display\nimport pandas as pd  \nschedule = pd.DataFrame( 0, index = workers, columns = days)\nfor (w,d) in worker_days:\n    schedule.loc[w,d] = model.hrs[w,d].value\n\n# display\n\nprint(f\"The minimum total weekly cost = ${model.total_cost():,.2f}\")\nprint(\"The number of hours to schedule for each worker is: \")\nschedule","output":{"0":{"name":"stdout","output_type":"stream","text":"The minimum total weekly cost = $1,755.00\nThe number of hours to schedule for each worker is: \n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Mon</th>\n      <th>Tue</th>\n      <th>Wed</th>\n      <th>Thu</th>\n      <th>Fri</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>KC</th>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>3.0</td>\n      <td>0.0</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>DH</th>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>6.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>HB</th>\n      <td>4.0</td>\n      <td>7.0</td>\n      <td>4.0</td>\n      <td>0.0</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>SC</th>\n      <td>5.0</td>\n      <td>5.0</td>\n      <td>5.0</td>\n      <td>0.0</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>KS</th>\n      <td>3.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>NK</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>6.0</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"    Mon  Tue  Wed  Thu  Fri\nKC  2.0  0.0  3.0  0.0  4.0\nDH  0.0  2.0  0.0  6.0  0.0\nHB  4.0  7.0  4.0  0.0  4.0\nSC  5.0  5.0  5.0  0.0  5.0\nKS  3.0  0.0  2.0  2.0  0.0\nNK  0.0  0.0  0.0  6.0  1.0"},"exec_count":7,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"699fa3","input":"# using openpyxl\nfrom openpyxl import load_workbook\nwb = load_workbook(filename='data/transp_prob_multi.xlsx', data_only=True)\nsheet = wb.active\n\n# specify upper left and lower right cells, returns a list or list of lists representing rows\n# for a single value read_range(sheet,'A11')\n# for a list of values in a column or row read_range(sheet,'A11','N11')\n# for nested lists of values (array-like) read_range(sheet,'A11','D23')\ndef read_range(sheet, begin, *argv):\n    if len(argv)>0:\n        end = argv[0]\n        table = sheet[begin:end]\n        height = len(table)\n        width = len(table[0])\n        if height == 1 or width == 1:\n            # for a single row or column produce a list\n            tmp = [cell.value for row in table for cell in row]\n        else:\n            # for an array of cells produces a list of row lists\n            tmp = [[cell.value for cell in row] for row in table]\n    else:\n        tmp = sheet[begin].value\n    return (tmp)\n\nwarehouses = read_range(sheet, 'A3', 'A5')\nstores = read_range(sheet, 'B3', 'B7')\nproducts = read_range(sheet, 'C3', 'C4')\nroutes = {(p, w, s) for [p, w, s] in read_range(sheet, 'E3', 'G20')}\nwares_stores = {(w,s) for (p,w,s) in routes}\ncapacity = read_range(sheet, 'A11')\ncost = {(p, w, s): c for [p, w, s, c] in read_range(sheet, 'E3', 'H20')}\nsupply = {(p, w): q for [p, w, q] in read_range(sheet, 'J3', 'L8')}\ndemand = {(p, s): q for [p, s, q] in read_range(sheet, 'N3', 'P12')}\n\n# throw an error if total supply and demand do not match\nfor p in products:\n    assert (sum(supply[p, w] for w in warehouses\n                if (p, w) in supply.keys()) == sum(demand[p, s]\n                                                   for s in stores\n                                                   if (p, s) in demand.keys()))\n\nfrom pyomo.environ import *\n\nmodel = ConcreteModel()\n\nmodel.transp = Var(routes, domain=NonNegativeReals)\n\nmodel.total_cost = Objective(expr=sum(cost[p,w,s] * model.transp[p,w,s] for (p,w,s) in routes) )\n\nmodel.supply_ct = ConstraintList()\nfor p in products:\n    for w in warehouses:\n        model.supply_ct.add( sum( model.transp[p,w,s] for s in stores if (p,w,s) in routes) == supply[p,w] )\n\n\nmodel.demand_ct = ConstraintList()\nfor p in products:\n    for s in stores:\n        model.demand_ct.add( sum( model.transp[p,w,s] for w in warehouses if (p,w,s) in routes) == demand[p,s] )\n\nmodel.capacity_ct = ConstraintList()\nfor (w,s) in wares_stores:\n    model.capacity_ct.add( sum(model.transp[p, w, s] for p in products if (p,w,s) in routes)  <= capacity)\n\n# solve and display\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n# convert model.hrs into a Pandas data frame for nicer display\nimport pandas as pd\ntransp_pA = pd.DataFrame(0, index=warehouses, columns=stores)\ntransp_pB = pd.DataFrame(0, index=warehouses, columns=stores)\nfor (w, s) in wares_stores:\n    transp_pA.loc[w, s] = model.transp['pA', w, s].value\n    transp_pB.loc[w, s] = model.transp['pB', w, s].value\n\n# display\nprint(f\"The minimum total transportation cost = ${model.total_cost():,.2f}\")\n\nfrom IPython.display import display\nprint(\"\\nThe transported amounts of product A: \")\ndisplay(transp_pA)\nprint(\"\\nThe transported amounts of product B: \")\ndisplay(transp_pB)","output":{"0":{"name":"stdout","output_type":"stream","text":"The minimum total transportation cost = $23,700.00\n\nThe transported amounts of product A: \n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>sA</th>\n      <th>sB</th>\n      <th>sC</th>\n      <th>sD</th>\n      <th>sE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>wA</th>\n      <td>200.0</td>\n      <td>0.0</td>\n      <td>200.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>wB</th>\n      <td>0.0</td>\n      <td>100.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>wC</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>100.0</td>\n      <td>100.0</td>\n      <td>300.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"       sA     sB     sC     sD     sE\nwA  200.0    0.0  200.0    0.0    0.0\nwB    0.0  100.0    0.0    0.0    0.0\nwC    0.0    0.0  100.0  100.0  300.0"},"exec_count":8,"output_type":"execute_result"},"2":{"name":"stdout","output_type":"stream","text":"\nThe transported amounts of product B: \n"},"3":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>sA</th>\n      <th>sB</th>\n      <th>sC</th>\n      <th>sD</th>\n      <th>sE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>wA</th>\n      <td>200.0</td>\n      <td>100.0</td>\n      <td>200.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>wB</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>100.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>wC</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>400.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"       sA     sB     sC     sD     sE\nwA  200.0  100.0  200.0    0.0    0.0\nwB    0.0    0.0    0.0  100.0    0.0\nwC    0.0    0.0    0.0    0.0  400.0"},"exec_count":8,"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"markdown","id":"0e8de8","input":"# *Self-Assessment: Cheaper Schedule?*","metadata":{"heading_collapsed":true},"pos":1,"type":"cell"}
{"cell_type":"markdown","id":"310162","input":"# *Self-Assessment: Multiple Products*","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"69f9fc","input":"# *Self-Assessment: Unbalanced Transportation Problem*","metadata":{"heading_collapsed":true},"pos":3,"type":"cell"}
{"cell_type":"markdown","id":"828913","input":"Revisit the worker scheduling problem from the textbook (3.4-15).  Start with the code above and modify it using Technique 3 to eliminate unneeded decision variables.  Your new solution should have 18 decision variables instead of 30 and the overall answer should be the same.","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"fb164a","input":"# *Self-Assessment:  Remove unneeded variables*","pos":5,"type":"cell"}
{"id":0,"time":1604156070428,"type":"user"}
{"last_load":1604156070230,"type":"file"}