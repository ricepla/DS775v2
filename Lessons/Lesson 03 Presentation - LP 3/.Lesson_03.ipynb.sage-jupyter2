{"backend_state":"init","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.2"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{"height":"calc(100% - 180px)","left":"10px","top":"150px","width":"285.312px"},"toc_section_display":true,"toc_window_display":true},"varInspector":{"cols":{"lenName":16,"lenType":16,"lenVar":40},"kernels_config":{"python":{"delete_cmd_postfix":"","delete_cmd_prefix":"del ","library":"var_list.py","varRefreshCmd":"print(var_dic_list())"},"r":{"delete_cmd_postfix":") ","delete_cmd_prefix":"rm(","library":"var_list.r","varRefreshCmd":"cat(var_dic_list()) "}},"types_to_exclude":["module","function","builtin_function_or_method","instance","_Feature"],"window_display":false}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"7224fe","input":"# The code in this cell is incomplete and won't run until completed\n\n# using openpyxl\nwb = load_workbook(filename='data/transp_prob_multi.xlsx', data_only=True)\nsheet = wb.active\n\n# specify upper left and lower right cells, returns a list or list of lists representing rows\n# for a single value read_range(sheet,'A11')\n# for a list of values in a column or row read_range(sheet,'A11','N11')\n# for nested lists of values (array-like) read_range(sheet,'A11','D23')\ndef read_range(sheet, begin, *argv):\n    if len(argv)>0:\n        end = argv[0]\n        table = sheet[begin:end]\n        height = len(table)\n        width = len(table[0])\n        if height == 1 or width == 1:\n            # for a single row or column produce a list\n            tmp = [cell.value for row in table for cell in row]\n        else:\n            # for an array of cells produces a list of row lists\n            tmp = [[cell.value for cell in row] for row in table]\n    else:\n        tmp = sheet[begin].value\n    return (tmp)\n\nwarehouses = read_range(sheet, 'A3', 'A5')\nstores = read_range(sheet, 'B3', 'B7')\nproducts = read_range(sheet, 'C3', 'C4')\n# all feasible product-warehouse-store combinations\nroutes = {(p, w, s) for [p, w, s] in read_range(sheet, 'E3', 'G20')}\n# all feasible warehouse-store combinations\nwares_stores = {(w,s) for (p,w,s) in routes}\ncapacity = read_range(sheet, 'A11')\ncost = {(p, w, s): c for [p, w, s, c] in read_range(sheet, 'E3', 'H20')}\nsupply = {(p, w): q for [p, w, q] in read_range(sheet, 'J3', 'L8')}\ndemand = {(p, s): q for [p, s, q] in read_range(sheet, 'N3', 'P12')}\n\n# throw an error if total supply and demand do not match\nfor p in products:\n    assert (sum(supply[p, w] for w in warehouses\n                if (p, w) in supply.keys()) == sum(demand[p, s]\n                                                   for s in stores\n                                                   if (p, s) in demand.keys()))\n\nmodel = ConcreteModel()\n\nmodel.transp = Var(routes, domain=NonNegativeReals) # one decions variable for each feasible p-w-s combo\n\nmodel.total_cost = Objective(expr=sum(cost[p,w,s] * model.transp[p,w,s] for (p,w,s) in routes) )\n\nmodel.supply_ct = ConstraintList()\nfor p in products:\n    for w in warehouses:\n        # the if statement allows only feasible p-w-s combos in the sum\n        model.supply_ct.add( sum( model.transp[p,w,s] for s in stores if (p,w,s) in routes) == supply[p,w] )\n\n\nmodel.demand_ct = ConstraintList()\n# COMPLETE the demand constraint, for each product and store the total transported must ....\n\nmodel.capacity_ct = ConstraintList()\nfor (w,s) in wares_stores:\n    # COMPLETE - add up the transported amounts of all the products shipped from w to s, make sure p-w-s combo is feasible\n    # using an if statement\n\n# solve and display\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n# convert model.hrs into a Pandas data frame for nicer display\ntransp_pA = pd.DataFrame(0, index=warehouses, columns=stores)\ntransp_pB = pd.DataFrame(0, index=warehouses, columns=stores)\nfor (w, s) in wares_stores:\n    transp_pA.loc[w, s] = model.transp['pA', w, s].value\n    transp_pB.loc[w, s] = model.transp['pB', w, s].value\n\n# display\nprint(f\"The minimum total transportation cost = ${model.total_cost():.2f}\")\n\nprint(\"\\nThe transported amounts of product A: \")\ndisplay(transp_pA)\nprint(\"\\nThe transported amounts of product B: \")\ndisplay(transp_pB)","pos":59,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"7bea51","input":"machines = ['mac1', 'mac2', 'mac3', 'macD']\nsupply = dict(zip(machines, [1, 1, 1, 1]))\n\nlocations = ['loc1', 'loc2', 'loc3', 'loc4']\ndemand = dict(zip(locations, [1, 1, 1, 1]))\n\nbigM = 1000\ncost_list = [[13,16,12,11],[15,bigM,13,20],[5,7,10,6],[0,0,0,0]]\ncost = {\n    machines[m]: {locations[l]: cost_list[m][l]\n                   for l in range(len(locations))}\n    for m in range(len(machines))\n}\n\n# throw an error if total supply and demand do not match\nassert (sum(supply.values()) == sum(demand.values()))\n\nmodel = ConcreteModel()\n\nmodel.assign= Var(machines, locations, domain=NonNegativeReals)\n\nmodel.total_cost = Objective(expr=sum(cost[m][l] * model.assign[m, l]\n                                      for m in machines for l in locations),\n                             sense=minimize)\n\nmodel.supply_ct = ConstraintList()\nfor m in machines:\n    model.supply_ct.add(\n        sum(model.assign[m, l] for l in locations) == supply[m])\n\nmodel.demand_ct = ConstraintList()\nfor l in locations:\n    model.demand_ct.add(\n        sum(model.assign[m, l\n                        ] for m in machines) == demand[l])\n\n# solve and display\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n# display solution\nprint(f\"Minimum Cost per hour = ${model.total_cost():,.2f}\")\n\n# put amounts in dataframe for nicer display\ndvars = pd.DataFrame([[model.assign[m, l]() for l in locations]\n                      for m in machines],\n                     index = machines,\n                     columns=locations)\nprint(\"Machine assignments to locations:\")\ndvars","metadata":{"hidden":true},"pos":63,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"8205b5","input":"canneries = ['can1', 'can2', 'can3']\nsupply = dict(zip(canneries, [75, 125, 100]))\n\nwarehouses = ['ware1', 'ware2', 'ware3', 'ware4']\ndemand = dict(zip(warehouses, [80, 65, 70, 85]))\n\n#########################\n# tuples and dictionary #\n#########################\ncan_ware_routes = [('can1', 'ware1'), ('can1', 'ware3'), ('can1', 'ware4'),\n                   ('can2', 'ware2'), ('can2', 'ware3'), ('can2', 'ware4'),\n                   ('can3', 'ware1'), ('can3', 'ware2'), ('can3', 'ware4')]\nusc = [464, 654, 867, 416, 690, 791, 995, 682, 685]\nunit_ship_cost = dict(zip(can_ware_routes, usc))\n\n# throw an error if total supply and demand do not match\nassert (sum(supply.values()) == sum(demand.values()))\n\nmodel = ConcreteModel()\n\n###########################################################################\n# use the list of tuples of routes as the index for the decision variable #\n###########################################################################\nmodel.transp = Var(can_ware_routes, domain=NonNegativeReals)\n\n#################################################################\n# the list of tuples is also used to sum the objective function #\n# you can write unit_ship_cost[(c,w)] or unit_ship_cost[c,w]    #\n#################################################################\nmodel.total_cost = Objective(expr=sum(unit_ship_cost[c, w] * model.transp[c, w]\n                                      for (c, w) in can_ware_routes),\n                             sense=minimize)\n\n#####################################################################\n# use an extra if statement in the sum to include only valid routes #\n#####################################################################\nmodel.supply_ct = ConstraintList()\nfor c in canneries:\n    model.supply_ct.add(\n        sum(model.transp[c, w] for w in warehouses\n            if (c, w) in can_ware_routes) == supply[c])\n\nmodel.demand_ct = ConstraintList()\nfor w in warehouses:\n    model.demand_ct.add(\n        sum(model.transp[c, w] for c in canneries\n            if (c, w) in can_ware_routes) == demand[w])\n\n# solve and display\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n# display solution\nprint(f\"Minimum Total Cost = ${model.total_cost():,.2f}\")\n\nprint(\"\\nTransported Amounts:\")\nfor (c, w) in can_ware_routes:\n    print(f\"Ship {model.transp[c,w].value:.0f} truckloads from {c} to {w}\")\n\n# or can setup a data frame for nicer display, use zeros for infeasible routes\nprint(\"\\nData Frame display of transported amounts:\")\ntransp = pd.DataFrame(0, index=canneries, columns=warehouses)\nfor (c,w) in can_ware_routes:\n    transp.loc[c,w] = model.transp[c,w].value\ntransp","metadata":{"code_folding":[]},"pos":50,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"f8e553","input":"# EXECUTE FIRST\n\n# computational imports\nfrom pyomo.environ import *\nimport numpy as np\nimport pandas as pd\nfrom openpyxl import load_workbook\n# plotting imports\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\n# for reading files from urls\nimport urllib.request\n# display imports\nfrom IPython.display import display, IFrame\nfrom IPython.core.display import HTML\n\n# for playing videos, customize height and width if desired\ndef play_video(vid_name, w = 640, h = 360):\n    vid_path = \"https://media.uwex.edu/content/ds/ds775_r19/\"\n    return IFrame( vid_path + vid_name + \"/index.html\", width = w, height = h )\n\n# import notebook styling for tables and width etc.\nresponse = urllib.request.urlopen('https://raw.githubusercontent.com/DataScienceUWL/DS775v2/master/ds755.css')\nHTML(response.read().decode(\"utf-8\"));","metadata":{"code_folding":[0]},"pos":0,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"50a255","input":"# execute this cell for video\nplay_video(\"ds775_lesson3-dealing-with-infeasible-routes\")","metadata":{"code_folding":[0]},"output":{"0":{"data":{"text/html":"\n        <iframe\n            width=\"640\"\n            height=\"360\"\n            src=\"https://media.uwex.edu/content/ds/ds775_r19/ds775_lesson3-dealing-with-infeasible-routes/index.html\"\n            frameborder=\"0\"\n            allowfullscreen\n        ></iframe>\n        ","text/plain":"<IPython.lib.display.IFrame at 0x7fc795350b38>"},"exec_count":10,"output_type":"execute_result"}},"pos":33,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"afb5fa","input":"canneries = ['can1', 'can2','can3']\nsupply = dict(zip(canneries, [75, 125, 100]))\n\nwarehouses = ['ware1','ware2','ware3','ware4']\ndemand = dict(zip(warehouses, [80, 65, 70, 85]))\n\n###########################################################\n### only modification to code is here in unit_ship_cost ###\n###########################################################\nbigM = 10000;\nusc = [[464, bigM, 654, 867], [bigM, 416, 690, 791],\n       [995, 682, bigM, 685] ]\nunit_ship_cost = {\n    canneries[c]: {warehouses[w]: usc[c][w]\n                   for w in range(len(warehouses))}\n    for c in range(len(canneries))\n}\n\n# throw an error if total supply and demand do not match\nassert (sum(supply.values()) == sum(demand.values()))\n\nmodel = ConcreteModel()\n\nmodel.transp = Var(canneries, warehouses, domain=NonNegativeReals)\n\nmodel.total_cost = Objective(expr=sum(unit_ship_cost[c][w] * model.transp[c, w]\n                                      for c in canneries for w in warehouses),\n                             sense=minimize)\n\nmodel.supply_ct = ConstraintList()\nfor c in canneries:\n    model.supply_ct.add(\n        sum(model.transp[c, w] for w in warehouses) == supply[c])\n\nmodel.demand_ct = ConstraintList()\nfor w in warehouses:\n    model.demand_ct.add(\n        sum(model.transp[c, w] for c in canneries) == demand[w])\n\n# solve and display\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n# display solution\nprint(f\"Minimum Total Cost = ${model.total_cost():,.2f}\")\n\n# put amounts in dataframe for nicer display\ndvars = pd.DataFrame([[model.transp[c, w]() for w in warehouses]\n                      for c in canneries],\n                     index=canneries,\n                     columns=warehouses)\nprint(\"Number of truckloads to ship from each cannery to each warehouse:\")\ndvars","output":{"0":{"name":"stdout","output_type":"stream","text":"Minimum Total Cost = $176,000.00\nNumber of truckloads to ship from each cannery to each warehouse:\n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ware1</th>\n      <th>ware2</th>\n      <th>ware3</th>\n      <th>ware4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>can1</th>\n      <td>75.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>can2</th>\n      <td>0.0</td>\n      <td>55.0</td>\n      <td>70.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>can3</th>\n      <td>5.0</td>\n      <td>10.0</td>\n      <td>0.0</td>\n      <td>85.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"      ware1  ware2  ware3  ware4\ncan1   75.0    0.0    0.0    0.0\ncan2    0.0   55.0   70.0    0.0\ncan3    5.0   10.0    0.0   85.0"},"exec_count":11,"output_type":"execute_result"}},"pos":36,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"ea9ec7","input":"canneries = ['can1', 'can2', 'can3']\nsupply = dict(zip(canneries, [75, 125, 100]))\n\nwarehouses = ['ware1', 'ware2', 'ware3', 'ware4']\ndemand = dict(zip(warehouses, [80, 65, 70, 85]))\n\nusc = [[464, 513, 654, 867], [352, 416, 690, 791], [995, 682, 388, 685]]\nunit_ship_cost = {\n    canneries[c]: {warehouses[w]: usc[c][w]\n                   for w in range(len(warehouses))}\n    for c in range(len(canneries))\n}\n\n# throw an error if total supply and demand do not match\nassert (sum(supply.values()) == sum(demand.values()))\n\nmodel = ConcreteModel()\n\nmodel.transp = Var(canneries, warehouses, domain=NonNegativeReals)\n\nmodel.total_cost = Objective(expr=sum(unit_ship_cost[c][w] * model.transp[c, w]\n                                      for c in canneries for w in warehouses),\n                             sense=minimize)\n\nmodel.supply_ct = ConstraintList()\nfor c in canneries:\n    model.supply_ct.add(\n        sum(model.transp[c, w] for w in warehouses) == supply[c])\n\nmodel.demand_ct = ConstraintList()\nfor w in warehouses:\n    model.demand_ct.add(\n        sum(model.transp[c, w] for c in canneries) == demand[w])\n\n######################################################\n### additional constraints here.  no other changes ###\n######################################################\nno_transport = {('can1','ware2'),('can2','ware1'),('can3','ware3')}\nmodel.no_ship_ct = ConstraintList()\nfor (c,w) in no_transport:\n    model.no_ship_ct.add(model.transp[c,w]==0)\n\n# solve and display\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n# display solution\nprint(f\"Minimum Total Cost = ${model.total_cost():,.2f}\")\n\n# put amounts in dataframe for nicer display\ndvars = pd.DataFrame([[model.transp[c, w]() for w in warehouses]\n                      for c in canneries],\n                     index=canneries,\n                     columns=warehouses)\nprint(\"Number of truckloads to ship from each cannery to each warehouse:\")\ndvars","output":{"0":{"name":"stdout","output_type":"stream","text":"Minimum Total Cost = $176,000.00\nNumber of truckloads to ship from each cannery to each warehouse:\n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ware1</th>\n      <th>ware2</th>\n      <th>ware3</th>\n      <th>ware4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>can1</th>\n      <td>75.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>can2</th>\n      <td>0.0</td>\n      <td>55.0</td>\n      <td>70.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>can3</th>\n      <td>5.0</td>\n      <td>10.0</td>\n      <td>0.0</td>\n      <td>85.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"      ware1  ware2  ware3  ware4\ncan1   75.0    0.0    0.0    0.0\ncan2    0.0   55.0   70.0    0.0\ncan3    5.0   10.0    0.0   85.0"},"exec_count":12,"output_type":"execute_result"}},"pos":40,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"d152af","input":"can_ware_routes = [('can1', 'ware1'), ('can1', 'ware3'), ('can1', 'ware4'),\n                   ('can2', 'ware2'), ('can2', 'ware3'), ('can2', 'ware4'),\n                   ('can3', 'ware1'), ('can3', 'ware2'), ('can3', 'ware4')]\nunit_ship_cost = [464, 654, 867, 416, 690, 791, 995, 682, 685]\nunit_ship_cost_dict = dict(zip(can_ware_routes, unit_ship_cost))\nunit_ship_cost_dict","output":{"0":{"data":{"text/plain":"{('can1', 'ware1'): 464,\n ('can1', 'ware3'): 654,\n ('can1', 'ware4'): 867,\n ('can2', 'ware2'): 416,\n ('can2', 'ware3'): 690,\n ('can2', 'ware4'): 791,\n ('can3', 'ware1'): 995,\n ('can3', 'ware2'): 682,\n ('can3', 'ware4'): 685}"},"exec_count":13,"output_type":"execute_result"}},"pos":44,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"710054","input":"# infeasible routes have large cost values in our table\nbigM = 10000\nusc = [[464, bigM, 654, 867], [bigM, 416, 690, 791], [995, 682, bigM, 685]]\n\n# convert to a dataframe as an intermediate step to simplify the code\nusc_df = pd.DataFrame(usc, columns=warehouses, index=canneries)\n\n# now we can access the unit shipping costs like usc_df.loc['can1','ware1']\nunit_ship_cost = {(c, w): usc_df.loc[c, w]\n                  for c in canneries for w in warehouses\n                  if usc_df.loc[c, w] < bigM}","pos":46,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"33952d","input":"can_ware_routes = list(unit_ship_cost.keys())\ncan_ware_routes","output":{"0":{"data":{"text/plain":"[('can1', 'ware1'),\n ('can1', 'ware3'),\n ('can1', 'ware4'),\n ('can2', 'ware2'),\n ('can2', 'ware3'),\n ('can2', 'ware4'),\n ('can3', 'ware1'),\n ('can3', 'ware2'),\n ('can3', 'ware4')]"},"exec_count":15,"output_type":"execute_result"}},"pos":48,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"1be81e","input":"# execute this cell for video\nplay_video(\"ds775_lesson3-transportation-problem-walkthrough3\")","metadata":{"code_folding":[],"hidden":true},"output":{"0":{"data":{"text/html":"\n        <iframe\n            width=\"640\"\n            height=\"360\"\n            src=\"https://media.uwex.edu/content/ds/ds775_r19/ds775_lesson3-transportation-problem-walkthrough3/index.html\"\n            frameborder=\"0\"\n            allowfullscreen\n        ></iframe>\n        ","text/plain":"<IPython.lib.display.IFrame at 0x7fc795350dd8>"},"exec_count":17,"output_type":"execute_result"}},"pos":56,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"3e9949","input":"# execute this cell for video\nplay_video(\"ds775_lesson3-transportation-problem-walkthrough\")","metadata":{"code_folding":[0]},"output":{"0":{"data":{"text/html":"\n        <iframe\n            width=\"640\"\n            height=\"360\"\n            src=\"https://media.uwex.edu/content/ds/ds775_r19/ds775_lesson3-transportation-problem-walkthrough/index.html\"\n            frameborder=\"0\"\n            allowfullscreen\n        ></iframe>\n        ","text/plain":"<IPython.lib.display.IFrame at 0x7fc79b55cdd8>"},"exec_count":2,"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"472a1d","input":"# Solve the worker scheduling problem\nmodel = ConcreteModel()\n\nworkers = ['KC', 'DH', 'HB', 'SC', 'KS', 'NK']\nmin_hours = [8, 8, 8, 8, 7, 7]\nhourly_rate = [25, 26, 24, 23, 28, 30]\ndays = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri']\nhours_to_staff = [14, 14, 14, 14, 14]\n\nmin_hours_dict = dict(zip(workers, min_hours)) # zip two lists into dict\nhourly_rate_dict = dict(zip(workers, hourly_rate))\nhours_to_staff_dict = dict(zip(days, hours_to_staff))\n\nhours_avail = [[6, 0, 6, 0, 6], [0, 6, 0, 6, 0], [4, 8, 4, 0, 4],\n               [5, 5, 5, 0, 5], [3, 0, 3, 8, 0], [0, 0, 0, 6, 2]]\n\n# convert nested list (indexed by integers) \n# to nested dictionary (indexed by index sets)\nhours_avail_dict = {\n    workers[w]: dict( zip( days, hours_avail[w][:]) )\n    for w in range(len(workers))\n}\n\n# instantiate Concrete Model\nmodel = ConcreteModel()\n\n# define variables\nmodel.hrs = Var(workers, days, domain=NonNegativeReals)\n\n# define objective function\nmodel.total_cost = Objective(expr=sum(hourly_rate_dict[w] * model.hrs[w, d]\n                                      for w in workers for d in days),\n                             sense=minimize)\n\n# uncomment to print out objective function\n# model.total_cost.pprint()\n\n# define constraints\nmodel.supply_ct = ConstraintList()\nfor w in workers:\n    model.supply_ct.add(sum(model.hrs[w, d] for d in days) >= min_hours_dict[w])\n\nmodel.demand_ct = ConstraintList()\nfor d in days:\n    model.demand_ct.add(\n        sum(model.hrs[w, d] for w in workers) == hours_to_staff_dict[d])\n\n# uncomment to print out constraints\n#model.demand_ct.pprint()\n\nmodel.avail_ct = ConstraintList()\nfor w in workers:\n    for d in days:\n        model.avail_ct.add(model.hrs[w, d] <= hours_avail_dict[w][d])\n\n# solve\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n# convert model.hrs into a Pandas data frame for nicer display\nschedule = pd.DataFrame([[model.hrs[w, d].value for d in days]\n                         for w in workers],\n                        index=workers,\n                        columns=days)\n\n# display\nprint(f\"\\nThe minimum total weekly cost = ${model.total_cost():,.2f}\")\nprint(\"The number of hours to schedule for each worker is: \")\nschedule","metadata":{"code_folding":[]},"output":{"0":{"name":"stdout","output_type":"stream","text":"\nThe minimum total weekly cost = $1,755.00\nThe number of hours to schedule for each worker is: \n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Mon</th>\n      <th>Tue</th>\n      <th>Wed</th>\n      <th>Thu</th>\n      <th>Fri</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>KC</th>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>4.0</td>\n      <td>0.0</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>DH</th>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>6.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>HB</th>\n      <td>4.0</td>\n      <td>7.0</td>\n      <td>4.0</td>\n      <td>0.0</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>SC</th>\n      <td>5.0</td>\n      <td>5.0</td>\n      <td>5.0</td>\n      <td>0.0</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>KS</th>\n      <td>3.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>3.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>NK</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>5.0</td>\n      <td>2.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"    Mon  Tue  Wed  Thu  Fri\nKC  2.0  0.0  4.0  0.0  3.0\nDH  0.0  2.0  0.0  6.0  0.0\nHB  4.0  7.0  4.0  0.0  4.0\nSC  5.0  5.0  5.0  0.0  5.0\nKS  3.0  0.0  1.0  3.0  0.0\nNK  0.0  0.0  0.0  5.0  2.0"},"exec_count":3,"output_type":"execute_result"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"1ba42a","input":"# Visualization of schedule\n\n# function to show bipartite graph, not important to understand, loaded from graph_two_layer.py\n%run scripts/graph_two_layer.py\n\nworkers_days = {(w, d)\n                for w in workers for d in days if hours_avail_dict[w][d] > 0}\nworkers_days_labels = {(w, d):'{:d}'.format(int(model.hrs[w, d].value))\n                       for (w, d) in workers_days}\nplt.figure()\ngraph_bipartite(workers, days, workers_days, workers_days_labels)","metadata":{"code_folding":[0]},"output":{"0":{"data":{"image/png":"81057ff663030ccfb5dd71dedb2dbe1eeb9dbc20","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":4,"metadata":{"image/png":{"height":394,"width":683}},"output_type":"execute_result"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"94594e","input":"canneries = ['can1', 'can2','can3']\nsupply = dict(zip(canneries, [75, 125, 100]))\n\nwarehouses = ['ware1','ware2','ware3','ware4']\ndemand = dict(zip(warehouses, [80, 65, 70, 85]))\n\nusc = [[464, 513, 654, 867], [352, 416, 690, 791],\n       [995, 682, 388, 685] ]\nunit_ship_cost = {\n    canneries[c]: {warehouses[w]: usc[c][w]\n                   for w in range(len(warehouses))}\n    for c in range(len(canneries))\n}\n\n# throw an error if total supply and demand do not match\nassert (sum(supply.values()) == sum(demand.values()))\n\nmodel = ConcreteModel()\n\nmodel.transp = Var(canneries, warehouses, domain=NonNegativeReals)\n\nmodel.total_cost = Objective(expr=sum(unit_ship_cost[c][w] * model.transp[c, w]\n                                      for c in canneries for w in warehouses),\n                             sense=minimize)\n\nmodel.supply_ct = ConstraintList()\nfor c in canneries:\n    model.supply_ct.add(\n        sum(model.transp[c, w] for w in warehouses) == supply[c])\n\nmodel.demand_ct = ConstraintList()\nfor w in warehouses:\n    model.demand_ct.add(\n        sum(model.transp[c, w] for c in canneries) == demand[w])\n\n# solve and display\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n\n# display solution\nprint(f\"Minimum Total Cost = ${model.total_cost():,.2f}\")\n\n# put amounts in dataframe for nicer display\nimport pandas as pd\ndvars = pd.DataFrame([[model.transp[c, w]() for w in warehouses]\n                      for c in canneries],\n                     index=canneries,\n                     columns=warehouses)\nprint(\"Number of truckloads to ship from each cannery to each warehouse:\")\ndvars","metadata":{"hidden":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"Minimum Total Cost = $152,535.00\nNumber of truckloads to ship from each cannery to each warehouse:\n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ware1</th>\n      <th>ware2</th>\n      <th>ware3</th>\n      <th>ware4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>can1</th>\n      <td>0.0</td>\n      <td>20.0</td>\n      <td>0.0</td>\n      <td>55.0</td>\n    </tr>\n    <tr>\n      <th>can2</th>\n      <td>80.0</td>\n      <td>45.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>can3</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>70.0</td>\n      <td>30.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"      ware1  ware2  ware3  ware4\ncan1    0.0   20.0    0.0   55.0\ncan2   80.0   45.0    0.0    0.0\ncan3    0.0    0.0   70.0   30.0"},"exec_count":5,"output_type":"execute_result"}},"pos":23,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"7d760d","input":"# visualization\n\n# function to show bipartite graph, not important to understand, loaded from graph_two_layer.py\n%run scripts/graph_two_layer.py\n\ncanneries_wares = {(c, w) for c in canneries for w in warehouses}\ncanneries_wares_labels = {(c, w):\n                          '{:d}'.format(int(model.transp[c, w].value))\n                          for (c, w) in canneries_wares}\nplt.figure()\ngraph_bipartite(canneries, warehouses, canneries_wares, canneries_wares_labels)","metadata":{"code_folding":[0],"hidden":true},"output":{"0":{"data":{"text/plain":"<Figure size 504x504 with 0 Axes>"},"exec_count":6,"output_type":"execute_result"},"1":{"data":{"image/png":"6c39aa44b38efa2e82f95170b38b80dbd382391a","text/plain":"<Figure size 504x504 with 1 Axes>"},"exec_count":6,"metadata":{"image/png":{"height":394,"width":404}},"output_type":"execute_result"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"c365dc","input":"# Shipping_Cost per Route (rows = Mills, cols = Distribution Centers)\nmills = ['Bahamas', 'Hong Kong', 'Korea', 'Nigeria', 'Venezuela']\ndist_ctrs = [\n    'Los Angeles', 'Chicago', 'London', 'Mexico City', 'Manila', 'Rome',\n    'Tokyo', 'New York'\n]\nship_cost = [[2, 2, 3, 3, 7, 4, 7, 1], [6, 7, 8, 10, 2, 9, 4, 8],\n             [5, 6, 8, 11, 4, 9, 1, 7], [14, 12, 6, 9, 11, 7, 5, 10],\n             [4, 3, 5, 1, 9, 6, 11, 4]]\nship_cost_dict = {\n    mills[m]: dict(zip(dist_ctrs, ship_cost[m][:]))\n    for m in range(len(mills))\n}\n\n# for display\npd.DataFrame(ship_cost_dict).transpose()","metadata":{"code_folding":[],"hidden":true},"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Los Angeles</th>\n      <th>Chicago</th>\n      <th>London</th>\n      <th>Mexico City</th>\n      <th>Manila</th>\n      <th>Rome</th>\n      <th>Tokyo</th>\n      <th>New York</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Bahamas</th>\n      <td>2</td>\n      <td>2</td>\n      <td>3</td>\n      <td>3</td>\n      <td>7</td>\n      <td>4</td>\n      <td>7</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>Hong Kong</th>\n      <td>6</td>\n      <td>7</td>\n      <td>8</td>\n      <td>10</td>\n      <td>2</td>\n      <td>9</td>\n      <td>4</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>Korea</th>\n      <td>5</td>\n      <td>6</td>\n      <td>8</td>\n      <td>11</td>\n      <td>4</td>\n      <td>9</td>\n      <td>1</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>Nigeria</th>\n      <td>14</td>\n      <td>12</td>\n      <td>6</td>\n      <td>9</td>\n      <td>11</td>\n      <td>7</td>\n      <td>5</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>Venezuela</th>\n      <td>4</td>\n      <td>3</td>\n      <td>5</td>\n      <td>1</td>\n      <td>9</td>\n      <td>6</td>\n      <td>11</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"           Los Angeles  Chicago  London  Mexico City  Manila  Rome  Tokyo  \\\nBahamas              2        2       3            3       7     4      7   \nHong Kong            6        7       8           10       2     9      4   \nKorea                5        6       8           11       4     9      1   \nNigeria             14       12       6            9      11     7      5   \nVenezuela            4        3       5            1       9     6     11   \n\n           New York  \nBahamas           1  \nHong Kong         8  \nKorea             7  \nNigeria          10  \nVenezuela         4  "},"exec_count":7,"output_type":"execute_result"}},"pos":27,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"55c592","input":"# max supply\nmax_supply = dict( zip( mills, [1000, 2000, 1000, 2000, 1000]) )\n\n# using Pandas for neater display\npd.DataFrame.from_dict(max_supply,orient=\"index\",columns=['Cotton Bolts'])","metadata":{"code_folding":[],"hidden":true},"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Cotton Bolts</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Bahamas</th>\n      <td>1000</td>\n    </tr>\n    <tr>\n      <th>Hong Kong</th>\n      <td>2000</td>\n    </tr>\n    <tr>\n      <th>Korea</th>\n      <td>1000</td>\n    </tr>\n    <tr>\n      <th>Nigeria</th>\n      <td>2000</td>\n    </tr>\n    <tr>\n      <th>Venezuela</th>\n      <td>1000</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"           Cotton Bolts\nBahamas            1000\nHong Kong          2000\nKorea              1000\nNigeria            2000\nVenezuela          1000"},"exec_count":8,"output_type":"execute_result"}},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"12b749","input":"# demand\ndemand = dict( zip( dist_ctrs,[ 500, 800, 900, 900, 800, 100, 200, 700]) )\n\n# using Pandas for display\npd.DataFrame.from_dict(demand,orient=\"index\",columns=['Cotton Bolts'])","metadata":{"code_folding":[],"hidden":true},"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Cotton Bolts</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Los Angeles</th>\n      <td>500</td>\n    </tr>\n    <tr>\n      <th>Chicago</th>\n      <td>800</td>\n    </tr>\n    <tr>\n      <th>London</th>\n      <td>900</td>\n    </tr>\n    <tr>\n      <th>Mexico City</th>\n      <td>900</td>\n    </tr>\n    <tr>\n      <th>Manila</th>\n      <td>800</td>\n    </tr>\n    <tr>\n      <th>Rome</th>\n      <td>100</td>\n    </tr>\n    <tr>\n      <th>Tokyo</th>\n      <td>200</td>\n    </tr>\n    <tr>\n      <th>New York</th>\n      <td>700</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"             Cotton Bolts\nLos Angeles           500\nChicago               800\nLondon                900\nMexico City           900\nManila                800\nRome                  100\nTokyo                 200\nNew York              700"},"exec_count":9,"output_type":"execute_result"}},"pos":29,"type":"cell"}
{"cell_type":"markdown","id":"007c41","input":"For a large problem we wouldn't want to have to type all of that out and would likely read it from another source.  If we have a table that already has the costs in it along with a way of designating the infeasible routes, then we can create the tuples and dictionary like this:","pos":45,"type":"cell"}
{"cell_type":"markdown","id":"021493","input":"We can get the list of tuples from the dictionary keys:","pos":47,"type":"cell"}
{"cell_type":"markdown","id":"08b21f","input":"To move toward making a more realistic problem we consider a transportation problem in which multiple products are transported from suppliers to customers.  To accomplish this our decision variables will need to be indexed by three sets:  product, supplier, and customer.  Like this:  \n\n```model.transp[ product, supplier, customer ]```\n\nYou can think of this as a three-dimensional array which in turn can be thought of as a stack of two-dimensional arrays:\n\n<img src=\"./images/threeD_array.png\" width = \"400\">\n\nImage from <a href=\"http://c-programmingbooks.blogspot.com/2011/11/three-dimensional-array-in-c.html\">c-programmingbooks.blogspot.com</a>\n\nThe 0th 2D array corresponds to the first product while the rows and columns of that array correspond to suppliers and customers respectively.  According to the picture, 4 units of product 1 are shipped from supplier number 1 to customer number 2.  To find the cost of shipping the products we have to sum the cost per unit times the number of units over all the elements in the three dimensional array, like this:\n\n```sum(cost[p,s,c] * model.transp[p,s,c] for p in products for s in suppliers for c in customers)```\n\nA supply constraint means that total amount of each product shipped from each supplier must match the supply available.  \n\n```\nfor p in products:\n    for s in suppliers:\n        sum( model.transp[p,s,c] for c in customers) == supply[p,s] )\n```\nIn the picture above this corresponds to summing each row of the stacked 2D arrays to make sure it matches the supplied amount.\n\nIf limited capacity is available for shipping from each supplier to each customer we have to add up the total amount of all products to be sure it isn't too large:\n```\nfor s in supplier:\n    for c in customer:\n        sum( model.transp[p,s,c] for p in products ) <= capacity )\n```\n\nSuppose we are solving an inventory problem for a large retail chain in which the suppliers are warehouses or distribution centers and the customers are the individual retail stores or outlets.  Each warehouse only serves a subset of the stores to minimize shipping costs.   We won't need decision variables for those routes that are infeasible so we'll use Technique 3 to reduce the number of decision variables.  The next self-assessment problem has you complete the code to solve a multi-product transportation problem.  This video discusses some of the code:\n","metadata":{"hidden":true},"pos":54,"type":"cell"}
{"cell_type":"markdown","id":"0f2f14","input":"## Prototypical Assignment Problem","metadata":{"heading_collapsed":true},"pos":61,"type":"cell"}
{"cell_type":"markdown","id":"10a75e","input":"## *Self-Assessment:  Remove unneeded variables*","metadata":{"heading_collapsed":true},"pos":51,"type":"cell"}
{"cell_type":"markdown","id":"1488f4","input":"Note that the new solution has zero truckloads transported along the infeasible routes.  Also, the minimum total cost has increased as the solution is forced to use more expensive routes.\n\nThe \"big M\" method is simple, but because in complex problems it can be hard to choose the right value for $M$ without introducing numerical errors it probably isn't the best method available.  However, for simple problems such as this one it works just fine.","pos":37,"type":"cell"}
{"cell_type":"markdown","id":"1f7fb4","input":"### Video walkthrough of code for self-assessment below","metadata":{"hidden":true},"pos":55,"type":"cell"}
{"cell_type":"markdown","id":"21cc77","input":"Mathematically we can frame the problem as below (identical to page 324). \n\nLet $C$ be the set of canneries and let $W$ be the set of warehouses.\n\nDecision Variables:  let $x_{c,w}$ be the number of units shipped from cannery $c \\in C$ to warehouse $w \\in W$\n\nConstants:  \n- $q_{c,w}$ is the shipping cost per unit between factory $c \\in C$ and warehouse $w \\in W$\n- $d_w$ is the number of units demanded by warehouse $w \\in W$\n- $s_c$ is the number of units supplied by cannery $c \\in C$\n\nObjective Function:  minimize $ Cost = \\displaystyle \\sum_{c \\in C} \\sum_{w \\in W} q_{c,w} x_{c,w}$\n\nConstraints:\n- Supply: $ \\displaystyle \\sum_{w \\in W} x_{c,w} = s_c, \\mbox{ for each } c \\in C$\n- Demand: $ \\displaystyle \\sum_{c \\in C} x_{c,w} = d_w, \\mbox{ for each } w \\in W$\n- Nonnegativity: $x_{c,w} \\geq 0$ for each $c \\in C, w \\in W$","metadata":{"hidden":true},"pos":19,"type":"cell"}
{"cell_type":"markdown","id":"21cd09","input":"### Overview of Techniques (video)","pos":32,"type":"cell"}
{"cell_type":"markdown","id":"287d74","input":"For example, in the Worker Scheduling problem (Textbook 3.4-15) the \"suppliers\" are the workers, the \"demanders\" are the days of the week on which workers must be scheduled, and the objects that are supplied are the hours of labor supplied by each worker.\n\nConsider the graph shown below.  KC works or \"transports\" 2 hours to Monday and so on.  Recall also that each worker is only available during some of the days.  For instance KC is only available on Monday, Wednesday, and Friday.  In the graph there are no edges connecting KC to Tuesday or Thursday since KC can't work on those days.  In the solution code KC's availability is set to zero on Tuesday and Thursday as part of the constraints.\n\n<img src=\"./images/worker_schedule.png\" width = \"400\">\n\nYou can see how the graph was produced in scripts/graph_two_layer.py if you wish, but it isn't important.  Examples showing how that code is used are included later in this notebook.","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"2c58ca","input":"## *Self-Assessment: Unbalanced Transportation Problem*","metadata":{"heading_collapsed":true},"pos":25,"type":"cell"}
{"cell_type":"markdown","id":"2e3237","input":"## Worker Scheduling as a Transportaton Problem","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"347b87","input":"### Integer Solutions Property","metadata":{"heading_collapsed":true,"hidden":true},"pos":20,"type":"cell"}
{"cell_type":"markdown","id":"368b9e","input":"The video below explores the connection between this scheduling problem and a transportation problem.  If you're content to study the code on you own, then you don't need to watch it. ","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"4a29d8","input":"### Mathematical Formulation","metadata":{"heading_collapsed":true,"hidden":true},"pos":18,"type":"cell"}
{"cell_type":"markdown","id":"4aaa57","input":"### Technique 3:  Eliminate Unnecessary Decision Variables","pos":42,"type":"cell"}
{"cell_type":"markdown","id":"52f2de","input":"Since we already know the amounts shipped along the infeasible routes will be zero we really don't need decision variables for those amounts.  We could just introduce decision variables for those routes we need, but we want to do this in an automated way instead of typing out a bunch of individual variables.  This technique is the most difficult but has a huge computational advantage for large problems with lots of infeasible routes. \n\nA nice way to do this is make a list of tuples for the feasible routes and then create a dictionary that uses those tuples as keys to look up the unit shipping cost values.  We'll then use those tuples as the index set for our decision variables.\n\nHere is one way to setup the list of tuples and the dictionary.  ","pos":43,"type":"cell"}
{"cell_type":"markdown","id":"5ab879","input":"<font size=16>Lesson 03: Transportation Problems and More Abstract Formulations</font>","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"5e08d5","input":"## Transporting Multiple Products","metadata":{"heading_collapsed":true},"pos":53,"type":"cell"}
{"cell_type":"markdown","id":"6fdde4","input":"This example is modeled after a problem found in Practical Management Science by Wayne L. Winston and S. Christian Albright.  \n\nInternational Textile Company, Ltd, Kong–based firm that distributes textiles world- wide. They have mills for weaving bolts of cotton fabric in the Bahamas, Hong Kong, Korea, Nigeria, and Venezuela.  The mills ship bolts of cotton to distribution eight distribution centers (listed below).\n\nThe company is owned by the Lao family. Present plans are to remain in Hong Kong through the transition in governments. Should the People’s Republic of China continue its economic renaissance, the company hopes to use its current base to expand operations to the mainland. International Textile has mills in the Bahamas, Hong Kong, Korea, Nigeria, and Venezuela, each weaving fabrics out of two or more raw fibers: cotton, polyester, and/or silk. The mills service eight company distribution centers.  Cotton supplies and demands at the distribution center are shown below.  Shipping costs depend on both distances and other factors and are shown below.  \n\nWe want to minimize the total shipping cost, however this is an **unbalanced** transportation problem (there is more supply than demand for cotton bolts).  To turn this into a balanced problem so that our previous code can be applied add an extra distribution center called 'Dummy' to absorb the extra supply.  Set the demand at the dummy distribution center so that total supply and total demand are balanced.  You can learn more here: <a href=\"https://www.wisdomjobs.com/e-university/quantitative-techniques-for-management-tutorial-297/unbalanced-transportation-problem-9888.html\">Unbalanced Transportation Problems</a>. Finally, set the costs of shipping to the dummy distribution center since nothing will actually be shipped.\n\nAfter balancing the problem solve the transportation problem to minimize the total shipping cost.  You don't have to retype the data, you can use the dictionaries defined in the following three cells.","metadata":{"hidden":true},"pos":26,"type":"cell"}
{"cell_type":"markdown","id":"73a950","input":"It often happens in transportation problems that due to problems or prohibitive costs, shipping is not available on along certain routes.  \n\nFor instance, in the Prototypical Example above, suppose that we cannot ship between Cannery 1 and Warehouse 2, between Cannery 2 and Warehouse 1, or between Cannery 3 and Warehouse 3.  The table below shows the shipping costs with 'X' representing infeasible routes.\n\n<img src=\"images/prototype_transport_x.png\" width=\"600\">\n\nThere are at least three techniques for representing the infeasible routes:","pos":31,"type":"cell"}
{"cell_type":"markdown","id":"74ca81","input":"Introduce a large value of the cost, \"big $M$\", on those routes that are infeasible.  If those costs are large enough, then the optimization will be forced to use zeros for the corresponding decision variables to minimize the cost.  Choose a value for $M$ that is perhaps 10 or 100 times larger than the largest cost.  Making $M$ ridiculously large can lead to numerical issues in the underlying solution method while choosing $M$ too small may lead to incorrect results.  **Always inspect your solution to make sure it makes sense.  Are there zero amounts transported along the infeasible routes?**\n\nHere is the python code from the Protypical Example above adapted use the big $M$ method.","pos":35,"type":"cell"}
{"cell_type":"markdown","id":"76745c","input":"### Explanation of Pyomo Solution (video)","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"76e8cf","input":"## Prototypical Transportation Example from Textbook","metadata":{"heading_collapsed":true},"pos":16,"type":"cell"}
{"cell_type":"markdown","id":"7864d8","input":"This problem is described completely on page 348 of the textbook.  We're including it here as an example to show how to solve it using Pyomo.  In short, we're assigning 3 machines to 4 locations.  Because this is imbalanced, a 4th dummy machine is added.  Each machine has an hourly cost that depends on the location.  Machine 2 cannot be used in location 2 and there is no cost associated with assigning the dummy machine to any location since this just means that no machine is installed at that location.  The mathematical formulation is identical to that of the transportation problem using a supply and demand of 1 at each machine and location. The cost table is shown here for convenience:\n\n<img src=\"images/table_9p25.png\" width=\"400\">\n\nThe $M$ will be a very large value (\"big M\") to prevent an assignment of machine 2 to location 2.\n\nHere is a Pyomo solution:","metadata":{"hidden":true},"pos":62,"type":"cell"}
{"cell_type":"markdown","id":"7b647f","input":"### Pyomo Solution","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"830cdd","input":"### Pyomo Solution","metadata":{"hidden":true},"pos":22,"type":"cell"}
{"cell_type":"markdown","id":"86980d","input":"## *Self-Assessment: Cheaper Schedule?*","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"875f2a","input":"## *Self-Assessment: Multiple Products*","pos":57,"type":"cell"}
{"cell_type":"markdown","id":"89c581","input":"### Visualization","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"8ca002","input":"# Transportation Models","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"a2abc4","input":"## Dealing with Infeasible Routes","pos":30,"type":"cell"}
{"cell_type":"markdown","id":"a4cc14","input":"This technique is clean but does introduce extra constraints.  This really isn't a big deal for small problems, but for large problems it can add a lot of unnecessary computational complexity.  The best solution for large problems is explained in the next section.","pos":41,"type":"cell"}
{"cell_type":"markdown","id":"a74a72","input":"For transportation and assignment problems *if the amounts supplied and demanded are integer valued, then the solutions will always be integers.*\n\nThis is super important because it allows us to use the Simplex method or other LP solvers to achieve integer valued solutions even if we allow real numbers for the decision variables.  If we restrict the decision variables to be integer valued, then the the solution procedure is much more computationally intensive.  We'll discuss this in a later lesson about Integer Programming.","metadata":{"hidden":true},"pos":21,"type":"cell"}
{"cell_type":"markdown","id":"ae4357","input":"This technique is straightforward.  Just add additional constraints that set the transported amounts to zero along the infeasible routes.  Below we've modified the Prototypical Example python solution with extra constraints.","pos":39,"type":"cell"}
{"cell_type":"markdown","id":"b26b39","input":"Now here is the modified python to utilize only the needed decision variables.  We've included the list of tuples and dictionary for completeness.","pos":49,"type":"cell"}
{"cell_type":"markdown","id":"b6ece9","input":"For the worker scheduling problem management now insists that each worker be available for up to 8 hours on each day.  Copy the code above into a new cell  and modify it to solve this new problem.  How much lower is the total cost?  Which worker gets assigned the most hours?  Why does one worker get so many hours?","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"beed91","input":"### Technique 1: The \"Big M\" Method","pos":34,"type":"cell"}
{"cell_type":"markdown","id":"d601d9","input":"In Lesson 2 we presented a Supply and Demand problem as a Self-Assessment problem. That problem is actually a \"transportation problem\".  Transportation problems are characterized by having a set of \"suppliers\" and a set of \"demanders\".  The objects that are supplied can be goods or services.  ","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"db4db6","input":"### Technique 2:  Use Extra Constraints","pos":38,"type":"cell"}
{"cell_type":"markdown","id":"e014e3","input":"We like to think of an assignment problem as a transportation problem in which we are transporting objects to destinations.  Assigning workers to jobs can be transporting workers to jobs where each worker has a supply of 1 and each job has a demand of 1.  To solve assignment problems as linear programs the supply and demand must match, that is the problem must be balanced.  In other words we need the same number of workers as jobs.  If the problem isn't balanced then we can add dummy workers or dummy jobs to balance the problem.","pos":60,"type":"cell"}
{"cell_type":"markdown","id":"e3db8d","input":"Products A and B are supplied by warehouses wA, wB, wC to stores sA, sB, sC, sD, sE.  The supply, demand, shipping capacity, and shipping cost per unit (dollars per unit) are shown in the Excel spreadsheet `transp_prob_multi.xlsx` in the data subfolder.  Some of the code for the pyomo solution is shown below including details of how to read the data from the Excel file.  Complete the code to minimize the total shipping cost.  Hint:  the answer is \\$23,700.","pos":58,"type":"cell"}
{"cell_type":"markdown","id":"ebb257","input":"Revisit the worker scheduling problem from the textbook (3.4-15).  Start with the code above and modify it using Technique 3 to eliminate unneeded decision variables.  Your new solution should have 18 decision variables instead of 30 and the overall answer should be the same.","metadata":{"hidden":true},"pos":52,"type":"cell"}
{"cell_type":"markdown","id":"eff624","input":"You should read the complete details of this problem beginning on page 319 of the textbook.  In short we want to transport truckloads of canned peas from canneries to warehouses.  The supply (Output), demand (Allocation), and shipping cost per truckload are shown in this table:\n\n<img src=\"images/prototype_transport.png\" width=\"600\">\n\nThis is an example of a **balanced** transportation problem because the total supply equals, or is balanced by, the total demand.","metadata":{"hidden":true},"pos":17,"type":"cell"}
{"cell_type":"markdown","id":"f4726d","input":"We use a graph to visualize the solution below.  You don't really have to do this in the homework, but we include it in case it's helpful to improve your understanding.   ","pos":12,"type":"cell"}
{"id":0,"time":1611509318474,"type":"user"}
{"last_load":1611509320014,"type":"file"}