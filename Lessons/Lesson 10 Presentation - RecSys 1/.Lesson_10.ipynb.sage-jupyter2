{"backend_state":"init","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{"height":"calc(100% - 180px)","left":"10px","top":"150px","width":"260.517px"},"toc_section_display":true,"toc_window_display":true},"varInspector":{"cols":{"lenName":16,"lenType":16,"lenVar":40},"kernels_config":{"python":{"delete_cmd_postfix":"","delete_cmd_prefix":"del ","library":"var_list.py","varRefreshCmd":"print(var_dic_list())"},"r":{"delete_cmd_postfix":") ","delete_cmd_prefix":"rm(","library":"var_list.r","varRefreshCmd":"cat(var_dic_list()) "}},"types_to_exclude":["module","function","builtin_function_or_method","instance","_Feature"],"window_display":false}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":1,"id":"bcaa3c","input":"# EXECUTE FIRST\n\n# computational imports\nimport numpy as np\nimport pandas as pd\nfrom ast import literal_eval\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import linear_kernel\n\n# plotting imports\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\n# for reading files from urls\nimport urllib.request\n# display imports\nfrom IPython.display import display, IFrame\nfrom IPython.core.display import HTML\n\n# import notebook styling for tables and width etc.\nresponse = urllib.request.urlopen('https://raw.githubusercontent.com/DataScienceUWL/DS775v2/master/ds755.css')\nHTML(response.read().decode(\"utf-8\"));","metadata":{"code_folding":[0]},"pos":0,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"217c8c","input":"# enter your code here","pos":24,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"af8606","input":"# enter your code here","pos":27,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"6bd47e","input":"def build_chart(gen_df, percentile=0.8):\n    \n    #Ask for preferred genres\n    print(\"Input preferred genre\")\n    genre = input()\n    \n    #Ask for lower limit of duration\n    print(\"Input shortest duration\")\n    low_time = int(input())\n    \n    #Ask for upper limit of duration\n    print(\"Input longest duration\")\n    high_time = int(input())\n    \n    #Ask for lower limit of timeline\n    print(\"Input earliest year\")\n    low_year = int(input())\n    \n    #Ask for upper limit of timeline\n    print(\"Input latest year\")\n    high_year = int(input())\n    \n    #Define a new movies variable to store the preferred movies. Copy the contents of gen_df to movies\n    movies = gen_df.copy()\n    \n    #Filter based on the condition\n    movies = movies[(movies['genres'].apply(lambda x: genre in x)) & #updated filtering based on a list.\n                    (movies['runtime'] >= low_time) & \n                    (movies['runtime'] <= high_time) & \n                    (movies['year'] >= low_year) & \n                    (movies['year'] <= high_year)]\n    \n    #Compute the values of C and m for the filtered movies\n    C = movies['vote_average'].mean()\n    m = movies['vote_count'].quantile(percentile)\n    \n    #Only consider movies that have higher than m votes. Save this in a new dataframe q_movies\n    q_movies = movies.copy().loc[movies['vote_count'] >= m]\n    \n    #Calculate score using the IMDB formula\n    q_movies['score'] = q_movies.apply(lambda x: (x['vote_count']/(x['vote_count']+m) * x['vote_average']) \n                                       + (m/(m+x['vote_count']) * C)\n                                       ,axis=1)\n\n    #Sort movies in descending order of their scores\n    q_movies = q_movies.sort_values('score', ascending=False)\n    \n    return q_movies","pos":29,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"1a813b","input":"out_movies = build_chart(df, .8)","metadata":{"cocalc":{"outputs":{"1":{"name":"input","opts":{"password":false,"prompt":""},"output_type":"stream","value":"Family"},"3":{"name":"input","opts":{"password":false,"prompt":""},"output_type":"stream","value":"80"},"4":{"name":"input","opts":{"password":false,"prompt":""},"output_type":"stream"},"6":{"name":"input","opts":{"password":false,"prompt":""},"output_type":"stream"},"8":{"name":"input","opts":{"password":false,"prompt":""},"output_type":"stream"}}}},"output":{"0":{"name":"stdout","output_type":"stream","text":"Input preferred genre\n"},"1":{"name":"input","opts":{"password":false,"prompt":""},"output_type":"stream","value":"Family"},"2":{"name":"stdout","output_type":"stream","text":"Input shortest duration\n"},"3":{"name":"input","opts":{"password":false,"prompt":""},"output_type":"stream","value":"80"},"4":{"name":"input","opts":{"password":false,"prompt":""},"output_type":"stream"},"5":{"name":"stdout","output_type":"stream","text":"Input longest duration\n","value":"120"},"6":{"name":"input","opts":{"password":false,"prompt":""},"output_type":"stream"},"7":{"name":"stdout","output_type":"stream","text":"Input earliest year\n","value":"1980"},"8":{"name":"input","opts":{"password":false,"prompt":""},"output_type":"stream"},"9":{"name":"stdout","output_type":"stream","text":"Input latest year\n","value":"2000"}},"pos":31,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"20a777","input":"#set the score rank column\nout_movies['scoreRank'] = np.arange(len(out_movies))\n#sort by score1 and set the score1rank column\nout_movies = out_movies.sort_values('score1', ascending=False)\nout_movies['score1Rank'] = np.arange(len(out_movies))\n#sort by score2 and set the score2rank column\nout_movies = out_movies.sort_values('score2', ascending=False)\nout_movies['score2Rank'] = np.arange(len(out_movies))\n#resort by score\nout_movies = out_movies.sort_values('score', ascending=False)\n\n#display the final result with just name and scores\nout_movies[['title','score1Rank', 'score2Rank', 'scoreRank' ]]","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>title</th>\n      <th>score1Rank</th>\n      <th>score2Rank</th>\n      <th>scoreRank</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1225</th>\n      <td>Back to the Future</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>359</th>\n      <td>The Lion King</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>Toy Story</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>588</th>\n      <td>Beauty and the Beast</td>\n      <td>4</td>\n      <td>4</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>1902</th>\n      <td>Back to the Future Part II</td>\n      <td>5</td>\n      <td>5</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>581</th>\n      <td>Aladdin</td>\n      <td>6</td>\n      <td>6</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>1798</th>\n      <td>Mulan</td>\n      <td>3</td>\n      <td>3</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>2997</th>\n      <td>Toy Story 2</td>\n      <td>7</td>\n      <td>7</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>1065</th>\n      <td>E.T. the Extra-Terrestrial</td>\n      <td>8</td>\n      <td>8</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>1903</th>\n      <td>Back to the Future Part III</td>\n      <td>10</td>\n      <td>10</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>1972</th>\n      <td>The Little Mermaid</td>\n      <td>9</td>\n      <td>9</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>579</th>\n      <td>Home Alone</td>\n      <td>11</td>\n      <td>11</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Jumanji</td>\n      <td>12</td>\n      <td>12</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>2242</th>\n      <td>A Bug's Life</td>\n      <td>13</td>\n      <td>13</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>2837</th>\n      <td>Home Alone 2: Lost in New York</td>\n      <td>14</td>\n      <td>14</td>\n      <td>14</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"                               title  score1Rank  score2Rank  scoreRank\n1225              Back to the Future           0           0          0\n359                    The Lion King           1           1          1\n0                          Toy Story           2           2          2\n588             Beauty and the Beast           4           4          3\n1902      Back to the Future Part II           5           5          4\n581                          Aladdin           6           6          5\n1798                           Mulan           3           3          6\n2997                     Toy Story 2           7           7          7\n1065      E.T. the Extra-Terrestrial           8           8          8\n1903     Back to the Future Part III          10          10          9\n1972              The Little Mermaid           9           9         10\n579                       Home Alone          11          11         11\n1                            Jumanji          12          12         12\n2242                    A Bug's Life          13          13         13\n2837  Home Alone 2: Lost in New York          14          14         14"},"exec_count":14,"output_type":"execute_result"}},"pos":33,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"014db9","input":"# enter your code here","pos":38,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"890483","input":"# enter your code here","pos":41,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"cd81df","input":"# enter your code here","pos":44,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"3796b7","input":"#remember what's in snip\ndisplay(snip)\n\n#Import TfIdfVectorizer from the scikit-learn library\n# from sklearn.feature_extraction.text import TfidfVectorizer\n\n#Define a TF-IDF Vectorizer Object. Tell the vectorizer we'll want to remove english stopwords for whatever we pass to it.\ntfidf = TfidfVectorizer(stop_words='english')\n\n#if we had any empty overview fields, we'd need to replace NaN with an empty string. \n# we don't in our snip dataset, but we'll step through it as a good practice\nsnip['overview'] = snip['overview'].fillna('')\n\n#Construct the required TF-IDF matrix by applying the fit_transform method on the overview feature\ntfidf_matrix = tfidf.fit_transform(snip['overview'])\n#Output the shape of tfidf_matrix\ntfidf_matrix.shape","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>title</th>\n      <th>budget</th>\n      <th>genres</th>\n      <th>overview</th>\n      <th>revenue</th>\n      <th>runtime</th>\n      <th>vote_average</th>\n      <th>vote_count</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>862</td>\n      <td>Toy Story</td>\n      <td>30000000.0</td>\n      <td>[Animation, Comedy, Family]</td>\n      <td>Led by Woody, Andy's toys live happily in his ...</td>\n      <td>373554033</td>\n      <td>81.0</td>\n      <td>7.7</td>\n      <td>5415</td>\n      <td>1995</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>8844</td>\n      <td>Jumanji</td>\n      <td>65000000.0</td>\n      <td>[Adventure, Fantasy, Family]</td>\n      <td>When siblings Judy and Peter discover an encha...</td>\n      <td>262797249</td>\n      <td>104.0</td>\n      <td>6.9</td>\n      <td>2413</td>\n      <td>1995</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>15602</td>\n      <td>Grumpier Old Men</td>\n      <td>0.0</td>\n      <td>[Romance, Comedy]</td>\n      <td>A family wedding reignites the ancient feud be...</td>\n      <td>0</td>\n      <td>101.0</td>\n      <td>6.5</td>\n      <td>92</td>\n      <td>1995</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>31357</td>\n      <td>Waiting to Exhale</td>\n      <td>16000000.0</td>\n      <td>[Comedy, Drama, Romance]</td>\n      <td>Cheated on, mistreated and stepped on, the wom...</td>\n      <td>81452156</td>\n      <td>127.0</td>\n      <td>6.1</td>\n      <td>34</td>\n      <td>1995</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>11862</td>\n      <td>Father of the Bride Part II</td>\n      <td>0.0</td>\n      <td>[Comedy]</td>\n      <td>Just when George Banks has recovered from his ...</td>\n      <td>76578911</td>\n      <td>106.0</td>\n      <td>5.7</td>\n      <td>173</td>\n      <td>1995</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"      id                        title      budget  \\\n0    862                    Toy Story  30000000.0   \n1   8844                      Jumanji  65000000.0   \n2  15602             Grumpier Old Men         0.0   \n3  31357            Waiting to Exhale  16000000.0   \n4  11862  Father of the Bride Part II         0.0   \n\n                         genres  \\\n0   [Animation, Comedy, Family]   \n1  [Adventure, Fantasy, Family]   \n2             [Romance, Comedy]   \n3      [Comedy, Drama, Romance]   \n4                      [Comedy]   \n\n                                            overview    revenue  runtime  \\\n0  Led by Woody, Andy's toys live happily in his ...  373554033     81.0   \n1  When siblings Judy and Peter discover an encha...  262797249    104.0   \n2  A family wedding reignites the ancient feud be...          0    101.0   \n3  Cheated on, mistreated and stepped on, the wom...   81452156    127.0   \n4  Just when George Banks has recovered from his ...   76578911    106.0   \n\n   vote_average  vote_count  year  \n0           7.7        5415  1995  \n1           6.9        2413  1995  \n2           6.5          92  1995  \n3           6.1          34  1995  \n4           5.7         173  1995  "},"exec_count":18,"output_type":"execute_result"},"1":{"data":{"text/plain":"(5, 131)"},"exec_count":18,"output_type":"execute_result"}},"pos":46,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"682a84","input":"#this extracts all the words (features) in the matrix - we'll use this for our columns\nfeature_names = tfidf.get_feature_names()\n#this extracts the IDs of the movies - we'll use this for our rows\ncorpus_index = snip['id']\n#this puts both into a dataframe. \n#The tfidf_matrix is usually a sparse matrix, meaning not all row/col combinations have a value. Using todense() puts a zero in that row/col slot\n\npd.DataFrame(tfidf_matrix.todense(), index=corpus_index, columns=feature_names)\n","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>26</th>\n      <th>adult</th>\n      <th>afraid</th>\n      <th>alan</th>\n      <th>alarming</th>\n      <th>ancient</th>\n      <th>andy</th>\n      <th>arrival</th>\n      <th>aside</th>\n      <th>away</th>\n      <th>...</th>\n      <th>vannah</th>\n      <th>waiting</th>\n      <th>way</th>\n      <th>wedding</th>\n      <th>wife</th>\n      <th>women</th>\n      <th>woody</th>\n      <th>world</th>\n      <th>worry</th>\n      <th>years</th>\n    </tr>\n    <tr>\n      <th>id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>862</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.143369</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.430106</td>\n      <td>0.000000</td>\n      <td>0.143369</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.430106</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>8844</th>\n      <td>0.152582</td>\n      <td>0.152582</td>\n      <td>0.000000</td>\n      <td>0.305165</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n      <td>0.152582</td>\n      <td>0.000000</td>\n      <td>0.152582</td>\n    </tr>\n    <tr>\n      <th>15602</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.174202</td>\n      <td>0.174202</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.174202</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.140545</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.174202</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>31357</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>0.2</td>\n      <td>0.2</td>\n      <td>0.2</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.2</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>11862</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.186823</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.150728</td>\n      <td>0.186823</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 131 columns</p>\n</div>","text/plain":"             26     adult    afraid      alan  alarming   ancient      andy  \\\nid                                                                            \n862    0.000000  0.000000  0.143369  0.000000  0.000000  0.000000  0.430106   \n8844   0.152582  0.152582  0.000000  0.305165  0.000000  0.000000  0.000000   \n15602  0.000000  0.000000  0.000000  0.000000  0.174202  0.174202  0.000000   \n31357  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000   \n11862  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000   \n\n        arrival     aside      away  ...  vannah  waiting  way   wedding  \\\nid                                   ...                                   \n862    0.000000  0.143369  0.000000  ...     0.0      0.0  0.0  0.000000   \n8844   0.000000  0.000000  0.000000  ...     0.0      0.0  0.0  0.000000   \n15602  0.000000  0.000000  0.174202  ...     0.0      0.0  0.0  0.140545   \n31357  0.000000  0.000000  0.000000  ...     0.2      0.2  0.2  0.000000   \n11862  0.186823  0.000000  0.000000  ...     0.0      0.0  0.0  0.150728   \n\n           wife  women     woody     world     worry     years  \nid                                                              \n862    0.000000    0.0  0.430106  0.000000  0.000000  0.000000  \n8844   0.000000    0.0  0.000000  0.152582  0.000000  0.152582  \n15602  0.000000    0.0  0.000000  0.000000  0.174202  0.000000  \n31357  0.000000    0.2  0.000000  0.000000  0.000000  0.000000  \n11862  0.186823    0.0  0.000000  0.000000  0.000000  0.000000  \n\n[5 rows x 131 columns]"},"exec_count":19,"output_type":"execute_result"}},"pos":48,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"b004c5","input":"#read in the data\ndf = pd.read_csv('data/movies_metadata.csv')\n\n#print the shape of the dataframe\nprint(f\"The shape is {df.shape}\")\n\n#get the column info\ndf.info()\n\n#####################\n# Helper Functions\n#####################\n#converts ints & string representations of numbers to floats\ndef to_float(x):\n    try:\n        x = float(x)\n    except:\n        x = np.nan\n    return x\n\n#Helper function to convert NaT to 0 and all other years to integers.\ndef convert_int(x):\n    try:\n        return int(x)\n    except:\n        return 0\n\n#we can run both apply and astype in one line by chaining them\ndf['budget'] = df['budget'].apply(to_float).astype('float')\n\n#Convert release_date into pandas datetime format\ndf['release_date'] = pd.to_datetime(df['release_date'],errors='coerce')\n\n#Extract year from the datetime and convert to integer. (Again, we're chaining functions)\ndf['year'] = df['release_date'].apply(lambda x: str(x).split('-')[0] if x != np.nan else np.nan).apply(convert_int)\n\n#convert vote_count to integer\ndf['vote_count'] = df['vote_count'].apply(lambda x: str(x).split('-')[0] if x != np.nan else np.nan).apply(convert_int)\n\n#Convert all NaN into stringified empty lists and apply literal eval and convert to list by chaining functions\ndf['genres'] = df['genres'].fillna('[]').apply(literal_eval).apply(lambda x: [i['name'] for i in x] if isinstance(x, list) else [])\n\n#filter to just the relevant columns\ndf = df[['id','title','budget', 'genres', 'overview', 'revenue', 'runtime', 'vote_average', 'vote_count', 'year']]\ndf.head()","output":{"0":{"name":"stdout","output_type":"stream","text":"The shape is (5000, 24)\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 5000 entries, 0 to 4999\nData columns (total 24 columns):\n #   Column                 Non-Null Count  Dtype  \n---  ------                 --------------  -----  \n 0   adult                  5000 non-null   bool   \n 1   belongs_to_collection  825 non-null    object \n 2   budget                 5000 non-null   int64  \n 3   genres                 5000 non-null   object \n 4   homepage               311 non-null    object \n 5   id                     5000 non-null   int64  \n 6   imdb_id                5000 non-null   object \n 7   original_language      5000 non-null   object \n 8   original_title         5000 non-null   object \n 9   overview               4979 non-null   object \n 10  popularity             5000 non-null   float64\n 11  poster_path            4979 non-null   object \n 12  production_companies   5000 non-null   object \n 13  production_countries   5000 non-null   object \n 14  release_date           4996 non-null   object \n 15  revenue                5000 non-null   int64  \n 16  runtime                4994 non-null   float64\n 17  spoken_languages       5000 non-null   object \n 18  status                 4994 non-null   object \n 19  tagline                3749 non-null   object \n 20  title                  5000 non-null   object \n 21  video                  5000 non-null   bool   \n 22  vote_average           5000 non-null   float64\n 23  vote_count             5000 non-null   int64  \ndtypes: bool(2), float64(3), int64(4), object(15)\nmemory usage: 869.3+ KB\n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>title</th>\n      <th>budget</th>\n      <th>genres</th>\n      <th>overview</th>\n      <th>revenue</th>\n      <th>runtime</th>\n      <th>vote_average</th>\n      <th>vote_count</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>862</td>\n      <td>Toy Story</td>\n      <td>30000000.0</td>\n      <td>[Animation, Comedy, Family]</td>\n      <td>Led by Woody, Andy's toys live happily in his ...</td>\n      <td>373554033</td>\n      <td>81.0</td>\n      <td>7.7</td>\n      <td>5415</td>\n      <td>1995</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>8844</td>\n      <td>Jumanji</td>\n      <td>65000000.0</td>\n      <td>[Adventure, Fantasy, Family]</td>\n      <td>When siblings Judy and Peter discover an encha...</td>\n      <td>262797249</td>\n      <td>104.0</td>\n      <td>6.9</td>\n      <td>2413</td>\n      <td>1995</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>15602</td>\n      <td>Grumpier Old Men</td>\n      <td>0.0</td>\n      <td>[Romance, Comedy]</td>\n      <td>A family wedding reignites the ancient feud be...</td>\n      <td>0</td>\n      <td>101.0</td>\n      <td>6.5</td>\n      <td>92</td>\n      <td>1995</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>31357</td>\n      <td>Waiting to Exhale</td>\n      <td>16000000.0</td>\n      <td>[Comedy, Drama, Romance]</td>\n      <td>Cheated on, mistreated and stepped on, the wom...</td>\n      <td>81452156</td>\n      <td>127.0</td>\n      <td>6.1</td>\n      <td>34</td>\n      <td>1995</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>11862</td>\n      <td>Father of the Bride Part II</td>\n      <td>0.0</td>\n      <td>[Comedy]</td>\n      <td>Just when George Banks has recovered from his ...</td>\n      <td>76578911</td>\n      <td>106.0</td>\n      <td>5.7</td>\n      <td>173</td>\n      <td>1995</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"      id                        title      budget  \\\n0    862                    Toy Story  30000000.0   \n1   8844                      Jumanji  65000000.0   \n2  15602             Grumpier Old Men         0.0   \n3  31357            Waiting to Exhale  16000000.0   \n4  11862  Father of the Bride Part II         0.0   \n\n                         genres  \\\n0   [Animation, Comedy, Family]   \n1  [Adventure, Fantasy, Family]   \n2             [Romance, Comedy]   \n3      [Comedy, Drama, Romance]   \n4                      [Comedy]   \n\n                                            overview    revenue  runtime  \\\n0  Led by Woody, Andy's toys live happily in his ...  373554033     81.0   \n1  When siblings Judy and Peter discover an encha...  262797249    104.0   \n2  A family wedding reignites the ancient feud be...          0    101.0   \n3  Cheated on, mistreated and stepped on, the wom...   81452156    127.0   \n4  Just when George Banks has recovered from his ...   76578911    106.0   \n\n   vote_average  vote_count  year  \n0           7.7        5415  1995  \n1           6.9        2413  1995  \n2           6.5          92  1995  \n3           6.1          34  1995  \n4           5.7         173  1995  "},"exec_count":2,"output_type":"execute_result"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"110bf2","input":"# Import linear_kernel to compute the dot product\n# from sklearn.metrics.pairwise import linear_kernel\n\n# Compute the cosine similarity matrix\ncosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)\n\n#let's look at what we've got.\npd.DataFrame(cosine_sim, columns=snip['title'], index=snip['title'])","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>title</th>\n      <th>Toy Story</th>\n      <th>Jumanji</th>\n      <th>Grumpier Old Men</th>\n      <th>Waiting to Exhale</th>\n      <th>Father of the Bride Part II</th>\n    </tr>\n    <tr>\n      <th>title</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Toy Story</th>\n      <td>1.000000</td>\n      <td>0.014239</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>Jumanji</th>\n      <td>0.014239</td>\n      <td>1.000000</td>\n      <td>0.034603</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>Grumpier Old Men</th>\n      <td>0.000000</td>\n      <td>0.034603</td>\n      <td>1.000000</td>\n      <td>0.0</td>\n      <td>0.021184</td>\n    </tr>\n    <tr>\n      <th>Waiting to Exhale</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.0</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>Father of the Bride Part II</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.021184</td>\n      <td>0.0</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"title                        Toy Story   Jumanji  Grumpier Old Men  \\\ntitle                                                                \nToy Story                     1.000000  0.014239          0.000000   \nJumanji                       0.014239  1.000000          0.034603   \nGrumpier Old Men              0.000000  0.034603          1.000000   \nWaiting to Exhale             0.000000  0.000000          0.000000   \nFather of the Bride Part II   0.000000  0.000000          0.021184   \n\ntitle                        Waiting to Exhale  Father of the Bride Part II  \ntitle                                                                        \nToy Story                                  0.0                     0.000000  \nJumanji                                    0.0                     0.000000  \nGrumpier Old Men                           0.0                     0.021184  \nWaiting to Exhale                          1.0                     0.000000  \nFather of the Bride Part II                0.0                     1.000000  "},"exec_count":20,"output_type":"execute_result"}},"pos":50,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"2a9d39","input":"#create the reverse mapping\nindices = pd.Series(snip.index, index=snip['title']).drop_duplicates()\n#print it \nprint(f'The index series looks like this: \\n{indices}')\n\n#if I wanted to get the index from the title I would do this:\nprint(f'The index for Waiting to Exhale is: {indices[\"Waiting to Exhale\"]}')\n      \n","output":{"0":{"name":"stdout","output_type":"stream","text":"The index series looks like this: \ntitle\nToy Story                      0\nJumanji                        1\nGrumpier Old Men               2\nWaiting to Exhale              3\nFather of the Bride Part II    4\ndtype: int64\nThe index for Waiting to Exhale is: 3\n"}},"pos":52,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"595d19","input":"cosine_sim[2]","output":{"0":{"data":{"text/plain":"array([0.       , 0.034603 , 1.       , 0.       , 0.0211841])"},"exec_count":22,"output_type":"execute_result"}},"pos":54,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"e3a22b","input":"sim_scores = list(enumerate(cosine_sim[2]))\nsim_scores","output":{"0":{"data":{"text/plain":"[(0, 0.0),\n (1, 0.03460299560436649),\n (2, 0.9999999999999992),\n (3, 0.0),\n (4, 0.02118409541454349)]"},"exec_count":23,"output_type":"execute_result"}},"pos":56,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"f5733f","input":"del sim_scores[2]\nsim_scores","output":{"0":{"data":{"text/plain":"[(0, 0.0), (1, 0.03460299560436649), (3, 0.0), (4, 0.02118409541454349)]"},"exec_count":24,"output_type":"execute_result"}},"pos":58,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"ee51d8","input":"sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\nsim_scores","output":{"0":{"data":{"text/plain":"[(1, 0.03460299560436649), (4, 0.02118409541454349), (0, 0.0), (3, 0.0)]"},"exec_count":25,"output_type":"execute_result"}},"pos":60,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"a48a21","input":"top_two = [i[0] for i in sim_scores[0:2]]\nprint(f'The top two indices are: {top_two}')\n\nsnip.iloc[top_two]","output":{"0":{"name":"stdout","output_type":"stream","text":"The top two indices are: [1, 4]\n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>title</th>\n      <th>budget</th>\n      <th>genres</th>\n      <th>overview</th>\n      <th>revenue</th>\n      <th>runtime</th>\n      <th>vote_average</th>\n      <th>vote_count</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>8844</td>\n      <td>Jumanji</td>\n      <td>65000000.0</td>\n      <td>[Adventure, Fantasy, Family]</td>\n      <td>When siblings Judy and Peter discover an encha...</td>\n      <td>262797249</td>\n      <td>104.0</td>\n      <td>6.9</td>\n      <td>2413</td>\n      <td>1995</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>11862</td>\n      <td>Father of the Bride Part II</td>\n      <td>0.0</td>\n      <td>[Comedy]</td>\n      <td>Just when George Banks has recovered from his ...</td>\n      <td>76578911</td>\n      <td>106.0</td>\n      <td>5.7</td>\n      <td>173</td>\n      <td>1995</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"      id                        title      budget  \\\n1   8844                      Jumanji  65000000.0   \n4  11862  Father of the Bride Part II         0.0   \n\n                         genres  \\\n1  [Adventure, Fantasy, Family]   \n4                      [Comedy]   \n\n                                            overview    revenue  runtime  \\\n1  When siblings Judy and Peter discover an encha...  262797249    104.0   \n4  Just when George Banks has recovered from his ...   76578911    106.0   \n\n   vote_average  vote_count  year  \n1           6.9        2413  1995  \n4           5.7         173  1995  "},"exec_count":26,"output_type":"execute_result"}},"pos":62,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"d14815","input":"def content_recommender(df, title, cosine_sim, indices, topN=2): \n    # Obtain the index of the movie that matches the title\n    idx = indices[title]\n    # Get the pairwsie similarity scores of all movies with that movie and convert to tuples\n    sim_scores = list(enumerate(cosine_sim[idx]))\n    #delete the movie that was passed in\n    del sim_scores[idx]\n    \n    # Sort the movies based on the cosine similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n    \n    # Get the scores of the top-n most similar movies.\n    sim_scores = sim_scores[:topN]\n    \n    # Get the movie indices\n    movie_indices = [i[0] for i in sim_scores]\n    \n    # Return the top 10 most similar movies\n    return df.iloc[movie_indices]","pos":65,"type":"cell"}
{"cell_type":"code","exec_count":28,"id":"edd98b","input":"content_recommender(snip, 'Grumpier Old Men', cosine_sim, indices, 2)","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>title</th>\n      <th>budget</th>\n      <th>genres</th>\n      <th>overview</th>\n      <th>revenue</th>\n      <th>runtime</th>\n      <th>vote_average</th>\n      <th>vote_count</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>8844</td>\n      <td>Jumanji</td>\n      <td>65000000.0</td>\n      <td>[Adventure, Fantasy, Family]</td>\n      <td>When siblings Judy and Peter discover an encha...</td>\n      <td>262797249</td>\n      <td>104.0</td>\n      <td>6.9</td>\n      <td>2413</td>\n      <td>1995</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>11862</td>\n      <td>Father of the Bride Part II</td>\n      <td>0.0</td>\n      <td>[Comedy]</td>\n      <td>Just when George Banks has recovered from his ...</td>\n      <td>76578911</td>\n      <td>106.0</td>\n      <td>5.7</td>\n      <td>173</td>\n      <td>1995</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"      id                        title      budget  \\\n1   8844                      Jumanji  65000000.0   \n4  11862  Father of the Bride Part II         0.0   \n\n                         genres  \\\n1  [Adventure, Fantasy, Family]   \n4                      [Comedy]   \n\n                                            overview    revenue  runtime  \\\n1  When siblings Judy and Peter discover an encha...  262797249    104.0   \n4  Just when George Banks has recovered from his ...   76578911    106.0   \n\n   vote_average  vote_count  year  \n1           6.9        2413  1995  \n4           5.7         173  1995  "},"exec_count":28,"output_type":"execute_result"}},"pos":67,"type":"cell"}
{"cell_type":"code","exec_count":29,"id":"b59cc8","input":"# enter your code here","pos":71,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"8a9625","input":"#let's fetch just the first 5 rows of our dataframe\nsnip = df[:5]\ndisplay(snip)\n\n#let's create a filter that will be True if \"Family\" is in the list of genres for each movie\nhasFamilyFilter = snip['genres'].apply(lambda x: \"Family\" in x)\nprint(f'Family filter values \\n {hasFamilyFilter}')\n\n#let's create a filter that will be True if \"Drama\" is in the list of genres of each movie\nhasDramaFilter = snip['genres'].apply(lambda x: \"Drama\" in x)\nprint(f'Drama filter values \\n{hasDramaFilter}')\n\n#let's filter our dataset to just those movies that have Family OR Drama. Note the placement of the parenthesis\ndisplay(snip[(hasFamilyFilter) | (hasDramaFilter)])\n\n#let's filter our dataset to just those movies that have Comedy AND Romance OR have a vote_count > 5000.\n#let's use variables for our two genres\nselected1 = 'Romance'\nselected2 = 'Comedy'\n\n#instead of creating stand-alone filters, we'll filter \"on the fly\" using the apply right in the filter\n#again, pay attention to where the parentheses go\nsnip[(snip['vote_count'] > 5000) | \n     ((snip['genres'].apply(lambda x: selected1 in x)) & \n      (snip['genres'].apply(lambda x: selected2 in x)))]\n","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>title</th>\n      <th>budget</th>\n      <th>genres</th>\n      <th>overview</th>\n      <th>revenue</th>\n      <th>runtime</th>\n      <th>vote_average</th>\n      <th>vote_count</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>862</td>\n      <td>Toy Story</td>\n      <td>30000000.0</td>\n      <td>[Animation, Comedy, Family]</td>\n      <td>Led by Woody, Andy's toys live happily in his ...</td>\n      <td>373554033</td>\n      <td>81.0</td>\n      <td>7.7</td>\n      <td>5415</td>\n      <td>1995</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>8844</td>\n      <td>Jumanji</td>\n      <td>65000000.0</td>\n      <td>[Adventure, Fantasy, Family]</td>\n      <td>When siblings Judy and Peter discover an encha...</td>\n      <td>262797249</td>\n      <td>104.0</td>\n      <td>6.9</td>\n      <td>2413</td>\n      <td>1995</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>15602</td>\n      <td>Grumpier Old Men</td>\n      <td>0.0</td>\n      <td>[Romance, Comedy]</td>\n      <td>A family wedding reignites the ancient feud be...</td>\n      <td>0</td>\n      <td>101.0</td>\n      <td>6.5</td>\n      <td>92</td>\n      <td>1995</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>31357</td>\n      <td>Waiting to Exhale</td>\n      <td>16000000.0</td>\n      <td>[Comedy, Drama, Romance]</td>\n      <td>Cheated on, mistreated and stepped on, the wom...</td>\n      <td>81452156</td>\n      <td>127.0</td>\n      <td>6.1</td>\n      <td>34</td>\n      <td>1995</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>11862</td>\n      <td>Father of the Bride Part II</td>\n      <td>0.0</td>\n      <td>[Comedy]</td>\n      <td>Just when George Banks has recovered from his ...</td>\n      <td>76578911</td>\n      <td>106.0</td>\n      <td>5.7</td>\n      <td>173</td>\n      <td>1995</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"      id                        title      budget  \\\n0    862                    Toy Story  30000000.0   \n1   8844                      Jumanji  65000000.0   \n2  15602             Grumpier Old Men         0.0   \n3  31357            Waiting to Exhale  16000000.0   \n4  11862  Father of the Bride Part II         0.0   \n\n                         genres  \\\n0   [Animation, Comedy, Family]   \n1  [Adventure, Fantasy, Family]   \n2             [Romance, Comedy]   \n3      [Comedy, Drama, Romance]   \n4                      [Comedy]   \n\n                                            overview    revenue  runtime  \\\n0  Led by Woody, Andy's toys live happily in his ...  373554033     81.0   \n1  When siblings Judy and Peter discover an encha...  262797249    104.0   \n2  A family wedding reignites the ancient feud be...          0    101.0   \n3  Cheated on, mistreated and stepped on, the wom...   81452156    127.0   \n4  Just when George Banks has recovered from his ...   76578911    106.0   \n\n   vote_average  vote_count  year  \n0           7.7        5415  1995  \n1           6.9        2413  1995  \n2           6.5          92  1995  \n3           6.1          34  1995  \n4           5.7         173  1995  "},"exec_count":3,"output_type":"execute_result"},"1":{"name":"stdout","output_type":"stream","text":"Family filter values \n 0     True\n1     True\n2    False\n3    False\n4    False\nName: genres, dtype: bool\nDrama filter values \n0    False\n1    False\n2    False\n3     True\n4    False\nName: genres, dtype: bool\n"},"2":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>title</th>\n      <th>budget</th>\n      <th>genres</th>\n      <th>overview</th>\n      <th>revenue</th>\n      <th>runtime</th>\n      <th>vote_average</th>\n      <th>vote_count</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>862</td>\n      <td>Toy Story</td>\n      <td>30000000.0</td>\n      <td>[Animation, Comedy, Family]</td>\n      <td>Led by Woody, Andy's toys live happily in his ...</td>\n      <td>373554033</td>\n      <td>81.0</td>\n      <td>7.7</td>\n      <td>5415</td>\n      <td>1995</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>8844</td>\n      <td>Jumanji</td>\n      <td>65000000.0</td>\n      <td>[Adventure, Fantasy, Family]</td>\n      <td>When siblings Judy and Peter discover an encha...</td>\n      <td>262797249</td>\n      <td>104.0</td>\n      <td>6.9</td>\n      <td>2413</td>\n      <td>1995</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>31357</td>\n      <td>Waiting to Exhale</td>\n      <td>16000000.0</td>\n      <td>[Comedy, Drama, Romance]</td>\n      <td>Cheated on, mistreated and stepped on, the wom...</td>\n      <td>81452156</td>\n      <td>127.0</td>\n      <td>6.1</td>\n      <td>34</td>\n      <td>1995</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"      id              title      budget                        genres  \\\n0    862          Toy Story  30000000.0   [Animation, Comedy, Family]   \n1   8844            Jumanji  65000000.0  [Adventure, Fantasy, Family]   \n3  31357  Waiting to Exhale  16000000.0      [Comedy, Drama, Romance]   \n\n                                            overview    revenue  runtime  \\\n0  Led by Woody, Andy's toys live happily in his ...  373554033     81.0   \n1  When siblings Judy and Peter discover an encha...  262797249    104.0   \n3  Cheated on, mistreated and stepped on, the wom...   81452156    127.0   \n\n   vote_average  vote_count  year  \n0           7.7        5415  1995  \n1           6.9        2413  1995  \n3           6.1          34  1995  "},"exec_count":3,"output_type":"execute_result"},"3":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>title</th>\n      <th>budget</th>\n      <th>genres</th>\n      <th>overview</th>\n      <th>revenue</th>\n      <th>runtime</th>\n      <th>vote_average</th>\n      <th>vote_count</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>862</td>\n      <td>Toy Story</td>\n      <td>30000000.0</td>\n      <td>[Animation, Comedy, Family]</td>\n      <td>Led by Woody, Andy's toys live happily in his ...</td>\n      <td>373554033</td>\n      <td>81.0</td>\n      <td>7.7</td>\n      <td>5415</td>\n      <td>1995</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>15602</td>\n      <td>Grumpier Old Men</td>\n      <td>0.0</td>\n      <td>[Romance, Comedy]</td>\n      <td>A family wedding reignites the ancient feud be...</td>\n      <td>0</td>\n      <td>101.0</td>\n      <td>6.5</td>\n      <td>92</td>\n      <td>1995</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>31357</td>\n      <td>Waiting to Exhale</td>\n      <td>16000000.0</td>\n      <td>[Comedy, Drama, Romance]</td>\n      <td>Cheated on, mistreated and stepped on, the wom...</td>\n      <td>81452156</td>\n      <td>127.0</td>\n      <td>6.1</td>\n      <td>34</td>\n      <td>1995</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"      id              title      budget                       genres  \\\n0    862          Toy Story  30000000.0  [Animation, Comedy, Family]   \n2  15602   Grumpier Old Men         0.0            [Romance, Comedy]   \n3  31357  Waiting to Exhale  16000000.0     [Comedy, Drama, Romance]   \n\n                                            overview    revenue  runtime  \\\n0  Led by Woody, Andy's toys live happily in his ...  373554033     81.0   \n2  A family wedding reignites the ancient feud be...          0    101.0   \n3  Cheated on, mistreated and stepped on, the wom...   81452156    127.0   \n\n   vote_average  vote_count  year  \n0           7.7        5415  1995  \n2           6.5          92  1995  \n3           6.1          34  1995  "},"exec_count":3,"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"8dd30f","input":"# enter your code here","pos":74,"type":"cell"}
{"cell_type":"code","exec_count":31,"id":"829bf7","input":"#reminder again - what's in snip\ndisplay(snip)\n\n#Function that creates a soup out of the desired metadata\ndef create_soup(x):\n    return ' '.join(x['genres']) + ' ' + x['overview'] \n\n#create a column with the soup in it    \nsnip['soup'] = snip.apply(create_soup, axis=1)   \n\n\nprint(f'The soup for Toy Story is: \\n{snip[\"soup\"][0]}')","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>title</th>\n      <th>budget</th>\n      <th>genres</th>\n      <th>overview</th>\n      <th>revenue</th>\n      <th>runtime</th>\n      <th>vote_average</th>\n      <th>vote_count</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>862</td>\n      <td>Toy Story</td>\n      <td>30000000.0</td>\n      <td>[Animation, Comedy, Family]</td>\n      <td>Led by Woody, Andy's toys live happily in his ...</td>\n      <td>373554033</td>\n      <td>81.0</td>\n      <td>7.7</td>\n      <td>5415</td>\n      <td>1995</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>8844</td>\n      <td>Jumanji</td>\n      <td>65000000.0</td>\n      <td>[Adventure, Fantasy, Family]</td>\n      <td>When siblings Judy and Peter discover an encha...</td>\n      <td>262797249</td>\n      <td>104.0</td>\n      <td>6.9</td>\n      <td>2413</td>\n      <td>1995</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>15602</td>\n      <td>Grumpier Old Men</td>\n      <td>0.0</td>\n      <td>[Romance, Comedy]</td>\n      <td>A family wedding reignites the ancient feud be...</td>\n      <td>0</td>\n      <td>101.0</td>\n      <td>6.5</td>\n      <td>92</td>\n      <td>1995</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>31357</td>\n      <td>Waiting to Exhale</td>\n      <td>16000000.0</td>\n      <td>[Comedy, Drama, Romance]</td>\n      <td>Cheated on, mistreated and stepped on, the wom...</td>\n      <td>81452156</td>\n      <td>127.0</td>\n      <td>6.1</td>\n      <td>34</td>\n      <td>1995</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>11862</td>\n      <td>Father of the Bride Part II</td>\n      <td>0.0</td>\n      <td>[Comedy]</td>\n      <td>Just when George Banks has recovered from his ...</td>\n      <td>76578911</td>\n      <td>106.0</td>\n      <td>5.7</td>\n      <td>173</td>\n      <td>1995</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"      id                        title      budget  \\\n0    862                    Toy Story  30000000.0   \n1   8844                      Jumanji  65000000.0   \n2  15602             Grumpier Old Men         0.0   \n3  31357            Waiting to Exhale  16000000.0   \n4  11862  Father of the Bride Part II         0.0   \n\n                         genres  \\\n0   [Animation, Comedy, Family]   \n1  [Adventure, Fantasy, Family]   \n2             [Romance, Comedy]   \n3      [Comedy, Drama, Romance]   \n4                      [Comedy]   \n\n                                            overview    revenue  runtime  \\\n0  Led by Woody, Andy's toys live happily in his ...  373554033     81.0   \n1  When siblings Judy and Peter discover an encha...  262797249    104.0   \n2  A family wedding reignites the ancient feud be...          0    101.0   \n3  Cheated on, mistreated and stepped on, the wom...   81452156    127.0   \n4  Just when George Banks has recovered from his ...   76578911    106.0   \n\n   vote_average  vote_count  year  \n0           7.7        5415  1995  \n1           6.9        2413  1995  \n2           6.5          92  1995  \n3           6.1          34  1995  \n4           5.7         173  1995  "},"exec_count":31,"output_type":"execute_result"},"1":{"name":"stdout","output_type":"stream","text":"The soup for Toy Story is: \nAnimation Comedy Family Led by Woody, Andy's toys live happily in his room until Andy's birthday brings Buzz Lightyear onto the scene. Afraid of losing his place in Andy's heart, Woody plots against Buzz. But when circumstances separate Buzz and Woody from their owner, the duo eventually learns to put aside their differences.\n"}},"pos":77,"type":"cell"}
{"cell_type":"code","exec_count":32,"id":"ee8b68","input":"#Import countVectorizer & cosine_similarity function\n# from sklearn.feature_extraction.text import CountVectorizer\n# from sklearn.metrics.pairwise import cosine_similarity\n\ncount = CountVectorizer(stop_words='english')\ncount_matrix = count.fit_transform(snip['soup'])\n\n#Compute the cosine similarity score \ncosine_sim2 = cosine_similarity(count_matrix, count_matrix)\n\n#get our indices (these haven't actually changed)\nindices2 = pd.Series(snip.index, index=snip['title'])\n\n#call our same function, using the same movie. \ncontent_recommender(snip, 'Grumpier Old Men', cosine_sim2, indices2, topN=2)","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>title</th>\n      <th>budget</th>\n      <th>genres</th>\n      <th>overview</th>\n      <th>revenue</th>\n      <th>runtime</th>\n      <th>vote_average</th>\n      <th>vote_count</th>\n      <th>year</th>\n      <th>soup</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>8844</td>\n      <td>Jumanji</td>\n      <td>65000000.0</td>\n      <td>[Adventure, Fantasy, Family]</td>\n      <td>When siblings Judy and Peter discover an encha...</td>\n      <td>262797249</td>\n      <td>104.0</td>\n      <td>6.9</td>\n      <td>2413</td>\n      <td>1995</td>\n      <td>Adventure Fantasy Family When siblings Judy an...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>31357</td>\n      <td>Waiting to Exhale</td>\n      <td>16000000.0</td>\n      <td>[Comedy, Drama, Romance]</td>\n      <td>Cheated on, mistreated and stepped on, the wom...</td>\n      <td>81452156</td>\n      <td>127.0</td>\n      <td>6.1</td>\n      <td>34</td>\n      <td>1995</td>\n      <td>Comedy Drama Romance Cheated on, mistreated an...</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"      id              title      budget                        genres  \\\n1   8844            Jumanji  65000000.0  [Adventure, Fantasy, Family]   \n3  31357  Waiting to Exhale  16000000.0      [Comedy, Drama, Romance]   \n\n                                            overview    revenue  runtime  \\\n1  When siblings Judy and Peter discover an encha...  262797249    104.0   \n3  Cheated on, mistreated and stepped on, the wom...   81452156    127.0   \n\n   vote_average  vote_count  year  \\\n1           6.9        2413  1995   \n3           6.1          34  1995   \n\n                                                soup  \n1  Adventure Fantasy Family When siblings Judy an...  \n3  Comedy Drama Romance Cheated on, mistreated an...  "},"exec_count":32,"output_type":"execute_result"}},"pos":79,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"17a2fb","input":"#in steps\n#convert the genres list in a series of columns\nstep1 = snip.apply(lambda x:pd.Series(x['genres']),axis=1)\nprint(f\"Step 1\\n{step1}\")\n\n#this step converts the rows into columns and \"stacks\" them all together\nstep2 = step1.stack()\nprint(f\"Step 2\\n{step2}\")\n\n#let's get just the unique values from this series\nstep3 = step2.unique()\nprint(f\"Step 3\\n{step3}\")\nprint(f\"Step 3 is a \\n{type(step3)}\")\n\n#numpy arrays can be joined just like lists, so let's join it to create a comma-delimited string\nstep4 = ', '.join(step3)\nprint(f\"Step 4\\n{step4}\")\n\n\n#let's do it all in one step\nallGenres = ', '.join(snip.apply(lambda x:pd.Series(x['genres']),axis=1).stack().unique())\nallGenres","output":{"0":{"name":"stdout","output_type":"stream","text":"Step 1\n           0        1        2\n0  Animation   Comedy   Family\n1  Adventure  Fantasy   Family\n2    Romance   Comedy      NaN\n3     Comedy    Drama  Romance\n4     Comedy      NaN      NaN\nStep 2\n0  0    Animation\n   1       Comedy\n   2       Family\n1  0    Adventure\n   1      Fantasy\n   2       Family\n2  0      Romance\n   1       Comedy\n3  0       Comedy\n   1        Drama\n   2      Romance\n4  0       Comedy\ndtype: object\nStep 3\n['Animation' 'Comedy' 'Family' 'Adventure' 'Fantasy' 'Romance' 'Drama']\nStep 3 is a \n<class 'numpy.ndarray'>\nStep 4\nAnimation, Comedy, Family, Adventure, Fantasy, Romance, Drama\n"},"1":{"data":{"text/plain":"'Animation, Comedy, Family, Adventure, Fantasy, Romance, Drama'"},"exec_count":4,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"2a6643","input":"#fetch C from the whole dataset\nC = df['vote_average'].mean()\nprint(f\"C is {C}\")\n\n#fetch m from the whole dataset\nm = df['vote_count'].quantile(.8)\nprint(f\"m is {m}\")\n\n#filter to movies that have greater than or equal to 80% of the votes\ndf = df[df['vote_count'] >= m]\n\n#see how many movies are left.\ndf.shape","output":{"0":{"name":"stdout","output_type":"stream","text":"C is 6.069160000000003\nm is 255.20000000000027\n"},"1":{"data":{"text/plain":"(1000, 10)"},"exec_count":5,"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"6279a8","input":"def weighted_rating(x, m, C):\n    v = x['vote_count']\n    R = x['vote_average']\n    # Compute the weighted score\n    return (v/(v+m) * R) + (m/(m+v) * C)","pos":11,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"8df9e2","input":"df['score1'] = df.apply(weighted_rating, args=(m,C), axis=1)\ndf.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>title</th>\n      <th>budget</th>\n      <th>genres</th>\n      <th>overview</th>\n      <th>revenue</th>\n      <th>runtime</th>\n      <th>vote_average</th>\n      <th>vote_count</th>\n      <th>year</th>\n      <th>score1</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>862</td>\n      <td>Toy Story</td>\n      <td>30000000.0</td>\n      <td>[Animation, Comedy, Family]</td>\n      <td>Led by Woody, Andy's toys live happily in his ...</td>\n      <td>373554033</td>\n      <td>81.0</td>\n      <td>7.7</td>\n      <td>5415</td>\n      <td>1995</td>\n      <td>7.626600</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>8844</td>\n      <td>Jumanji</td>\n      <td>65000000.0</td>\n      <td>[Adventure, Fantasy, Family]</td>\n      <td>When siblings Judy and Peter discover an encha...</td>\n      <td>262797249</td>\n      <td>104.0</td>\n      <td>6.9</td>\n      <td>2413</td>\n      <td>1995</td>\n      <td>6.820534</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>949</td>\n      <td>Heat</td>\n      <td>60000000.0</td>\n      <td>[Action, Crime, Drama, Thriller]</td>\n      <td>Obsessive master thief, Neil McCauley leads a ...</td>\n      <td>187436818</td>\n      <td>170.0</td>\n      <td>7.7</td>\n      <td>1886</td>\n      <td>1995</td>\n      <td>7.505628</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>710</td>\n      <td>GoldenEye</td>\n      <td>58000000.0</td>\n      <td>[Adventure, Action, Thriller]</td>\n      <td>James Bond must unmask the mysterious head of ...</td>\n      <td>352194034</td>\n      <td>130.0</td>\n      <td>6.6</td>\n      <td>1194</td>\n      <td>1995</td>\n      <td>6.506521</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>21032</td>\n      <td>Balto</td>\n      <td>0.0</td>\n      <td>[Family, Animation, Adventure]</td>\n      <td>An outcast half-wolf risks his life to prevent...</td>\n      <td>11348324</td>\n      <td>78.0</td>\n      <td>7.1</td>\n      <td>423</td>\n      <td>1995</td>\n      <td>6.712105</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"       id      title      budget                            genres  \\\n0     862  Toy Story  30000000.0       [Animation, Comedy, Family]   \n1    8844    Jumanji  65000000.0      [Adventure, Fantasy, Family]   \n5     949       Heat  60000000.0  [Action, Crime, Drama, Thriller]   \n9     710  GoldenEye  58000000.0     [Adventure, Action, Thriller]   \n12  21032      Balto         0.0    [Family, Animation, Adventure]   \n\n                                             overview    revenue  runtime  \\\n0   Led by Woody, Andy's toys live happily in his ...  373554033     81.0   \n1   When siblings Judy and Peter discover an encha...  262797249    104.0   \n5   Obsessive master thief, Neil McCauley leads a ...  187436818    170.0   \n9   James Bond must unmask the mysterious head of ...  352194034    130.0   \n12  An outcast half-wolf risks his life to prevent...   11348324     78.0   \n\n    vote_average  vote_count  year    score1  \n0            7.7        5415  1995  7.626600  \n1            6.9        2413  1995  6.820534  \n5            7.7        1886  1995  7.505628  \n9            6.6        1194  1995  6.506521  \n12           7.1         423  1995  6.712105  "},"exec_count":7,"output_type":"execute_result"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"65dcc3","input":"#fetch c from the already filtered data\nC2 = df['vote_average'].mean()\nprint(f\"C is {C2}\")\n\ndf['score2'] = df.apply(weighted_rating, args=(m,C2), axis=1)\ndf.head()","output":{"0":{"name":"stdout","output_type":"stream","text":"C is 6.805500000000003\n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>title</th>\n      <th>budget</th>\n      <th>genres</th>\n      <th>overview</th>\n      <th>revenue</th>\n      <th>runtime</th>\n      <th>vote_average</th>\n      <th>vote_count</th>\n      <th>year</th>\n      <th>score1</th>\n      <th>score2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>862</td>\n      <td>Toy Story</td>\n      <td>30000000.0</td>\n      <td>[Animation, Comedy, Family]</td>\n      <td>Led by Woody, Andy's toys live happily in his ...</td>\n      <td>373554033</td>\n      <td>81.0</td>\n      <td>7.7</td>\n      <td>5415</td>\n      <td>1995</td>\n      <td>7.626600</td>\n      <td>7.659741</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>8844</td>\n      <td>Jumanji</td>\n      <td>65000000.0</td>\n      <td>[Adventure, Fantasy, Family]</td>\n      <td>When siblings Judy and Peter discover an encha...</td>\n      <td>262797249</td>\n      <td>104.0</td>\n      <td>6.9</td>\n      <td>2413</td>\n      <td>1995</td>\n      <td>6.820534</td>\n      <td>6.890962</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>949</td>\n      <td>Heat</td>\n      <td>60000000.0</td>\n      <td>[Action, Crime, Drama, Thriller]</td>\n      <td>Obsessive master thief, Neil McCauley leads a ...</td>\n      <td>187436818</td>\n      <td>170.0</td>\n      <td>7.7</td>\n      <td>1886</td>\n      <td>1995</td>\n      <td>7.505628</td>\n      <td>7.593389</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>710</td>\n      <td>GoldenEye</td>\n      <td>58000000.0</td>\n      <td>[Adventure, Action, Thriller]</td>\n      <td>James Bond must unmask the mysterious head of ...</td>\n      <td>352194034</td>\n      <td>130.0</td>\n      <td>6.6</td>\n      <td>1194</td>\n      <td>1995</td>\n      <td>6.506521</td>\n      <td>6.636188</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>21032</td>\n      <td>Balto</td>\n      <td>0.0</td>\n      <td>[Family, Animation, Adventure]</td>\n      <td>An outcast half-wolf risks his life to prevent...</td>\n      <td>11348324</td>\n      <td>78.0</td>\n      <td>7.1</td>\n      <td>423</td>\n      <td>1995</td>\n      <td>6.712105</td>\n      <td>6.989183</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"       id      title      budget                            genres  \\\n0     862  Toy Story  30000000.0       [Animation, Comedy, Family]   \n1    8844    Jumanji  65000000.0      [Adventure, Fantasy, Family]   \n5     949       Heat  60000000.0  [Action, Crime, Drama, Thriller]   \n9     710  GoldenEye  58000000.0     [Adventure, Action, Thriller]   \n12  21032      Balto         0.0    [Family, Animation, Adventure]   \n\n                                             overview    revenue  runtime  \\\n0   Led by Woody, Andy's toys live happily in his ...  373554033     81.0   \n1   When siblings Judy and Peter discover an encha...  262797249    104.0   \n5   Obsessive master thief, Neil McCauley leads a ...  187436818    170.0   \n9   James Bond must unmask the mysterious head of ...  352194034    130.0   \n12  An outcast half-wolf risks his life to prevent...   11348324     78.0   \n\n    vote_average  vote_count  year    score1    score2  \n0            7.7        5415  1995  7.626600  7.659741  \n1            6.9        2413  1995  6.820534  6.890962  \n5            7.7        1886  1995  7.505628  7.593389  \n9            6.6        1194  1995  6.506521  6.636188  \n12           7.1         423  1995  6.712105  6.989183  "},"exec_count":8,"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"b274cb","input":"# enter your code here","pos":19,"type":"cell"}
{"cell_type":"markdown","id":"05325d","input":"# The Data\nFor our lesson, we're going to be using the movies_metadata.csv file in the data directory of the lesson. This is the same file used in the book. First let's do some simple cleaning. Banik explains most of this in the book. When we deviate from Banik's approach, we'll let you know.","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"08f2ae","input":"Because we have such a small matrix, we can actually print it and take a peek at what's going on in there. In order to print a tfidf matrix, we need to convert it to something that can be displayed.\n\n*Note: You won't need to do this bit in your homework or self-assessment, but it's helpful in understanding what we have.*","pos":47,"type":"cell"}
{"cell_type":"markdown","id":"261bf3","input":"## Knowledge-Based Recommender\n\nThe knowledge-based recommender is just a simple recommender that takes in some input from the user. Banik describes it as a recommender that:\n1. Gets user input on their preferences\n2. Extracts all the movies that match the conditions set by the user.\n3. Calculates the values of m and C for **ONLY THOSE MOVIES** and uses m and C to calculate scores and return the results.\n\nNote that Banik's appproach here is inconsistent with what he'd previously said about how the IMDB weighted metric is calculated. That's okay, we're going to follow his advice, but we'll compare the different approaches to computing the score afterward.\n\nWe already have most of the pieces that we need. Let's just look at how to wrap it all up in a function.\n\nOur function will take in a cleaned dataframe and a percentile to use for m. By default, the percentile will be .8. Note that the only changes we're making here from Banik's metric is to adjust how we do the genres filter.","pos":28,"type":"cell"}
{"cell_type":"markdown","id":"263b2e","input":"### *Self-Assessment: TF-IDF Vectors*","pos":69,"type":"cell"}
{"cell_type":"markdown","id":"27a1e3","input":"Let's test our recommender with Grumpier Old Men and our snipped dataset again.","pos":66,"type":"cell"}
{"cell_type":"markdown","id":"2d1547","input":"### *Self-Assessment: Pandas*","pos":20,"type":"cell"}
{"cell_type":"markdown","id":"30de58","input":"# Simple Recommender\nSimple recommenders simply return a list of values that are sorted by some kind of score. The most complicated bit of a simple recommender is determining the appropriate score to use. There's no right answer for what the score is or how it should be calculated. You'll need to consider the data that you're working with and decide how to calculate a meaningful score. For example, if you're interested in highly-rated movies, you might need to consider both the average rating for a movie and the number of people that rated the movie. Say you have a rating scale from 1 to 5 stars. Your highest average rating would be 5 - a perfect score. But does a rating of 5 by one user mean the same thing as a rating of 5 by 100 users? Probably not.\n\nBanik solves this problem by using the IMDB weighted rating. \n\n$$Weighted Raiting (WR) = (\\frac{v}{v+m} * R) + (\\frac{m}{v+m}*C)$$\n \nWhere:\n* v is the number of votes garnered by the movie\n* m is the minimum number of votes required for the movie to be in the chart (the prerequisite)\n* R is the mean rating of the movie\n* C is the mean rating of all the movies in the dataset\n\nBanik chose the 80th percentile for the minimum number of votes to be included in the recommender. \n\nNote that Banik chooses m (our minimum number of votes) based on the whole dataset, because IMDB sets this as the minimum threshold for being included in the ratings. So m is both a part of the metric AND a filter.\n\nLet's also base C on the whole dataset to start.\n\nLet's fetch C and m and filter to movies that have vote_counts greater than or equal to the 80th quantile. (This is equivalent to getting the top 20% of votes.) ","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"3a871e","input":"# Metadata-Based Recommender","pos":75,"type":"cell"}
{"cell_type":"markdown","id":"3f9a66","input":"Our simple recommender just needs the movie score now. Let's write our function to do scoring. Note that unlike Banik's metric, our version takes in x (the row of data) and m & C. Passing all the variables you need into the the function is a best practice that Banik does not follow, but we do.","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"4ac464","input":"How many talks are in the TED Talks data frame?","pos":21,"type":"cell"}
{"cell_type":"markdown","id":"50efe4","input":"Let's also break down what's going on with converting our cosine similarity to a list of tuples. \n\nThe first thing we're doing is getting the row from the matrix that corresponds to the movie we want to review. Let's say we want to review Grumpier Old Men. Grumpier Old Men has an index of 2. Let's fetch that row.","pos":53,"type":"cell"}
{"cell_type":"markdown","id":"5943e4","input":"Let's wrap this up in a function. We're going to do this slightly differently than Banik did. \n* We'll avoid giving it any variable defaults (which is a good practice unless you're hard-coding the defaults). \n* We'll also pass in the number of results to return. This is hard-coded number, so we will set a default for that.\n* We'll delete the passed-in movie explicitly, instead of assuming it's the first after sorting\n* We'll return the whole dataframe, not just the titles","pos":64,"type":"cell"}
{"cell_type":"markdown","id":"670925","input":"In the absence of numerical ratings here, use the ratio of the number of comments per 1000 views as a metric to sort the TED talks and print the 10 with the highest ratios.  \n\nDisplay only the description, the main speaker, and the number of views.","pos":26,"type":"cell"}
{"cell_type":"markdown","id":"714f33","input":"Select TED talks with these prerequisites:\n\n1. talks with duration of at least 5 minutes (i.e. 300 seconds)\n2. talks with only 1 speaker\n3. talks in the top 90\\% of views (exclude the bottom 10\\%)\n\nAlso inspect the number of talks that made the cut.","pos":23,"type":"cell"}
{"cell_type":"markdown","id":"748b6c","input":"<p><font size=18>Lesson 10: Recommender Systems 1</font></p>","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"7e79f5","input":"Load the data set **ted_main.csv** and display the first 5 rows. This data set can be found in the presentation download for this lesson.  More information about this data set <a href = https://www.kaggle.com/rounakbanik/ted-talks> here </a>.  ","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"7f5ac3","input":"## Knowledge-based Recommender Self Assessment\nFor this example we will use the TED Talks data set that you have already loaded to build a knowledge-based recommender by soliciting the desired publication year and word rating from the user.","pos":35,"type":"cell"}
{"cell_type":"markdown","id":"81908f","input":"1. Print a list of the descriptive word ratings for the user to choose from. (*Hint: follow the directions in this lesson.*)\n\n2. Ask the user to enter answers to the following questions:\n\n    - Enter a descriptive word for rating.\n    - Enter the earliest year published for the talk (between 2006 and 2017).\n    - Enter the latest year published for the talk (between 2006 and 2017).\n\n3. Consider only talks with the top 90% of views (after filtering based on user preferences).\n\n4. Display the top 5 recommended talks according to the \"comments per 1000 views\" ratio (calculated AFTER doing steps 2 & 3).\n\n5. Display only the main speaker, the name of the talk, the year published, and the comments per thousand views ratio.\n\n6.  Show the results for the word rating \"obnoxious\" and published years between 2009 and 2014.","pos":43,"type":"cell"}
{"cell_type":"markdown","id":"964d37","input":"## Simple Recommender Self-Assessment\n### *Self-Assessment: Load and Display*","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"9cc7d0","input":"If you followed along with the comments while we cleaned data, you noted that we made some minor changes, primarily in chaining some of the functions that Banik uses. While it's not necessary to chain functions, it does simplify our code, so we included this method as another option. It's one of the nifty features of Pandas.\n\n### Avoiding \"Explode\"\nHere's where we're going to make a bigger diversion. Banik would have you \"explode\" the genres. He does this to make it easier to filter on the genres column, but it has an unfortunate side effect of making duplicate rows per movie. It's easy to avoid that by using a different method of filtering. Let's see how that works.","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"9df87f","input":"What happens if use C from just the filtered dataframe?","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"9f7b2b","input":"## Content-Based Recommender\n\nThere are a number of different approaches to doing content-based recommenders. What they all share is that they use some method to determine a similarity metric between any two items that you could recommend. Then, given one \"seed\" item, we can recommend items that are similar to that item.\n\nBanik uses Term Frequency-Inverse Document Frequency and Cosine Similarity. Be sure to read the book to fully understand these concepts. But we'll step through it here for you with a the \"snip\" dataset we created above.\n\nNote also that you can <a href=\"https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.html\">read the documentation</a> for the TfidfVectorizer. By default, it will convert everything to lowercase. There are many other parameters that you can pass in to change how it preprocesses the words. We're passing in one - stop_words.\n\n### Computing TF-IDF","pos":45,"type":"cell"}
{"cell_type":"markdown","id":"a39f25","input":"### *Self-Assessment: Stringified Dictionaries*","pos":39,"type":"cell"}
{"cell_type":"markdown","id":"a88fa8","input":"### Recommender Function","pos":63,"type":"cell"}
{"cell_type":"markdown","id":"a95369","input":"### Fetching unique values from a column of lists\nThe one other thing we need to be able to do where the exploding helps is to get the list of unique genres. Let's look at how we could do that. We'll do it slightly differently than Banik. And, we'll first break it down into steps so you can see what's happening.","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"a9c8e6","input":"We have two other versions of scores in the dataset. Let's compare the rankings if we sort in different ways.","pos":32,"type":"cell"}
{"cell_type":"markdown","id":"ac253e","input":"Since we will be asking the user to enter a descriptive word rating to select a talk and the feature  **ratings** is a stringified dictionary, convert the list of dictionaries into a list of strings. Do not explode like the book does. Follow the directons in this lesson.","pos":40,"type":"cell"}
{"cell_type":"markdown","id":"ac53e0","input":"Compute the cosine similarity score for all of the TED talks in the data frame. Next build the recommender to request the name of a TED talk in the data frame and provide the top 5 recommended talks based on the similarity of the descriptions with the name of the talk supplied.\n\nShow that it works by getting the top 5 recommended talks that are similar to the talk named \"Tyler Cowen: Be suspicious of simple stories\" (from the `name` column of the data frame).","pos":73,"type":"cell"}
{"cell_type":"markdown","id":"b019ca","input":"Extract the year of the talk from the feature called **published_date** and put it in a new variable called **published_year**.  \n\nFirst, the film dates need to be converted to datetime objects and then extract the year of the film date.  However, for the TED Talks data, include the argument *unit='s'* in the **to_datetime()** function in order to convert the dates correctly (based on the number of seconds to the unix epoch start).\n\nThen convert **published_year** to an integer data type and be sure that there are no NAT values among them.","pos":37,"type":"cell"}
{"cell_type":"markdown","id":"b24b68","input":"When we print out this matrix, we can see that \"afraid\" is an important word in the description of Toy Story, but not in any of our other movies. But \"wedding\" is important in both Grumpier Old Men and Father of the Bride.\n\n### Computing Cosine Similarity\nNow that we have a tfidf matrix, we can compute the cosign similarity of the matrix with itself. What this is doing is determining the overall similarity score between each movie. A cosine similarity score is a number between -1 and 1. The higher the number, the more similar two items are.","pos":49,"type":"cell"}
{"cell_type":"markdown","id":"b3d4e4","input":"We can see that column 1 and column 4 of our matrix contain our 2 most similar movies. But, what movies are those? We need to go back to our dataframe to figure that out. Let's extract just the indices for our top 2 movies. Finally, we'll use <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.iloc.html\">iloc</a> to find the corresponding movie titles.","pos":61,"type":"cell"}
{"cell_type":"markdown","id":"b62a16","input":"We can see that the most similar movie to Grumpier Old Men is... Grumpier Old Men. This makes sense - it's the same movie! We don't want that movie in our results, though. Since we know this is a balanced matrix (the indexes are the same for the columns and for the rows), we can just delete the item with our Grumpier Old Men index. Remember, that's 2. Let's see how that works.","pos":57,"type":"cell"}
{"cell_type":"markdown","id":"c00a26","input":"### *Self-Assessment: Prerequisites*","pos":22,"type":"cell"}
{"cell_type":"markdown","id":"c40068","input":"Note that what we get is a matrix (which we've converted to a dataframe for display) that scores each movie in relation to another movie. A movie scored with itself will always be a one. Note that in our tiny dataset here, there's nothing very similar to Toy Story. \n\nWhich two movies are most similar?\n\nBanik uses a reverse mapping of indexes and titles to fetch data from the cosine similarity matrix. Let's take a look at what that is doing.","pos":51,"type":"cell"}
{"cell_type":"markdown","id":"c59b6a","input":"You can see that it does indeed make a difference in the score. But would it make a difference in our recommendations?","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"c757ba","input":"### *Self-Assessment: Dealing with Dates*","pos":36,"type":"cell"}
{"cell_type":"markdown","id":"cb2dce","input":"A metadata-based recommender is nothing more than a content-based recommender that has more words, and sometimes more specific words. Banik demonstrates this with keywords and credits and we have that code for you in the Content Based Recommenders file in this directory. \n\nWe can also demonstrate the basic principles with our snip dataset. We already have our genres in a list and none of our snip movies have more than 3 genres and each of our genres are only 1 word. So we don't have to generate lists or sanitize anything. We simply need to create a soup of our overview and our genres.\n\nNote: genres is a list, so we'll need to use ' '.join() to turn it into a string. Overview is a string, so we just need to add that string onto the end of the string created after ' '.join()ing the genres. Be sure to add a space in between.","pos":76,"type":"cell"}
{"cell_type":"markdown","id":"d5f59a","input":"Banik used a count vectorizer instead of a tf-idf vectorizer for his metadata recommender. He does this because using a tf-idf would downweight actors that appear in more than one movie. The same thing would happen with genres. So we'll follow suit and use the count vectorizer here.\n\nYou can read <a href=\"https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.CountVectorizer.html\">the documentation for count_vectorizer</a> to learn more about it.","pos":78,"type":"cell"}
{"cell_type":"markdown","id":"d73d11","input":"### *Self-Assessment: Create the Knowledge-Based Recommender*","pos":42,"type":"cell"}
{"cell_type":"markdown","id":"d85ae9","input":"The <a href=\"https://book.pythontips.com/en/latest/enumerate.html\">enumerate function</a> loops over some iterable object and returns a counter and the value for each item in the iterable. We can see that what cosine_sim[2] returns is an array, which is an iterable object. We can't directly print the results from enumerate, so we have to wrap it in a list function.\n\nWhat this results in is a list of tuples that correspond to the column number and the cosine similarity score for each movie that we compared to Grumpier Old Men. Which column number would be Grumpier Old Men compared with itself?","pos":55,"type":"cell"}
{"cell_type":"markdown","id":"dfeb08","input":"Great. That got rid of the tuple that corresponded to the column Grumpier Old Men.\n\nThe next thing we do is to sort this list by the score (the second bit of the tuple). We're using a lambda function to do that. Let's see what we get when we sort.","pos":59,"type":"cell"}
{"cell_type":"markdown","id":"e5c092","input":"### *Self-Assessment: Create the Content-Based Recommender Based on Cosine Similarity*","pos":72,"type":"cell"}
{"cell_type":"markdown","id":"e8f43e","input":"Let's apply the score to the dataframe.","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"ea8d65","input":"## Content-Based Recommender Self Assessment\n\nFor this example we will use the TED Talks data set that you have already loaded to build a content-based recommender based on the descriptions of the talks.  This will correspond to the **plot description-based recommender**.","pos":68,"type":"cell"}
{"cell_type":"markdown","id":"eb9f0e","input":"Did the different methods of computing the score impact the recommendation results in a significant way?","pos":34,"type":"cell"}
{"cell_type":"markdown","id":"ec43fd","input":"We'll test our code by requesting movies that have the genres 'Family' and a runtime between 80 and 120 minutes and a year between 1980 and 2000. We'll return the output to a variable so we can review it in different ways.","pos":30,"type":"cell"}
{"cell_type":"markdown","id":"f6e119","input":"### *Self-Assessment: Compute a Metric, Sort and Print*","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"fca724","input":"From the original TED Talks data frame that use in this lesson, create the TF-IDF (term frequency - inverse document frequency) matrix from the descriptions of the talks.  The TF-IDF is high where a rare term is present or frequent in a document and TF-IDF is near zero where a term is absent from a document, or abundant across all documents.\n\nThe feature name in the data frame is **description**.\n\nOutput the shape of the TF-IDF matrix you create. The number of rows corresponds to the number of TED talks in the data frame and the number of columns represents the number of unique terms. ","pos":70,"type":"cell"}
{"cell_type":"markdown","id":"fe3460","input":"Even with this tiny dataset, switching between TF-IDF and CountVectorizer and the linear kernel and the cosine-similarity changed our top two results.\n\nIt's worth trying different approaches with your data to determine the right fit.","pos":80,"type":"cell"}
{"id":0,"time":1611094731241,"type":"user"}
{"last_load":1611094733430,"type":"file"}